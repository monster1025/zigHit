###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Mar/2020  12:48:32
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.1\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f C:\Users\monster\AppData\Local\Temp\EW289.tmp ("C:\Texas
#        Instruments\Z-Stack 3.0.1\Components\stack\zdo\ZDApp.c" -D NV_INIT -D
#        NV_RESTORE -D TC_LINKKEY_JOIN -D ZBA_FALLBACK_NWKKEY -D POWER_SAVING
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D MT_ZDO_MGMT -D xZCL_EZMODE -D MT_APP_CNF_FUNC -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D HAL_KEY=FALSE -D
#        HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -lC "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=MAX_CHANNELS_24GHZ -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Russian_RUS.1251
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\ZDApp.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\ZDApp.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.1\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2015-10-06 12:04:24 -0700 (Tue, 06 Oct 2015) $
      4            Revision:       $Revision: 44520 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66             
     67          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     68          #include "gp_common.h"
     69          #endif
     70             
     71          #include "bdb.h"
     72          #include "bdb_interface.h"
     73          
     74          #include "ssp.h"
     75          
     76          /* HAL */
     77          #include "hal_led.h"
     78          #include "hal_lcd.h"
     79          #include "hal_key.h"
     80          
     81          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     82            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     83          #endif
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          #if !defined( NWK_START_DELAY )
     90            #define NWK_START_DELAY             100   // in milliseconds
     91          #endif
     92          
     93          #if !defined( LEAVE_RESET_DELAY )
     94            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     95          #endif
     96          
     97          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     98            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     99          #endif
    100          
    101          #if !defined( BEACON_REQUEST_DELAY )
    102            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    103          #endif
    104          
    105          #if !defined( BEACON_REQ_DELAY_MASK )
    106            #define BEACON_REQ_DELAY_MASK       0x007F
    107          #endif
    108          
    109          #define MAX_RESUME_RETRY            3
    110          
    111          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    112          
    113          // Beacon Order Settings (see NLMEDE.h)
    114          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    115          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    116          
    117          // Leave control bits
    118          #define ZDAPP_LEAVE_CTRL_INIT 0
    119          #define ZDAPP_LEAVE_CTRL_SET  1
    120          #define ZDAPP_LEAVE_CTRL_RA   2
    121          
    122          // Address Manager Stub Implementation
    123          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    124          
    125          
    126          #if !defined ZDO_NV_SAVE_RFDs
    127          #define ZDO_NV_SAVE_RFDs  TRUE
    128          #endif
    129          
    130          // Delay time before updating NWK NV data to force fewer writes during high activity.
    131          #if ZDO_NV_SAVE_RFDs
    132          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    133          #else
    134          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    135          #endif
    136          
    137          // Timeout value to process New Devices
    138          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    139          
    140          
    141          //ZDP_BIND_SKIP_VALIDATION, redefined as ZDP_BIND_VALIDATION
    142          #if defined ( ZDP_BIND_VALIDATION )
    143          #if !defined MAX_PENDING_BIND_REQ
    144          #define MAX_PENDING_BIND_REQ 3
    145          #endif
    146          #endif
    147          
    148          #ifdef LEGACY_ZDO_LEDS
    149          #define zdoHalLedSet HalLedSet
    150          #else
    151          #define zdoHalLedSet(...)
    152          #endif
    153          
    154          /******************************************************************************
    155           * TYPEDEFS
    156           */
    157          typedef struct
    158          {
    159            void   *next;
    160            uint16 shortAddr;
    161            uint16 timeDelta;
    162          } ZDAppNewDevice_t;
    163          
    164          /*********************************************************************
    165           * GLOBAL VARIABLES
    166           */
    167          
    168          #if defined( LCD_SUPPORTED )
    169            uint8 MatchRsps = 0;
    170          #endif
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    173          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    180          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    181          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    183          
    184          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    188          
    189          #if defined ( ZDP_BIND_VALIDATION )
    190          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
    191          #endif
    192          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint32 runtimeChannel;
   \                     runtimeChannel:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint8 FrameCounterUpdated = FALSE;
   \                     FrameCounterUpdated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          /*********************************************************************
    196           * EXTERNAL VARIABLES
    197           */
    198          
    199          extern bool    requestNewTrustCenterLinkKey;
    200          extern uint32  requestLinkKeyTimeout;
    201          extern CONST   uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    202          /*********************************************************************
    203           * EXTERNAL FUNCTIONS
    204           */
    205          
    206          /*********************************************************************
    207           * LOCAL FUNCTIONS
    208           */
    209          void ZDApp_NetworkStartEvt( void );
    210          void ZDApp_DeviceAuthEvt( void );
    211          void ZDApp_SaveNetworkStateEvt( void );
    212          
    213          uint8 ZDApp_ReadNetworkRestoreState( void );
    214          uint8 ZDApp_RestoreNetworkState( void );
    215          void ZDAppDetermineDeviceType( void );
    216          void ZDApp_InitUserDesc( void );
    217          void ZDAppCheckForHoldKey( void );
    218          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    219          void ZDApp_ProcessNetworkJoin( void );
    220          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    221          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt );
    222          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    223          
    224          void ZDApp_SecInit( uint8 state );
    225          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    226          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    227          
    228          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    229          
    230          void ZDApp_ResetTimerStart( uint16 delay );
    231          void ZDApp_ResetTimerCancel( void );
    232          void ZDApp_LeaveCtrlInit( void );
    233          void ZDApp_LeaveCtrlSet( uint8 ra );
    234          uint8 ZDApp_LeaveCtrlBypass( void );
    235          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    236          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr, uint8 removeChildren, uint8 rejoin );
    237          void ZDApp_NodeProfileSync( uint8 stackProfile );
    238          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    239          void ZDApp_RegisterCBs( void );
    240          void ZDApp_InitZdoCBFunc(void);
    241          #if defined ( ZDP_BIND_VALIDATION )
    242          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    243          void ZDApp_InitPendingBind( void );
    244          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    245          void ZDApp_AgeOutPendingBindEntry( void );
    246          #endif
    247          
    248          void ZDApp_SetParentAnnceTimer( void );
    249          void ZDApp_StoreNwkSecMaterial(void);
    250          
    251          /*********************************************************************
    252           * LOCAL VARIABLES
    253           */
    254          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    255          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    256          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    260          devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    261          
    262          // previous rejoin state

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263            devStates_t prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \                     prevDevState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for prevDevState>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          
    265          //#if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )
    266          //  devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
    267          //  //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    268          //                        // to parent. Set to make the device do an Orphan scan.
    269          //#else
    270          //  // Set the default to coodinator
    271          //  devStartModes_t devStartMode = MODE_HARD;
    272          //#endif

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    273          devStartModes_t devStartMode = MODE_JOIN;
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    274          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    275          uint8 retryCnt = 0;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    276          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    277          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000007                REQUIRE __INIT_XDATA_I
    278          {
    279            ZDO_EP,
    280            0,
    281            &ZDAppTaskID,
    282            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    283            (afNetworkLatencyReq_t)0            // No Network Latency req
    284          };
    285          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    286          uint32 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I
    287          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    288          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    289          
    290          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    291          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    292          
    293          /*********************************************************************
    294           * @fn      ZDApp_Init
    295           *
    296           * @brief   ZDApp Initialization function.
    297           *
    298           * @param   task_id - ZDApp Task ID
    299           *
    300           * @return  None
    301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    303          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    304            // Save the task ID
    305            ZDAppTaskID = task_id;
   \   000006   90....       MOV       DPTR,#ZDAppTaskID
   \   000009   F0           MOVX      @DPTR,A
    306          
    307            // Initialize the ZDO global device short address storage
    308            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV       DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    309            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV       A,#-0x2
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   04           INC       A
   \   000018   F0           MOVX      @DPTR,A
    310            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    311          
    312            // Initialize ZDO items and setup the device - type of device to create.
    313            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL     `??ZDO_Init::?relay`; Banked call to: ZDO_Init
    314          
    315            // Register the endpoint description with the AF
    316            // This task doesn't have a Simple description, but we still need
    317            // to register the endpoint.
    318            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV       R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV       R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    319          
    320          #if defined( ZDO_USERDESC_RESPONSE )
    321            ZDApp_InitUserDesc();
   \   000026                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000026   12....       LCALL     `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    322          #endif // ZDO_USERDESC_RESPONSE
    323          
    324            // Initialize the ZDO callback function pointers zdoCBFunc[]
    325            ZDApp_InitZdoCBFunc();
   \   000029                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   000029   12....       LCALL     `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    326          
    327            ZDApp_RegisterCBs();
   \   00002C                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00002C   12....       LCALL     `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    328          
    329          #if defined ( ZDP_BIND_VALIDATION )
    330          #if defined ( REFLECTOR )
    331            ZDApp_InitPendingBind();
    332          #endif
    333          #endif
    334          } /* ZDApp_Init() */
   \   00002F   02....       LJMP      ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    335          
    336          /*********************************************************************
    337           * @fn          ZDApp_SecInit
    338           *
    339           * @brief       ZDApp initialize security.
    340           *
    341           * @param       state - device initialization state
    342           *
    343           * @return      none
    344           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    345          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    346          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
    347            uint8 zgPreConfigKey[SEC_KEY_LEN];
    348          
    349            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    350            {
    351              // Set the Trust Center bit
    352              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    353            }
    354          
    355            // Initialize ZigBee Device Security Manager
    356            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL     `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    357          
    358            if ( ZG_SECURE_ENABLED )
    359            {
    360              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV       A,?V0
   \   000011   603A         JZ        ??ZDApp_SecInit_0
    361              {
    362                if( _NIB.nwkKeyLoaded == FALSE )
   \   000013   90....       MOV       DPTR,#_NIB + 61
   \   000016   E0           MOVX      A,@DPTR
   \   000017   7034         JNZ       ??ZDApp_SecInit_0
    363                {
    364                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    365                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000019   90....       MOV       DPTR,#zgSecurityMode
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6401         XRL       A,#0x1
   \   00001F   702C         JNZ       ??ZDApp_SecInit_0
   \   000021   90....       MOV       DPTR,#zgPreConfigKeys
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6026         JZ        ??ZDApp_SecInit_0
    366                  {
    367                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000027                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000027   AC..         MOV       R4,?XSP + 0
   \   000029   AD..         MOV       R5,?XSP + 1
   \   00002B   7A62         MOV       R2,#0x62
   \   00002D   7B00         MOV       R3,#0x0
   \   00002F   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    368                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000032                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000032   7900         MOV       R1,#0x0
   \   000034   AA..         MOV       R2,?XSP + 0
   \   000036   AB..         MOV       R3,?XSP + 1
   \   000038   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    369                      SSP_SwitchNwkKey( 0 );
   \   00003B                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   00003B   7900         MOV       R1,#0x0
   \   00003D   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    370          
    371                      // clear local copy of key
    372                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C10         MOV       R4,#0x10
   \   000042   7D00         MOV       R5,#0x0
   \   000044   7900         MOV       R1,#0x0
   \   000046   AA..         MOV       R2,?XSP + 0
   \   000048   AB..         MOV       R3,?XSP + 1
   \   00004A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    373                  }
    374                }
    375              }
    376          
    377              // clean the new devices list when Security module is initialized
    378              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   00004D   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000050   6021         JZ        ??ZDApp_SecInit_1
    379              {
    380                ZDAppNewDevice_t *pNewDeviceNext;
    381          
    382                while ( ZDApp_NewDeviceList )
    383                {
    384                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000052   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000055   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000058   FE           MOV       R6,A
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   FF           MOV       R7,A
    385                  osal_mem_free( ZDApp_NewDeviceList );
   \   00005C                ; Setup parameters for call to function osal_mem_free
   \   00005C   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00005F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000062   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    386                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000065   EF           MOV       A,R7
   \   000066   F9           MOV       R1,A
   \   000067   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   00006A   EE           MOV       A,R6
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   EF           MOV       A,R7
   \   00006E   F0           MOVX      @DPTR,A
    387                }
   \   00006F   EE           MOV       A,R6
   \   000070   49           ORL       A,R1
   \   000071   70DF         JNZ       ??ZDApp_SecInit_2
    388              }
    389            }
    390          }
   \                     ??ZDApp_SecInit_1:
   \   000073   7410         MOV       A,#0x10
   \   000075   02....       LJMP      ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine62_0
   \   000001                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    391          
    392          /*********************************************************************
    393           * @fn      ZDApp_event_loop()
    394           *
    395           * @brief   Main event loop for Zigbee device objects task. This function
    396           *          should be called at periodic intervals.
    397           *
    398           * @param   task_id - Task ID
    399           * @param   events  - Bitmap of events
    400           *
    401           * @return  none
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    405            uint8 *msg_ptr;
    406          
    407            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL       A,#0x80
   \   00000D   702D         JNZ       ??ZDApp_event_loop_0
    408            {
    409              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    410              {
    411                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    412          
    413                // Release the memory
    414                osal_msg_deallocate( msg_ptr );
    415              }
    416          
    417              // Return unprocessed events
    418              return (events ^ SYS_EVENT_MSG);
    419            }
    420          
    421            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EA           MOV       A,R2
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5040         JNC       ??ZDApp_event_loop_1
    422            {
    423              // Initialize apps and start the network
    424              ZDApp_ChangeState( DEV_INIT );
   \   000014                ; Setup parameters for call to function ZDApp_ChangeState
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    425          
    426              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    427                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   000019                ; Setup parameters for call to function ZDO_StartDevice
   \   000019   7C0F         MOV       R4,#0xf
   \   00001B   7B0F         MOV       R3,#0xf
   \   00001D   90....       MOV       DPTR,#devStartMode
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FA           MOV       R2,A
   \   000022   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F9           MOV       R1,A
   \   000029   12....       LCALL     `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    428          
    429              // Return unprocessed events
    430              return (events ^ ZDO_NETWORK_INIT);
   \   00002C   EE           MOV       A,R6
   \   00002D   6401         XRL       A,#0x1
   \   00002F   02....       LJMP      ??ZDApp_event_loop_2 & 0xFFFF
    431            }
   \                     ??ZDApp_event_loop_3:
   \   000032                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000032   12....       LCALL     `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   000035                ; Setup parameters for call to function osal_msg_deallocate
   \   000035   AA..         MOV       R2,?V0
   \   000037   AB..         MOV       R3,?V1
   \   000039   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   00003C                ; Setup parameters for call to function osal_msg_receive
   \   00003C   90....       MOV       DPTR,#ZDAppTaskID
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F9           MOV       R1,A
   \   000041   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000044   8A..         MOV       ?V0,R2
   \   000046   8B..         MOV       ?V1,R3
   \   000048   EA           MOV       A,R2
   \   000049   4B           ORL       A,R3
   \   00004A   70E6         JNZ       ??ZDApp_event_loop_3
   \   00004C   EE           MOV       A,R6
   \   00004D   FA           MOV       R2,A
   \   00004E   EF           MOV       A,R7
   \   00004F   6480         XRL       A,#0x80
   \   000051   02....       LJMP      ??ZDApp_event_loop_4 & 0xFFFF
    432          
    433            if ( ZSTACK_ROUTER_BUILD )
    434            {
    435              if ( events & ZDO_NETWORK_START )
    436              {
    437                ZDApp_NetworkStartEvt();
    438          
    439                // Return unprocessed events
    440                return (events ^ ZDO_NETWORK_START);
    441              }
    442          
    443              if ( events & ZDO_ROUTER_START )
    444              {
    445                if ( nwkStatus == ZSuccess )
    446                {
    447                  if ( devState == DEV_END_DEVICE )
    448                  {
    449                    ZDApp_ChangeState( DEV_ROUTER );
    450                  }
    451          
    452                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
    453          
    454                  if ( zgChildAgingEnable == TRUE )
    455                  {
    456                    // Once the device has changed its state to a ROUTER set the timer to send
    457                    // Parent annce
    458                    ZDApp_SetParentAnnceTimer();
    459                  }
    460                }
    461                else
    462                {
    463                  // remain as end device
    464                }
    465                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
    466          
    467                // Return unprocessed events
    468                return (events ^ ZDO_ROUTER_START);
    469              }
    470          
    471              if ( events & ZDO_PARENT_ANNCE_EVT )
    472              {
    473                ZDApp_SendParentAnnce();
    474          
    475                // Return unprocessed events
    476                return (events ^ ZDO_PARENT_ANNCE_EVT);
    477              }
    478            }
    479          
    480            if( events & ZDO_REJOIN_BACKOFF )
   \                     ??ZDApp_event_loop_1:
   \   000054   EB           MOV       A,R3
   \   000055   5420         ANL       A,#0x20
   \   000057   6034         JZ        ??ZDApp_event_loop_5
    481            {
    482              if( devState == DEV_NWK_BACKOFF )
   \   000059   90....       MOV       DPTR,#devState
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   640C         XRL       A,#0xc
   \   00005F   700D         JNZ       ??ZDApp_event_loop_6
    483              {
    484                ZDApp_ChangeState(DEV_NWK_DISC);
   \   000061                ; Setup parameters for call to function ZDApp_ChangeState
   \   000061   7902         MOV       R1,#0x2
   \   000063   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    485                // Restart scan for rejoin
    486                ZDApp_StartJoiningCycle();
   \   000066                ; Setup parameters for call to function ZDApp_StartJoiningCycle
   \   000066   12....       LCALL     `??ZDApp_StartJoiningCycle::?relay`; Banked call to: ZDApp_StartJoiningCycle
    487                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
   \   000069                ; Setup parameters for call to function osal_start_timerEx
   \   000069   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   00006C   800B         SJMP      ??ZDApp_event_loop_7
    488              }
    489              else
    490              {
    491                // Rejoin backoff, silent period
    492                ZDApp_ChangeState(DEV_NWK_BACKOFF);
   \                     ??ZDApp_event_loop_6:
   \   00006E                ; Setup parameters for call to function ZDApp_ChangeState
   \   00006E   790C         MOV       R1,#0xc
   \   000070   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    493                ZDApp_StopJoiningCycle();
   \   000073                ; Setup parameters for call to function ZDApp_StopJoiningCycle
   \   000073   12....       LCALL     `??ZDApp_StopJoiningCycle::?relay`; Banked call to: ZDApp_StopJoiningCycle
    494                osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinBackoff );
   \   000076                ; Setup parameters for call to function osal_start_timerEx
   \   000076   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \                     ??ZDApp_event_loop_7:
   \   000079   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007C   7A00         MOV       R2,#0x0
   \   00007E   7B20         MOV       R3,#0x20
    495              }
   \   000080   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
    496          
    497              return ( events ^ ZDO_REJOIN_BACKOFF);
   \   000086   EE           MOV       A,R6
   \   000087   FA           MOV       R2,A
   \   000088   EF           MOV       A,R7
   \   000089   6420         XRL       A,#0x20
   \   00008B   8056         SJMP      ??ZDApp_event_loop_4
    498            }
    499          
    500            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_5:
   \   00008D   EA           MOV       A,R2
   \   00008E   5410         ANL       A,#0x10
   \   000090   602A         JZ        ??ZDApp_event_loop_8
    501            {
    502              ZDO_UpdateNwkStatus( devState );
   \   000092                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000092   90....       MOV       DPTR,#devState
   \   000095   E0           MOVX      A,@DPTR
   \   000096   F9           MOV       R1,A
   \   000097   12....       LCALL     `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    503          
    504              // At start up, do one MTO route discovery if the device is a concentrator
    505              if ( zgConcentratorEnable == TRUE )
   \   00009A   90....       MOV       DPTR,#zgConcentratorEnable
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   6401         XRL       A,#0x1
   \   0000A0   7013         JNZ       ??ZDApp_event_loop_9
    506              {
    507                // Start next event
    508                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000A2                ; Setup parameters for call to function osal_start_timerEx
   \   0000A2   90....       MOV       DPTR,#__Constant_64
   \   0000A5   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000A8   7A00         MOV       R2,#0x0
   \   0000AA   7B08         MOV       R3,#0x8
   \   0000AC   90....       MOV       DPTR,#NWK_TaskID
   \   0000AF   12....       LCALL     ??Subroutine60_0 & 0xFFFF
    509              }
   \                     ??CrossCallReturnLabel_89:
   \   0000B2   12....       LCALL     ?DEALLOC_XSTACK8
    510          
    511              // Return unprocessed events
    512              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_9:
   \   0000B5   EE           MOV       A,R6
   \   0000B6   6410         XRL       A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000B8   FA           MOV       R2,A
   \   0000B9   EF           MOV       A,R7
   \   0000BA   8027         SJMP      ??ZDApp_event_loop_4
    513            }
    514          
    515            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_8:
   \   0000BC   EA           MOV       A,R2
   \   0000BD   5408         ANL       A,#0x8
   \   0000BF   6006         JZ        ??ZDApp_event_loop_10
    516            {
    517              // User defined logic
    518          
    519              // Return unprocessed events
    520              return (events ^ ZDO_COMMAND_CNF);
   \   0000C1   EA           MOV       A,R2
   \   0000C2   6408         XRL       A,#0x8
   \   0000C4   FA           MOV       R2,A
   \   0000C5   8044         SJMP      ??ZDApp_event_loop_11
    521            }
    522          
    523            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_10:
   \   0000C7   EB           MOV       A,R3
   \   0000C8   5401         ANL       A,#0x1
   \   0000CA   601A         JZ        ??ZDApp_event_loop_12
    524            {
    525              // Save only in valid state
    526              if ( _NIB.nwkState == NWK_ROUTER || _NIB.nwkState == NWK_ENDDEVICE )
   \   0000CC   90....       MOV       DPTR,#_NIB + 35
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   F8           MOV       R0,A
   \   0000D1   7408         MOV       A,#0x8
   \   0000D3   68           XRL       A,R0
   \   0000D4   6005         JZ        ??ZDApp_event_loop_13
   \   0000D6   7404         MOV       A,#0x4
   \   0000D8   68           XRL       A,R0
   \   0000D9   7003         JNZ       ??ZDApp_event_loop_14
    527              {
    528                ZDApp_SaveNetworkStateEvt();
   \                     ??ZDApp_event_loop_13:
   \   0000DB                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000DB   12....       LCALL     `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    529              }
    530          
    531              // Return unprocessed events
    532              return (events ^ ZDO_NWK_UPDATE_NV);
   \                     ??ZDApp_event_loop_14:
   \   0000DE   EE           MOV       A,R6
   \   0000DF   FA           MOV       R2,A
   \   0000E0   EF           MOV       A,R7
   \   0000E1   6401         XRL       A,#0x1
   \                     ??ZDApp_event_loop_4:
   \   0000E3   FB           MOV       R3,A
   \   0000E4   8025         SJMP      ??ZDApp_event_loop_11
    533            }
    534          
    535            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_12:
   \   0000E6   EA           MOV       A,R2
   \   0000E7   5404         ANL       A,#0x4
   \   0000E9   6017         JZ        ??ZDApp_event_loop_15
    536            {
    537          #ifdef ZBA_FALLBACK_NWKKEY
    538              if ( devState == DEV_END_DEVICE_UNAUTH )
   \   0000EB   90....       MOV       DPTR,#devState
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   6405         XRL       A,#0x5
   \   0000F1   7005         JNZ       ??ZDApp_event_loop_16
    539              {
    540                ZDSecMgrFallbackNwkKey();
   \   0000F3                ; Setup parameters for call to function ZDSecMgrFallbackNwkKey
   \   0000F3   12....       LCALL     `??ZDSecMgrFallbackNwkKey::?relay`; Banked call to: ZDSecMgrFallbackNwkKey
   \   0000F6   800A         SJMP      ??ZDApp_event_loop_15
    541              }
    542              else
    543          #endif
    544              {
    545                // Set the NV startup option to force a "new" join.
    546                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \                     ??ZDApp_event_loop_16:
   \   0000F8                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000F8   7A02         MOV       R2,#0x2
   \   0000FA   79FF         MOV       R1,#-0x1
   \   0000FC   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    547          
    548                // The device has been in the UNAUTH state, so reset
    549                // Note: there will be no return from this call
    550                SystemResetSoft();
   \   0000FF                ; Setup parameters for call to function Onboard_soft_reset
   \   0000FF   12....       LCALL     Onboard_soft_reset & 0xFFFF
    551              }
    552            }
    553          
    554          #if defined ( ZDP_BIND_VALIDATION )
    555            if ( events & ZDO_PENDING_BIND_REQ_EVT )
    556            {
    557          #if defined ( REFLECTOR )
    558              ZDApp_AgeOutPendingBindEntry();
    559          #endif
    560              // Return unprocessed events
    561              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
    562            }
    563          #endif
    564          
    565            if ( ZG_SECURE_ENABLED )
    566            {
    567              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   000102                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   000102   EE           MOV       A,R6
   \   000103   FA           MOV       R2,A
   \   000104   EF           MOV       A,R7
   \   000105   FB           MOV       R3,A
   \   000106   A9..         MOV       R1,?V2
   \   000108   12....       LCALL     `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    568            }
   \                     ??ZDApp_event_loop_11:
   \   00010B                REQUIRE ?Subroutine1
   \   00010B                ; // Fall through to label ?Subroutine1
    569            else
    570            {
    571              // Discard or make more handlers
    572              return 0;
    573            }
    574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET
    575          
    576          /*********************************************************************
    577           * @fn      ZDApp_ProcessSecEvent()
    578           *
    579           * @brief   Process incoming security events.
    580           *
    581           * @param   task_id - Task ID
    582           * @param   events  - Bitmap of events
    583           *
    584           * @return  none
    585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    586          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    587          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    588            (void)task_id;  // Intentionally unreferenced parameter
    589          
    590            if ( ZSTACK_ROUTER_BUILD )
    591            {
    592              if ( events & ZDO_NEW_DEVICE )
    593              {
    594                // process the new device event
    595                if ( ZDApp_NewDeviceList )
    596                {
    597                  ZDAppNewDevice_t *pNewDevice;
    598                  uint16 timeDelta;
    599          
    600                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
    601          
    602                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
    603                  osal_mem_free( ZDApp_NewDeviceList );
    604                  ZDApp_NewDeviceList = pNewDevice;
    605          
    606                  if ( pNewDevice )
    607                  {
    608                    timeDelta = pNewDevice->timeDelta;
    609                    pNewDevice = pNewDevice->next;
    610          
    611                    while ( pNewDevice )
    612                    {
    613                      pNewDevice->timeDelta -= timeDelta;
    614                      pNewDevice = pNewDevice->next;
    615                    }
    616          
    617                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
    618                  }
    619                }
    620          
    621                // Return unprocessed events
    622                return (events ^ ZDO_NEW_DEVICE);
    623              }
    624            }
    625          
    626            if ( events & ZDO_DEVICE_AUTH )
   \   000009   EA           MOV       A,R2
   \   00000A   5480         ANL       A,#0x80
   \   00000C   6019         JZ        ??ZDApp_ProcessSecEvent_0
    627            {
    628              ZDApp_StoreNwkSecMaterial();
   \   00000E                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   00000E   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
    629              
    630              ZDApp_DeviceAuthEvt();
   \   000011                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   000011   12....       LCALL     `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    631          
    632              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    633              
    634              bdb_reportCommissioningState(BDB_COMMISSIONING_STATE_JOINING, TRUE);
   \   000019                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000019   7A01         MOV       R2,#0x1
   \   00001B   7903         MOV       R1,#0x3
   \   00001D   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    635          
    636              // Return unprocessed events
    637              return (events ^ ZDO_DEVICE_AUTH);
   \   000020   EE           MOV       A,R6
   \   000021   6480         XRL       A,#0x80
   \   000023   FA           MOV       R2,A
   \   000024   EF           MOV       A,R7
   \   000025   802B         SJMP      ??ZDApp_ProcessSecEvent_1
    638            }
    639          
    640            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000027   EB           MOV       A,R3
   \   000028   5402         ANL       A,#0x2
   \   00002A   600A         JZ        ??ZDApp_ProcessSecEvent_2
    641            {
    642              ZDApp_SaveNwkKey();
   \   00002C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00002C   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    643          
    644              // Return unprocessed events
    645              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   00002F   EE           MOV       A,R6
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   6402         XRL       A,#0x2
   \   000034   801C         SJMP      ??ZDApp_ProcessSecEvent_1
    646            }
    647          
    648            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000036   EB           MOV       A,R3
   \   000037   5408         ANL       A,#0x8
   \   000039   600A         JZ        ??ZDApp_ProcessSecEvent_3
    649            {
    650          #if defined (NV_RESTORE)
    651              ZDSecMgrSaveApsLinkKey();
   \   00003B                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   00003B   12....       LCALL     `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    652          #endif // (NV_RESTORE)
    653          
    654              // Return unprocessed events
    655              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   6408         XRL       A,#0x8
   \   000043   800D         SJMP      ??ZDApp_ProcessSecEvent_1
    656            }
    657          
    658            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000045   EB           MOV       A,R3
   \   000046   5404         ANL       A,#0x4
   \   000048   600B         JZ        ??ZDApp_ProcessSecEvent_4
    659            {
    660              ZDSecMgrSaveTCLinkKey();
   \   00004A                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   00004A   12....       LCALL     `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    661          
    662              // Return unprocessed events
    663              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   00004D   EE           MOV       A,R6
   \   00004E   FA           MOV       R2,A
   \   00004F   EF           MOV       A,R7
   \   000050   6404         XRL       A,#0x4
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000052   FB           MOV       R3,A
   \   000053   8004         SJMP      ??ZDApp_ProcessSecEvent_5
    664            }
    665          
    666            // Discard or make more handlers
    667            return 0;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   000055   7A00         MOV       R2,#0x0
   \   000057   7B00         MOV       R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_5:
   \   000059   02....       LJMP      ??Subroutine49_0 & 0xFFFF
    668          }
    669          
    670          /*********************************************************************
    671           * Application Functions
    672           */
    673          
    674          /*********************************************************************
    675           * @fn      ZDOInitDevice
    676           *
    677           * @brief   Start the device in the network.  This function will read
    678           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    679           *   restore the network state of the device.
    680           *
    681           * @param   startDelay - timeDelay to start device (in milliseconds).
    682           *                       There is a jitter added to this delay:
    683           *                       ((NWK_START_DELAY + startDelay)
    684           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    685           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    686           *                       this function will hold the network init. Application
    687           *                       can start the device.
    688           * #@param  mode       - ZDO_INITDEV_CENTRALIZED or ZDO_INITDEV_DISTRIBUTED to specify
    689           *                       which mode should the device start with (only has effect on 
    690           *                       Router devices)
    691           *
    692           * NOTE:    If the application would like to force a "new" join, the
    693           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    694           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    695           *          this function. "new" join means to not restore the network
    696           *          state of the device. Use zgWriteStartupOptions() to set these
    697           *          options.
    698           *
    699           * @return
    700           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    701           *          restored.
    702           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    703           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    704           *          it could mean that there was no network state to restore.
    705           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    706          uint8 ZDOInitDeviceEx( uint16 startDelay, uint8 mode)
   \                     ZDOInitDeviceEx:
    707          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   89..         MOV       ?V1,R1
    708            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   75..01       MOV       ?V0,#0x1
    709            uint16 extendedDelay = 0;
   \   000013   7E00         MOV       R6,#0x0
   \   000015   7F00         MOV       R7,#0x0
    710            
    711            if ( devState == DEV_HOLD )
   \   000017   90....       MOV       DPTR,#devState
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   7008         JNZ       ??ZDOInitDeviceEx_0
    712            {
    713              byte temp = FALSE;
   \   000023   E4           CLR       A
   \   000024   F0           MOVX      @DPTR,A
    714              // Initialize the RAM items table, in case an NV item has been updated.
    715              zgInitItems( FALSE );
   \   000025                ; Setup parameters for call to function zgInitItems
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    716              
    717              //Turn off the radio
    718              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   000029                ; Setup parameters for call to function ZMacSetReq
   \   000029   8003         SJMP      ??ZDOInitDeviceEx_1
    719            }
    720            else
    721            {
    722              byte temp = TRUE;
   \                     ??ZDOInitDeviceEx_0:
   \   00002B   7401         MOV       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
    723              //Turn on the radio
    724              ZMacSetReq(ZMacRxOnIdle, &temp);
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \                     ??ZDOInitDeviceEx_1:
   \   00002E   AA..         MOV       R2,?XSP + 0
   \   000030   AB..         MOV       R3,?XSP + 1
   \   000032   7952         MOV       R1,#0x52
   \   000034   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    725            }
    726          
    727            ZDConfig_InitDescriptors();
   \   000037                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000037   12....       LCALL     `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    728            //devtag.071807.todo - fix this temporary solution
    729            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   00003A   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   90....       MOV       DPTR,#_NIB + 14
   \   000041   F0           MOVX      @DPTR,A
    730          
    731          #if defined ( NV_RESTORE )
    732            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    733            // while booting to skip past NV Restore.
    734            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   000042   90....       MOV       DPTR,#zdappHoldKeys
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6404         XRL       A,#0x4
   \   000048   707D         JNZ       ??ZDOInitDeviceEx_2
    735            {
    736              zdappHoldKeys = 0;   // Only once
   \   00004A   E4           CLR       A
   \   00004B   F0           MOVX      @DPTR,A
    737              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    738            }
    739            else
    740            {
    741          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    742              if ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
    743              {
    744                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    745              }
    746              else
    747              {
    748                // Determine if NV should be restored
    749                networkStateNV = ZDApp_ReadNetworkRestoreState();
    750              }
    751          #else
    752              // Determine if NV should be restored
    753              networkStateNV = ZDApp_ReadNetworkRestoreState();
    754          #endif
    755            }
    756          
    757            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    758            {
    759              networkStateNV = ZDApp_RestoreNetworkState();
    760          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED == TRUE)
    761              if ( ( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL ) && ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE ) )
    762              {
    763                networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
    764              }
    765          #endif
    766              runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
    767            }
    768            else
    769            {
    770              // Wipe out the network state in NV
    771              NLME_InitNV();
   \                     ??ZDOInitDeviceEx_3:
   \   00004C                ; Setup parameters for call to function NLME_InitNV
   \   00004C   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    772              NLME_SetDefaultNV();
   \   00004F                ; Setup parameters for call to function NLME_SetDefaultNV
   \   00004F   12....       LCALL     `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    773              // clear NWK key values
    774              ZDSecMgrClearNVKeyValues();
   \   000052                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   000052   12....       LCALL     `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    775            }
    776          #endif
    777          
    778            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDeviceEx_4:
   \   000055   7401         MOV       A,#0x1
   \   000057   65..         XRL       A,?V0
   \   000059   6003         JZ        $+5
   \   00005B   02....       LJMP      ??ZDOInitDeviceEx_5 & 0xFFFF
    779            {
    780              ZDAppDetermineDeviceType();
   \   00005E                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   00005E   12....       LCALL     `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    781          
    782              // Only delay if joining network - not restoring network state
    783              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    784                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000061                ; Setup parameters for call to function osal_rand
   \   000061   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000064   EA           MOV       A,R2
   \   000065   547F         ANL       A,#0x7f
   \   000067   F8           MOV       R0,A
   \   000068   E5..         MOV       A,?V2
   \   00006A   28           ADD       A,R0
   \   00006B   F8           MOV       R0,A
   \   00006C   E4           CLR       A
   \   00006D   35..         ADDC      A,?V3
   \   00006F   F9           MOV       R1,A
   \   000070   E8           MOV       A,R0
   \   000071   2464         ADD       A,#0x64
   \   000073   FE           MOV       R6,A
   \   000074   E4           CLR       A
   \   000075   39           ADDC      A,R1
   \   000076   FF           MOV       R7,A
    785          
    786              runtimeChannel = zgDefaultChannelList;
   \   000077   90....       MOV       DPTR,#zgDefaultChannelList
   \   00007A   12....       LCALL     ?XLOAD_R0123
   \   00007D   90....       MOV       DPTR,#runtimeChannel
   \   000080   12....       LCALL     ?XSTORE_R0123
    787              
    788              // Set the NV startup option to force a "new" join.
    789              zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000083                ; Setup parameters for call to function zgWriteStartupOptions
   \   000083   7A02         MOV       R2,#0x2
   \   000085   79FF         MOV       R1,#-0x1
   \   000087   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    790              
    791          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    792              gp_ProxyTblInit( TRUE );
    793          #endif
    794          
    795              _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   00008A   90....       MOV       DPTR,#_NIB + 20
   \   00008D   74FE         MOV       A,#-0x2
   \   00008F   F0           MOVX      @DPTR,A
   \   000090   A3           INC       DPTR
   \   000091   04           INC       A
   \   000092   F0           MOVX      @DPTR,A
    796              _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000093   90....       MOV       DPTR,#_NIB + 23
   \   000096   14           DEC       A
   \   000097   F0           MOVX      @DPTR,A
   \   000098   A3           INC       DPTR
   \   000099   04           INC       A
   \   00009A   F0           MOVX      @DPTR,A
    797              _NIB.nwkPanId = 0xFFFF;
   \   00009B   90....       MOV       DPTR,#_NIB + 33
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   F0           MOVX      @DPTR,A
    798              osal_memset(_NIB.extendedPANID, 0, Z_EXTADDR_LEN);
   \   0000A1                ; Setup parameters for call to function osal_memset
   \   0000A1   7C08         MOV       R4,#0x8
   \   0000A3   7D00         MOV       R5,#0x0
   \   0000A5   7900         MOV       R1,#0x0
   \   0000A7   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   0000A9   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   0000AB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    799              NLME_SetUpdateID( 0 );
   \   0000AE                ; Setup parameters for call to function NLME_SetUpdateID
   \   0000AE   7900         MOV       R1,#0x0
   \   0000B0   12....       LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
    800              
    801              if(ZG_DEVICE_RTRONLY_TYPE)
   \   0000B3   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   6401         XRL       A,#0x1
   \   0000B9   705A         JNZ       ??ZDOInitDeviceEx_6
    802              {
    803                if(1 == mode)
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   65..         XRL       A,?V1
   \   0000BF   703E         JNZ       ??ZDOInitDeviceEx_7
    804                {
    805                  //Update TC address as distributed network (TC none)
    806                  ZDSecMgrUpdateTCAddress(0);
   \   0000C1                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   0000C1   7A00         MOV       R2,#0x0
   \   0000C3   7B00         MOV       R3,#0x0
   \   0000C5   804B         SJMP      ??ZDOInitDeviceEx_8
    807                }
   \                     ??ZDOInitDeviceEx_2:
   \   0000C7                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000C7   12....       LCALL     `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000CA   E9           MOV       A,R1
   \   0000CB   F5..         MOV       ?V0,A
   \   0000CD   6003         JZ        $+5
   \   0000CF   02....       LJMP      ??ZDOInitDeviceEx_3 & 0xFFFF
   \   0000D2                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000D2   12....       LCALL     `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000D5   E9           MOV       A,R1
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   75..01       MOV       ?V4,#0x1
   \   0000DB   8E..         MOV       ?V5,R6
   \   0000DD   8E..         MOV       ?V6,R6
   \   0000DF   8E..         MOV       ?V7,R6
   \   0000E1   90....       MOV       DPTR,#_NIB + 22
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   78..         MOV       R0,#?V4
   \   0000E7   12....       LCALL     ?L_SHL
   \   0000EA   90....       MOV       DPTR,#runtimeChannel
   \   0000ED   E5..         MOV       A,?V4
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   A3           INC       DPTR
   \   0000F1   E5..         MOV       A,?V5
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   A3           INC       DPTR
   \   0000F5   E5..         MOV       A,?V6
   \   0000F7   F0           MOVX      @DPTR,A
   \   0000F8   A3           INC       DPTR
   \   0000F9   E5..         MOV       A,?V7
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   02....       LJMP      ??ZDOInitDeviceEx_4 & 0xFFFF
    808                else
    809                {
    810                  // Centralized mode
    811                  uint8 tmp[Z_EXTADDR_LEN];
    812                  osal_memset(tmp,0x00,Z_EXTADDR_LEN);
   \                     ??ZDOInitDeviceEx_7:
   \   0000FF                ; Setup parameters for call to function osal_memset
   \   0000FF   7C08         MOV       R4,#0x8
   \   000101   7D00         MOV       R5,#0x0
   \   000103   7900         MOV       R1,#0x0
   \   000105   7401         MOV       A,#0x1
   \   000107   12....       LCALL     ?XSTACK_DISP101_8
   \   00010A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    813                  ZDSecMgrUpdateTCAddress(tmp);
   \   00010D                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??ZDOInitDeviceEx_8:
   \   000112   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
    814                }
    815              }
    816          
    817              // Update NIB in NV
    818              osal_nv_write( ZCD_NV_NIB, 0, sizeof( nwkIB_t ), &_NIB );
   \                     ??ZDOInitDeviceEx_6:
   \   000115                ; Setup parameters for call to function osal_nv_write
   \   000115   75....       MOV       ?V4,#_NIB & 0xff
   \   000118   75....       MOV       ?V5,#(_NIB >> 8) & 0xff
   \   00011B   78..         MOV       R0,#?V4
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000120   75..6E       MOV       ?V4,#0x6e
   \   000123   75..00       MOV       ?V5,#0x0
   \   000126   78..         MOV       R0,#?V4
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012B   7C00         MOV       R4,#0x0
   \   00012D   7D00         MOV       R5,#0x0
   \   00012F   7A21         MOV       R2,#0x21
   \   000131   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
    819          
    820              // Reset the NV startup option to resume from NV by clearing
    821              // the "New" join option.
    822              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000137                ; Setup parameters for call to function zgWriteStartupOptions
   \   000137   7A02         MOV       R2,#0x2
   \   000139   7900         MOV       R1,#0x0
   \   00013B   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    823            
    824            }
    825          
    826            // Initialize the security for type of device
    827            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDeviceEx_5:
   \   00013E                ; Setup parameters for call to function ZDApp_SecInit
   \   00013E   A9..         MOV       R1,?V0
   \   000140   12....       LCALL     `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    828          
    829            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000143   74FF         MOV       A,#-0x1
   \   000145   65..         XRL       A,?V2
   \   000147   7004         JNZ       ??ZDOInitDeviceEx_9
   \   000149   74FF         MOV       A,#-0x1
   \   00014B   65..         XRL       A,?V3
   \                     ??ZDOInitDeviceEx_9:
   \   00014D   6010         JZ        ??ZDOInitDeviceEx_10
    830            {
    831              devState = DEV_INIT;    // Remove the Hold state
   \   00014F   90....       MOV       DPTR,#devState
   \   000152   7401         MOV       A,#0x1
   \   000154   F0           MOVX      @DPTR,A
    832          
    833              // Initialize leave control logic
    834              ZDApp_LeaveCtrlInit();
   \   000155                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   000155   12....       LCALL     `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    835          
    836              // Trigger the network start
    837              ZDApp_NetworkInit( extendedDelay );
   \   000158                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000158   EE           MOV       A,R6
   \   000159   FA           MOV       R2,A
   \   00015A   EF           MOV       A,R7
   \   00015B   FB           MOV       R3,A
   \   00015C   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    838            }
    839          
    840            // set broadcast address mask to support broadcast filtering
    841            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDeviceEx_10:
   \   00015F                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   00015F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000162   E0           MOVX      A,@DPTR
   \   000163   F9           MOV       R1,A
   \   000164   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    842          
    843            return ( networkStateNV );
   \   000167   A9..         MOV       R1,?V0
   \   000169   7409         MOV       A,#0x9
   \   00016B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016E                REQUIRE ?Subroutine2
   \   00016E                ; // Fall through to label ?Subroutine2
    844          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET
    845          
    846          /*********************************************************************
    847           * @fn      ZDApp_ReadNetworkRestoreState
    848           *
    849           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    850           *          or not to restore the network state.
    851           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    852           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    853           *
    854           * @param   none
    855           *
    856           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    857           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    858           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    859           *          ZCD_NV_STARTUP_OPTION
    860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    861          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    862          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    863            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV       R6,#0x0
    864          
    865            // Look for the New Network State option.
    866            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV       A,R1
   \   00000B   F8           MOV       R0,A
   \   00000C   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000E   5007         JNC       ??ZDApp_ReadNetworkRestoreState_0
    867            {
    868              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV       R6,#0x1
    869              bdb_setNodeIsOnANetwork(FALSE);
   \   000012                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000012   7900         MOV       R1,#0x0
   \   000014   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    870            }
    871          
    872            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000017   EE           MOV       A,R6
   \   000018   F9           MOV       R1,A
   \   000019   02....       LJMP      ??Subroutine49_0 & 0xFFFF
    873          }
    874          
    875          /*********************************************************************
    876           * @fn      ZDAppDetermineDeviceType()
    877           *
    878           * @brief   Determines the type of device to start.
    879           *
    880           *          Looks at zgDeviceLogicalType and determines what type of
    881           *          device to start.  The types are:
    882           *            ZG_DEVICETYPE_COORDINATOR
    883           *            ZG_DEVICETYPE_ROUTER
    884           *            ZG_DEVICETYPE_ENDDEVICE
    885           *
    886           * @param   none
    887           *
    888           * @return  none
    889           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    890          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    891          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    892            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX      A,@DPTR
   \   000008   700E         JNZ       ??ZDAppDetermineDeviceType_0
    893            {
    894              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV       DPTR,#devStartMode
   \   00000D   7402         MOV       A,#0x2
   \   00000F   F0           MOVX      @DPTR,A
    895              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX      A,@DPTR
   \   000014   54F8         ANL       A,#0xf8
   \   000016   8036         SJMP      ??ZDAppDetermineDeviceType_1
    896            }
    897            else
    898            {
    899              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   54F8         ANL       A,#0xf8
   \   00001E   F8           MOV       R0,A
   \   00001F   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX      A,@DPTR
   \   000023   6401         XRL       A,#0x1
   \   000025   7004         JNZ       ??ZDAppDetermineDeviceType_2
    900                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV       A,#0x1
   \   000029   8007         SJMP      ??ZDAppDetermineDeviceType_3
    901              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7007         JNZ       ??ZDAppDetermineDeviceType_4
    902                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV       A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL       A,R0
   \   000033   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX      @DPTR,A
    903          
    904              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    905              // The device shall do rejoin the network. Otherwise, do normal join
    906              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV       R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV       R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003E   E9           MOV       A,R1
   \   00003F   90....       MOV       DPTR,#devStartMode
   \   000042   7003         JNZ       ??ZDAppDetermineDeviceType_5
    907              {
    908                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR       A
   \   000045   8007         SJMP      ??ZDAppDetermineDeviceType_1
    909              }
    910              else
    911              {
    912                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV       A,#0x3
   \   000049   F0           MOVX      @DPTR,A
    913                prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00004A   90....       MOV       DPTR,#prevDevState
   \   00004D   04           INC       A
   \                     ??ZDAppDetermineDeviceType_1:
   \   00004E   F0           MOVX      @DPTR,A
    914              }
    915            }
    916          }
   \   00004F   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    917          
    918          /*********************************************************************
    919           * @fn      ZDApp_NetworkStartEvt()
    920           *
    921           * @brief   Process the Network Start Event
    922           *
    923           * @param   none
    924           *
    925           * @return  none
    926           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    927          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    928          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    929            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV       DPTR,#nwkStatus
   \   000007   E0           MOVX      A,@DPTR
   \   000008   7045         JNZ       ??ZDApp_NetworkStartEvt_0
    930            {
    931              // Successfully started a ZigBee network
    932              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV       DPTR,#devState
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   6408         XRL       A,#0x8
   \   000010   7033         JNZ       ??ZDApp_NetworkStartEvt_1
    933              {
    934                //save NIB to NV before child joins if NV_RESTORE is defined
    935                ZDApp_NwkWriteNVRequest();
   \   000012                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000012   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
    936                ZDApp_ChangeState( DEV_ZB_COORD );
   \   000015                ; Setup parameters for call to function ZDApp_ChangeState
   \   000015   7909         MOV       R1,#0x9
   \   000017   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    937                
    938                if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_FORMATION)
   \   00001A   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   6405         XRL       A,#0x5
   \   000020   700A         JNZ       ??ZDApp_NetworkStartEvt_2
    939                {
    940                  bdb_nwkFormationAttempt(TRUE);
   \   000022                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   000022   7901         MOV       R1,#0x1
   \   000024   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    941                  ZDApp_StoreNwkSecMaterial();
   \   000027                ; Setup parameters for call to function ZDApp_StoreNwkSecMaterial
   \   000027   12....       LCALL     `??ZDApp_StoreNwkSecMaterial::?relay`; Banked call to: ZDApp_StoreNwkSecMaterial
   \   00002A   800C         SJMP      ??ZDApp_NetworkStartEvt_3
    942                }
    943                else if(bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION)
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6407         XRL       A,#0x7
   \   00002F   7007         JNZ       ??ZDApp_NetworkStartEvt_3
    944                {
    945                  bdb_reportCommissioningState(BDB_INITIALIZATION,TRUE);
   \   000031                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000031   7A01         MOV       R2,#0x1
   \   000033   7907         MOV       R1,#0x7
   \   000035   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    946                }
    947          
    948                if ( zgChildAgingEnable == TRUE )
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000038   90....       MOV       DPTR,#zgChildAgingEnable
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6401         XRL       A,#0x1
   \   00003E   7008         JNZ       ??CrossCallReturnLabel_120
    949                {
    950                  // Once the device has changed its state to a COORDINATOR set the timer to send
    951                  // Parent annce
    952                  ZDApp_SetParentAnnceTimer();
   \   000040                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   000040   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   000043   8003         SJMP      ??CrossCallReturnLabel_120
    953                }
    954              }
    955              else
    956              {
    957                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000045                ; Setup parameters for call to function osal_set_event
   \   000045   12....       LCALL     ?Subroutine16 & 0xFFFF
    958              }
    959          
    960              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??CrossCallReturnLabel_120:
   \   000048                ; Setup parameters for call to function osal_pwrmgr_device
   \   000048   7900         MOV       R1,#0x0
   \   00004A   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   \   00004D   8030         SJMP      ??ZDApp_NetworkStartEvt_4
    961            }
    962            else
    963            {
    964              // Try again with a higher energy threshold
    965              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00004F                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00004F   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000052   E9           MOV       A,R1
   \   000053   7900         MOV       R1,#0x0
   \   000055   2410         ADD       A,#0x10
   \   000057   5001         JNC       ??ZDApp_NetworkStartEvt_5
   \   000059   09           INC       R1
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00005A   C3           CLR       C
   \   00005B   94FF         SUBB      A,#-0x1
   \   00005D   E9           MOV       A,R1
   \   00005E   9400         SUBB      A,#0x0
   \   000060   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000062   65D0         XRL       A,PSW
   \   000064   33           RLC       A
   \   000065   5013         JNC       ??ZDApp_NetworkStartEvt_6
    966              {
    967                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000067                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000067   12....       LCALL     `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00006A   E9           MOV       A,R1
   \   00006B   F8           MOV       R0,A
   \   00006C                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   00006C   7410         MOV       A,#0x10
   \   00006E   29           ADD       A,R1
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    968                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000073                ; Setup parameters for call to function osal_set_event
   \   000073   7A01         MOV       R2,#0x1
   \   000075   12....       LCALL     ??Subroutine69_0 & 0xFFFF
    969              }
   \                     ??CrossCallReturnLabel_125:
   \   000078   8005         SJMP      ??ZDApp_NetworkStartEvt_4
    970              else
    971              {
    972                bdb_nwkFormationAttempt(FALSE);
   \                     ??ZDApp_NetworkStartEvt_6:
   \   00007A                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   00007A   7900         MOV       R1,#0x0
   \   00007C   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
    973              }
    974            }
    975          }
   \                     ??ZDApp_NetworkStartEvt_4:
   \   00007F   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7A10         MOV       R2,#0x10
   \   000002                REQUIRE ??Subroutine69_0
   \   000002                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine70_0
   \   000002                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000008   22           RET
    976          
    977          /*********************************************************************
    978           * @fn      ZDApp_DeviceAuthEvt()
    979           *
    980           * @brief   Process the Device Authentic Event
    981           *
    982           * @param   none
    983           *
    984           * @return  none
    985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    986          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    987          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    988            // received authentication from trust center
    989            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   702B         JNZ       ??ZDApp_DeviceAuthEvt_0
    990            {
    991              // Stop the reset timer so it doesn't reset
    992              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL     `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    993          
    994              ZDApp_ChangeState( DEV_END_DEVICE );
   \   00000F                ; Setup parameters for call to function ZDApp_ChangeState
   \   00000F   7906         MOV       R1,#0x6
   \   000011   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    995          
    996              // Set the Power Manager Device
    997          #if defined ( POWER_SAVING )
    998              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000014                ; Setup parameters for call to function osal_pwrmgr_device
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    999          #endif
   1000          
   1001              if ( ZSTACK_ROUTER_BUILD )
   1002              {
   1003                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1004                {
   1005                  // NOTE: first two parameters are not used, see NLMEDE.h for details
   1006                  NLME_StartRouterRequest( 0, 0, false );
   1007                }
   1008              }
   1009          
   1010              // Notify to save info into NV
   1011              ZDApp_NVUpdate();
   \   000019                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000019   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1012          
   1013              // Save off the security
   1014              ZDApp_SaveNwkKey();
   \   00001C                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   00001C   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   1015          
   1016              ZDApp_AnnounceNewAddress();
   \   00001F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00001F   12....       LCALL     ?Subroutine34 & 0xFFFF
   1017          
   1018              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1019                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1020                    && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_36:
   \   000022   5008         JNC       ??ZDApp_DeviceAuthEvt_1
   \   000024   90....       MOV       DPTR,#zgChildAgingEnable
   \   000027   E0           MOVX      A,@DPTR
   \   000028   6401         XRL       A,#0x1
   \   00002A   700E         JNZ       ??ZDApp_DeviceAuthEvt_2
   1021              {
   1022                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   00002C                ; Setup parameters for call to function NLME_SetPollRate
   \   00002C   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00002F   12....       LCALL     ?XLOAD_R2345
   \   000032   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000035   8003         SJMP      ??ZDApp_DeviceAuthEvt_2
   1023              }
   1024            }
   1025            else
   1026            {
   1027              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000037                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000037   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1028            }
   1029          }
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003A   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   000003   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000006   E0           MOVX      A,@DPTR
   \   000007   A2E3         MOV       C,0xE0 /* A   */.3
   \   000009   22           RET
   1030          
   1031          /*********************************************************************
   1032           * @fn      ZDApp_SaveNetworkStateEvt()
   1033           *
   1034           * @brief   Process the Save the Network State Event
   1035           *
   1036           * @param   none
   1037           *
   1038           * @return  none
   1039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1040          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
   1041          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1042          #if defined ( NV_RESTORE )
   1043           #if defined ( NV_TURN_OFF_RADIO )
   1044            // Turn off the radio's receiver during an NV update
   1045            uint8 RxOnIdle;
   1046            uint8 x = false;
   1047            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
   1048            ZMacSetReq( ZMacRxOnIdle, &x );
   1049           #endif
   1050          
   1051            // Update the Network State in NV
   1052            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
   1053                           NWK_NV_DEVICELIST_ENABLE |
   1054                           NWK_NV_BINDING_ENABLE    |
   1055                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV       R1,#0xf
   \   000006   12....       LCALL     `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
   1056          
   1057            // Reset the NV startup option to resume from NV by
   1058            // clearing the "New" join option.
   1059            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV       R2,#0x2
   \   00000B   7900         MOV       R1,#0x0
   \   00000D   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   1060          
   1061           #if defined ( NV_TURN_OFF_RADIO )
   1062            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
   1063           #endif
   1064          #endif // NV_RESTORE
   1065          }
   \   000010   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   1066          
   1067          #if defined ( NV_RESTORE )
   1068          /*********************************************************************
   1069           * @fn      ZDApp_RestoreNetworkState()
   1070           *
   1071           * @brief   This function will restore the network state of the
   1072           *          device if the network state is stored in NV.
   1073           *
   1074           * @param   none
   1075           *
   1076           * @return
   1077           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
   1078           *          restored.
   1079           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
   1080           *          This could mean that zgStartupOption said to not restore, or
   1081           *          it could mean that there was no network state to restore.
   1082           *
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
   1085          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1086            uint8 nvStat;
   1087          
   1088            // Initialize NWK NV items
   1089            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL     `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV       A,R1
   \   000009   FE           MOV       R6,A
   1090          
   1091            if ( nvStat == SUCCESS )
   \   00000A   7033         JNZ       ??ZDApp_RestoreNetworkState_0
   1092            {
   1093              if ( NLME_RestoreFromNV() )
   \   00000C                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000C   12....       LCALL     `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   00000F   E9           MOV       A,R1
   \   000010   6024         JZ        ??ZDApp_RestoreNetworkState_1
   1094              {
   1095                // Are we a coordinator
   1096                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000012                ; Setup parameters for call to function NLME_GetShortAddr
   \   000012   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000015   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000018   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   1097                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_131:
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   49           ORL       A,R1
   \   00001E   7007         JNZ       ??ZDApp_RestoreNetworkState_2
   1098                {
   1099                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000020   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000023   E0           MOVX      A,@DPTR
   \   000024   54F8         ANL       A,#0xf8
   \   000026   F0           MOVX      @DPTR,A
   1100                }
   1101                if(ZG_DEVICE_ENDDEVICE_TYPE) 
   1102                {
   1103                  devStartMode = MODE_REJOIN;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   000027   90....       MOV       DPTR,#devStartMode
   \   00002A   7403         MOV       A,#0x3
   \   00002C   F0           MOVX      @DPTR,A
   1104                  _NIB.nwkState = NWK_INIT;
   \   00002D   90....       MOV       DPTR,#_NIB + 35
   \   000030   E4           CLR       A
   \   000031   12....       LCALL     ?Subroutine10 & 0xFFFF
   1105                }
   1106                else
   1107                {
   1108                  devStartMode = MODE_RESUME;
   1109                }
   1110                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   1111              }
   \                     ??CrossCallReturnLabel_2:
   \   000034   8002         SJMP      ??ZDApp_RestoreNetworkState_3
   1112              else
   1113                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   000036   7E09         MOV       R6,#0x9
   1114          
   1115              if ( ZG_SECURE_ENABLED )
   1116              {
   1117                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   000038   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   1118          
   1119                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1120                {
   1121                  ZDApp_RestoreNwkKey( TRUE );
   1122                }
   1123              }
   1124          
   1125              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1126              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1127              // other than default.
   1128            }
   1129          
   1130            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00003F   EE           MOV       A,R6
   \   000040   7004         JNZ       ??ZDApp_RestoreNetworkState_4
   1131              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??ZDApp_RestoreNetworkState_5
   1132            else
   1133              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_4:
   \   000046   7901         MOV       R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_5:
   \   000048   80..         SJMP      ??Subroutine49_0
   1134          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1135          #endif // NV_RESTORE
   1136          
   1137          /*********************************************************************
   1138           * @fn      ZDApp_InitUserDesc()
   1139           *
   1140           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1141           *          when needed.  If you want to initialize the User descriptor to
   1142           *          something other than all zero, do it here.
   1143           *
   1144           * @param   none
   1145           *
   1146           * @return  none
   1147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1148          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1150            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1151          
   1152            // Initialize the User Descriptor, the descriptor is read from NV
   1153            // when needed.  If you want to initialize the User descriptor to something
   1154            // other than all zero, do it here.
   1155            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV       R4,#0x11
   \   00000C   12....       LCALL     ?Subroutine29 & 0xFFFF
   1156            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1157                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \                     ??CrossCallReturnLabel_30:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   7C11         MOV       R4,#0x11
   \   000014   7D00         MOV       R5,#0x0
   \   000016   7A81         MOV       R2,#-0x7f
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001D   7402         MOV       A,#0x2
   \   00001F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000022   E9           MOV       A,R1
   \   000023   702F         JNZ       ??ZDApp_InitUserDesc_0
   1158            {
   1159              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1160                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..11       MOV       ?V0,#0x11
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A81         MOV       R2,#-0x7f
   \   00003B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000041   E9           MOV       A,R1
   \   000042   7010         JNZ       ??ZDApp_InitUserDesc_0
   1161              {
   1162                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6007         JZ        ??ZDApp_InitUserDesc_0
   1163                {
   1164                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00004D   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000050   E0           MOVX      A,@DPTR
   \   000051   D2E4         SETB      0xE0 /* A   */.4
   \   000053   F0           MOVX      @DPTR,A
   1165                }
   1166              }
   1167            }
   1168          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000054   7411         MOV       A,#0x11
   \   000056   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine57_0
   \   000002                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7D00         MOV       R5,#0x0
   \   000002   7900         MOV       R1,#0x0
   \   000004   AA..         MOV       R2,?XSP + 0
   \   000006   AB..         MOV       R3,?XSP + 1
   \   000008   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   00000B                ; Setup parameters for call to function osal_nv_item_init
   \   00000B                ; Setup parameters for call to function osal_nv_write
   \   00000B                ; Setup parameters for call to function osal_memcmp
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1169          
   1170          /*********************************************************************
   1171           * @fn      ZDAppCheckForHoldKey()
   1172           *
   1173           * @brief   Check for key to set the device into Hold Auto Start
   1174           *
   1175           * @param   none
   1176           *
   1177           * @return  none
   1178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1179          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1180          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1181          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1182          
   1183            // Get Keypad directly to see if a HOLD is needed
   1184            zdappHoldKeys = HalKeyRead();
   1185          
   1186            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1187            // while booting to avoid starting up the device.
   1188            if ( zdappHoldKeys == SW_BYPASS_START )
   1189            {
   1190              // Change the device state to HOLD on start up
   1191              devState = DEV_HOLD;
   1192            }
   1193          #endif // HAL_KEY
   1194          }
   \   000000   02....       LJMP      ?BRET
   1195          
   1196          /*********************************************************************
   1197           * @fn      ZDApp_ProcessOSALMsg()
   1198           *
   1199           * @brief   Process the incoming task message.
   1200           *
   1201           * @param   msgPtr - message to process
   1202           *
   1203           * @return  none
   1204           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1205          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1206          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1207            // Data Confirmation message fields
   1208            uint8 sentEP;       // This should always be 0
   1209            uint8 sentStatus;
   1210            afDataConfirm_t *afDataConfirm;
   1211          
   1212          
   1213            switch ( msgPtr->event )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   14           DEC       A
   \   00000B   601B         JZ        ??ZDApp_ProcessOSALMsg_0
   \   00000D   14           DEC       A
   \   00000E   6050         JZ        ??ZDApp_ProcessOSALMsg_1
   \   000010   24E8         ADD       A,#-0x18
   \   000012   600A         JZ        ??ZDApp_ProcessOSALMsg_2
   \   000014   2447         ADD       A,#0x47
   \   000016   600B         JZ        ??ZDApp_ProcessOSALMsg_3
   \   000018   24D6         ADD       A,#-0x2a
   \   00001A   606D         JZ        ??ZDApp_ProcessOSALMsg_4
   \   00001C   8068         SJMP      ??ZDApp_ProcessOSALMsg_5
   1214            {
   1215              // Incoming ZDO Message
   1216              case AF_INCOMING_MSG_CMD:
   1217                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   00001E                ; Setup parameters for call to function ZDP_IncomingData
   \   00001E   12....       LCALL     `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1218                break;
   \   000021   8066         SJMP      ??ZDApp_ProcessOSALMsg_4
   1219          
   1220              case ZDO_CB_MSG:
   1221                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   000023                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000023   12....       LCALL     `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1222                break;
   \   000026   8061         SJMP      ??ZDApp_ProcessOSALMsg_4
   1223          
   1224              case AF_DATA_CONFIRM_CMD:
   1225                // This message is received as a confirmation of a data packet sent.
   1226                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1227                // The message fields are defined in AF.h
   1228                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1229                sentEP = afDataConfirm->endpoint;
   1230                sentStatus = afDataConfirm->hdr.status;
   1231          
   1232                // Action taken when confirmation is received.
   1233          #if defined ( ZIGBEE_FREQ_AGILITY )
   1234                if ( pZDNwkMgr_ProcessDataConfirm )
   1235                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   1236          #endif
   1237                (void)sentEP;
   1238                (void)sentStatus;
   1239                break;
   1240          
   1241              case ZDO_NWK_DISC_CNF:
   1242                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   000028   90....       MOV       DPTR,#devState
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   6402         XRL       A,#0x2
   \   00002E   7059         JNZ       ??ZDApp_ProcessOSALMsg_4
   1243                {
   1244                  break;
   1245                }
   1246                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000030   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6401         XRL       A,#0x1
   \   000036   6005         JZ        ??ZDApp_ProcessOSALMsg_6
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6402         XRL       A,#0x2
   \   00003B   704C         JNZ       ??ZDApp_ProcessOSALMsg_4
   1247                {
   1248                  //Rejoin or resume
   1249                  if(bdb_isDeviceNonFactoryNew()) 
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   00003D                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   00003D   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000040   E9           MOV       A,R1
   \   000041   600B         JZ        ??ZDApp_ProcessOSALMsg_7
   1250                  {
   1251                    if(bdb_rejoinNwk() == ZSuccess)
   \   000043                ; Setup parameters for call to function bdb_rejoinNwk
   \   000043   12....       LCALL     `??bdb_rejoinNwk::?relay`; Banked call to: bdb_rejoinNwk
   \   000046   E9           MOV       A,R1
   \   000047   6040         JZ        ??ZDApp_ProcessOSALMsg_4
   1252                    {
   1253                      return;
   1254                    }
   1255          #if (ZG_BUILD_ENDDEVICE_TYPE)
   1256                    else
   1257                    {
   1258                      if(ZG_DEVICE_ENDDEVICE_TYPE)
   1259                      {
   1260                        bdb_parentLost();
   \   000049                ; Setup parameters for call to function bdb_parentLost
   \   000049   12....       LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   1261                        return;
   \   00004C   803B         SJMP      ??ZDApp_ProcessOSALMsg_4
   1262                      }
   1263                    }
   1264          #endif
   1265                  }
   1266                  
   1267                  if(nwk_getNwkDescList())
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   00004E                ; Setup parameters for call to function nwk_getNwkDescList
   \   00004E   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000051   EA           MOV       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   6004         JZ        ??ZDApp_ProcessOSALMsg_8
   1268                  {
   1269                    bdb_nwkDiscoveryAttempt(TRUE);
   \   000055                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000055   7901         MOV       R1,#0x1
   \   000057   8002         SJMP      ??ZDApp_ProcessOSALMsg_9
   1270                  }
   1271                  else
   1272                  {
   1273                    bdb_nwkDiscoveryAttempt(FALSE);
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000059                ; Setup parameters for call to function bdb_nwkDiscoveryAttempt
   \   000059   7900         MOV       R1,#0x0
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   00005B   12....       LCALL     `??bdb_nwkDiscoveryAttempt::?relay`; Banked call to: bdb_nwkDiscoveryAttempt
   \   00005E   8029         SJMP      ??ZDApp_ProcessOSALMsg_4
   1274                  }
   1275                }
   1276              break;
   1277          
   1278              case ZDO_NWK_JOIN_IND:
   1279                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000060   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000063   E0           MOVX      A,@DPTR
   \   000064   6401         XRL       A,#0x1
   \   000066   6005         JZ        ??ZDApp_ProcessOSALMsg_10
   \   000068   E0           MOVX      A,@DPTR
   \   000069   6402         XRL       A,#0x2
   \   00006B   701C         JNZ       ??ZDApp_ProcessOSALMsg_4
   1280                {
   1281                  if((bdbCommissioningProcedureState.bdbCommissioningState == BDB_INITIALIZATION) || (bdbCommissioningProcedureState.bdbCommissioningState == BDB_PARENT_LOST))
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   00006D   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000070   E0           MOVX      A,@DPTR
   \   000071   6407         XRL       A,#0x7
   \   000073   6005         JZ        ??ZDApp_ProcessOSALMsg_11
   \   000075   E0           MOVX      A,@DPTR
   \   000076   6408         XRL       A,#0x8
   \   000078   7007         JNZ       ??ZDApp_ProcessOSALMsg_12
   1282                  {
   1283                    bdb_reportCommissioningState(bdbCommissioningProcedureState.bdbCommissioningState,TRUE);
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   00007A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00007A   7A01         MOV       R2,#0x1
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   F9           MOV       R1,A
   \   00007E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1284                  }
   1285                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   000081                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   000081   12....       LCALL     `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000084   8003         SJMP      ??ZDApp_ProcessOSALMsg_4
   1286                }
   1287                break;
   1288          
   1289              default:
   1290                if ( ZG_SECURE_ENABLED )
   1291                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000086                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000086   12....       LCALL     `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1292                break;
   1293            }
   1294          
   1295          }
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000089   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   1296          
   1297          /*********************************************************************
   1298           * @fn      ZDApp_ProcessMsgCBs()
   1299           *
   1300           * @brief   Process response messages
   1301           *
   1302           * @param   none
   1303           *
   1304           * @return  none
   1305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1306          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine35 & 0xFFFF
   1308            switch ( inMsg->clusterID )
   \                     ??CrossCallReturnLabel_38:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V1,A
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000019   0200         DW        2
   \   00001B   2100         DW        33
   \   00001D   2200         DW        34
   \   00001F   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000021   0080         DW        32768
   \   000023   0180         DW        32769
   \   000025   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000027   0000         DW        0
   \   000029   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1309            {
   1310          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1311              case NWK_addr_rsp:
   1312              case IEEE_addr_rsp:
   1313                {
   1314                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1315          
   1316                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   00002B                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002B   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   00002E   8A..         MOV       ?V0,R2
   \   000030   8B..         MOV       ?V1,R3
   \   000032   AF..         MOV       R7,?V1
   1317                  if ( pAddrRsp )
   \   000034   EA           MOV       A,R2
   \   000035   4F           ORL       A,R7
   \   000036   6030         JZ        ??ZDApp_ProcessMsgCBs_2
   1318                  {
   1319                    if ( pAddrRsp->status == ZSuccess )
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   700E         JNZ       ??ZDApp_ProcessMsgCBs_3
   1320                    {
   1321                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00003F                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00003F   EA           MOV       A,R2
   \   000040   2403         ADD       A,#0x3
   \   000042   FC           MOV       R4,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FD           MOV       R5,A
   \   000046   A3           INC       DPTR
   \   000047   12....       LCALL     ?Subroutine21 & 0xFFFF
   1322                    }
   \                     ??CrossCallReturnLabel_20:
   \   00004A   12....       LCALL     `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1323          
   1324          #if defined ( ZDP_BIND_VALIDATION )
   1325                    // look for pending bind entry for NWK_addr_rsp Only
   1326                    if ( inMsg->clusterID == NWK_addr_rsp )
   1327                    {
   1328          #if defined ( REFLECTOR )
   1329                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   1330          #endif
   1331                    }
   1332          #endif
   1333          
   1334                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00004D                ; Setup parameters for call to function osal_mem_free
   \   00004D   AA..         MOV       R2,?V0
   \   00004F   EF           MOV       A,R7
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000054   8012         SJMP      ??ZDApp_ProcessMsgCBs_2
   1335                  }
   1336                }
   1337                break;
   1338          #endif
   1339          
   1340          #if defined ( REFLECTOR )
   1341              case Bind_req:
   1342              case Unbind_req:
   1343                {
   1344                  ZDO_BindUnbindReq_t bindReq;
   1345                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000056                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000056   AC..         MOV       R4,?XSP + 0
   \   000058   AD..         MOV       R5,?XSP + 1
   \   00005A   12....       LCALL     `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1346                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00005D                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00005D   AC..         MOV       R4,?XSP + 0
   \   00005F   AD..         MOV       R5,?XSP + 1
   \   000061   EE           MOV       A,R6
   \   000062   FA           MOV       R2,A
   \   000063   EF           MOV       A,R7
   \   000064   FB           MOV       R3,A
   \   000065   12....       LCALL     `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1347                }
   1348                break;
   1349          #endif
   1350          
   1351          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1352              case Bind_rsp:
   1353              case Unbind_rsp:
   1354                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1355                {
   1356                  ZDMatchSendState(
   1357                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1358                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1359                }
   1360                break;
   1361          
   1362              case End_Device_Bind_req:
   1363          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1364                if (ZG_DEVICE_COORDINATOR_TYPE)
   1365                {
   1366                  ZDEndDeviceBind_t bindReq;
   1367                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1368                  ZDO_MatchEndDeviceBind( &bindReq );
   1369          
   1370                  // Freeing the cluster lists - if allocated.
   1371                  if ( bindReq.numInClusters )
   1372                    osal_mem_free( bindReq.inClusters );
   1373                  if ( bindReq.numOutClusters )
   1374                    osal_mem_free( bindReq.outClusters );
   1375                }
   1376          #endif
   1377                break;
   1378          #endif
   1379            }
   1380          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   000068                REQUIRE ?Subroutine7
   \   000068                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7415         MOV       A,#0x15
   \   000002   02....       LJMP      ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EA           MOV       A,R2
   \   000005   240C         ADD       A,#0xc
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET
   1381          
   1382          /*********************************************************************
   1383           * @fn      ZDApp_RegisterCBs()
   1384           *
   1385           * @brief   Process response messages
   1386           *
   1387           * @param   none
   1388           *
   1389           * @return  none
   1390           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1391          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1392          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1393          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1394            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV       R2,#0x1
   \   000006   12....       LCALL     ?Subroutine24 & 0xFFFF
   1395          #endif
   1396          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1397            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_61:
   \   000009                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   12....       LCALL     ?Subroutine24 & 0xFFFF
   1398          #endif
   1399          #if ZG_BUILD_COORDINATOR_TYPE
   1400            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1401            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1402          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   1403            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1404          #endif
   1405          #endif
   1406          #if defined ( REFLECTOR )
   1407            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \                     ??CrossCallReturnLabel_62:
   \   00000E                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000E   7A21         MOV       R2,#0x21
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1408            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \                     ??CrossCallReturnLabel_63:
   \   000015                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000015   7A22         MOV       R2,#0x22
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   1409          #endif
   1410          }
   \                     ??CrossCallReturnLabel_64:
   \   00001C   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7B80         MOV       R3,#-0x80
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000008   22           RET
   1411          
   1412          /*********************************************************************
   1413           * @fn      ZDApp_ProcessSecMsg()
   1414           *
   1415           * @brief   Process the incoming security message.
   1416           *
   1417           * @param   msgPtr - message to process
   1418           *
   1419           * @return  none
   1420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1421          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1422          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1423            switch ( msgPtr->event )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   24FC         ADD       A,#-0x4
   \   00000B   6006         JZ        ??ZDApp_ProcessSecMsg_0
   \   00000D   24FC         ADD       A,#-0x4
   \   00000F   6014         JZ        ??ZDApp_ProcessSecMsg_1
   \   000011   8022         SJMP      ??ZDApp_ProcessSecMsg_2
   1424            {
   1425              case ZDO_TRANSPORT_KEY_IND:
   1426                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000013   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX      A,@DPTR
   \   000017   6401         XRL       A,#0x1
   \   000019   6005         JZ        ??ZDApp_ProcessSecMsg_3
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6402         XRL       A,#0x2
   \   00001E   7015         JNZ       ??ZDApp_ProcessSecMsg_2
   1427                {
   1428                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000020                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000020   12....       LCALL     `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000023   8010         SJMP      ??ZDApp_ProcessSecMsg_2
   1429                }
   1430                break;
   1431          
   1432              case ZDO_UPDATE_DEVICE_IND:
   1433                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1434                {
   1435                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1436                  
   1437                  // Look at GP proxy table for posible conflict with GPD alias NwkAddr
   1438          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   1439                  ZDO_DeviceAnnce_t devAnnce;
   1440                  uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF};
   1441                  
   1442                  osal_memcpy( devAnnce.extAddr, ((ZDO_UpdateDeviceInd_t*)msgPtr)->devExtAddr, Z_EXTADDR_LEN );
   1443                  devAnnce.nwkAddr = ((ZDO_UpdateDeviceInd_t*)msgPtr)->devAddr;
   1444                  
   1445                  // Check GP proxy table to update the entry if necesary
   1446                  if( osal_memcmp( devAnnce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
   1447                  {
   1448                    if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
   1449                    {
   1450                      if ( osal_memcmp( &devAnnce, &GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
   1451                      {
   1452                        osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   1453                      }
   1454                    }
   1455                  }
   1456                  else
   1457                  {
   1458                    if(GP_CheckAnnouncedDeviceGCB != NULL)
   1459                    {
   1460                      GP_CheckAnnouncedDeviceGCB( devAnnce.extAddr, devAnnce.nwkAddr );
   1461                    }          
   1462                  }
   1463          #endif
   1464                }
   1465                break;
   1466          
   1467              case ZDO_REMOVE_DEVICE_IND:
   1468                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1469                {
   1470                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1471                }
   1472                break;
   1473          
   1474              case ZDO_REQUEST_KEY_IND:
   1475                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1476                {
   1477                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1478                  {
   1479                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1480                  }
   1481                }
   1482                break;
   1483              case ZDO_VERIFY_KEY_IND:
   1484          #if (ZG_BUILD_COORDINATOR_TYPE)
   1485                if(ZG_DEVICE_COORDINATOR_TYPE)
   1486                {
   1487                  if( ((ZDO_VerifyKeyInd_t*)msgPtr)->verifyKeyStatus == ZSuccess)
   1488                  {
   1489                    bdb_TCjoiningDeviceComplete( ((ZDO_VerifyKeyInd_t*)msgPtr)->extAddr );
   1490                  }
   1491                }
   1492            
   1493                ZDSecMgrVerifyKeyInd( (ZDO_VerifyKeyInd_t*)msgPtr );
   1494          #endif
   1495                break;
   1496          
   1497              case ZDO_SWITCH_KEY_IND:
   1498                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000025   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6401         XRL       A,#0x1
   \   00002B   6005         JZ        ??ZDApp_ProcessSecMsg_4
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6402         XRL       A,#0x2
   \   000030   7003         JNZ       ??ZDApp_ProcessSecMsg_2
   1499                {
   1500                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000032                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000032   12....       LCALL     `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1501                }
   1502                break;
   1503          
   1504              default:
   1505                // Unsupported messages
   1506                break;
   1507            }
   1508          }
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000035   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   1509          
   1510          /*********************************************************************
   1511           * @fn      ZDApp_ProcessNetworkJoin()
   1512           *
   1513           * @brief
   1514           *
   1515           *   Save off the Network key information.
   1516           *
   1517           * @param   none
   1518           *
   1519           * @return  none
   1520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1521          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1522          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1523            if ( (devState == DEV_NWK_JOINING) ||
   1524                ((devState == DEV_NWK_ORPHAN)  &&
   1525                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   000005   90....       MOV       DPTR,#devState
   \   000008   E0           MOVX      A,@DPTR
   \   000009   6403         XRL       A,#0x3
   \   00000B   600F         JZ        ??ZDApp_ProcessNetworkJoin_0
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   640A         XRL       A,#0xa
   \   000010   7058         JNZ       ??ZDApp_ProcessNetworkJoin_1
   \   000012   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   6401         XRL       A,#0x1
   \   00001A   7065         JNZ       ??ZDApp_ProcessNetworkJoin_2
   1526            {
   1527              // Result of a Join attempt by this device.
   1528              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   00001C   90....       MOV       DPTR,#nwkStatus
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   7040         JNZ       ??ZDApp_ProcessNetworkJoin_3
   1529              {
   1530                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000022                ; Setup parameters for call to function osal_set_event
   \   000022   12....       LCALL     ?Subroutine16 & 0xFFFF
   1531          
   1532          #if defined ( POWER_SAVING )
   1533                osal_pwrmgr_device( PWRMGR_BATTERY );
   \                     ??CrossCallReturnLabel_121:
   \   000025                ; Setup parameters for call to function osal_pwrmgr_device
   \   000025   7901         MOV       R1,#0x1
   \   000027   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1534          #endif
   1535          
   1536                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00002A                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00002A   7901         MOV       R1,#0x1
   \   00002C   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   00002F   E9           MOV       A,R1
   \   000030   7009         JNZ       ??ZDApp_ProcessNetworkJoin_4
   1537                {
   1538                  // wait for auth from trust center
   1539                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   000032                ; Setup parameters for call to function ZDApp_ChangeState
   \   000032   7905         MOV       R1,#0x5
   \   000034   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1540                  
   1541                  bdb_nwkAssocAttemt(TRUE);
   \   000037                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000037   7901         MOV       R1,#0x1
   \   000039   8029         SJMP      ??ZDApp_ProcessNetworkJoin_5
   1542                }
   1543                else
   1544                {
   1545                  if ( ZSTACK_ROUTER_BUILD )
   1546                  {
   1547                    if ( devState == DEV_NWK_ORPHAN
   1548                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1549                    {
   1550                      // Change NIB state to router for restore
   1551                      _NIB.nwkState = NWK_ROUTER;
   1552                    }
   1553                  }
   1554          
   1555                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00003B   90....       MOV       DPTR,#devState
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6403         XRL       A,#0x3
   \   000041   7017         JNZ       ??ZDApp_ProcessNetworkJoin_6
   1556                  {
   1557                    ZDApp_AnnounceNewAddress();
   \   000043                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000043   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1558                    if( bdbCommissioningProcedureState.bdbCommissioningState == BDB_COMMISSIONING_STATE_TL )
   \   000046   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   6402         XRL       A,#0x2
   \   00004C   700C         JNZ       ??ZDApp_ProcessNetworkJoin_6
   1559                    {
   1560                      bdb_setNodeIsOnANetwork(TRUE);
   \   00004E                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00004E   7901         MOV       R1,#0x1
   \   000050   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   1561                      bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_TL, TRUE );
   \   000053                ; Setup parameters for call to function bdb_reportCommissioningState
   \   000053   7A01         MOV       R2,#0x1
   \   000055   7902         MOV       R1,#0x2
   \   000057   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
   1562                    }
   1563                  }
   1564          
   1565                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005A                ; Setup parameters for call to function ZDApp_ChangeState
   \   00005A   7906         MOV       R1,#0x6
   \   00005C   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1566          
   1567                  if ( ZSTACK_ROUTER_BUILD )
   \   00005F   02....       LJMP      ??CrossCallReturnLabel_122 & 0xFFFF
   1568                  {
   1569                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1570                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1571                    {
   1572                      NLME_StartRouterRequest( 0, 0, false );
   1573                    }
   1574                  }
   1575                }
   1576              }
   1577              else
   1578              {
   1579          
   1580                bdb_nwkAssocAttemt(FALSE);
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000062                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   000062   7900         MOV       R1,#0x0
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000064   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000067   02....       LJMP      ??CrossCallReturnLabel_122 & 0xFFFF
   1581              }
   1582            }
   1583            else if ( devState == DEV_NWK_ORPHAN ||
   1584                      devState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL ||
   1585                      devState == DEV_NWK_TC_REJOIN_CURR_CHANNEL ||
   1586                      devState == DEV_NWK_TC_REJOIN_ALL_CHANNEL ||
   1587                      devState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   6404         XRL       A,#0x4
   \   00006D   6012         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   640E         XRL       A,#0xe
   \   000072   600D         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000074   E0           MOVX      A,@DPTR
   \   000075   640F         XRL       A,#0xf
   \   000077   6008         JZ        ??ZDApp_ProcessNetworkJoin_2
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   640D         XRL       A,#0xd
   \   00007C   6003         JZ        $+5
   \   00007E   02....       LJMP      ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1588            {
   1589              // results of an orphaning attempt by this device
   1590              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000081   90....       MOV       DPTR,#nwkStatus
   \   000084   E0           MOVX      A,@DPTR
   \   000085   6003         JZ        $+5
   \   000087   02....       LJMP      ??ZDApp_ProcessNetworkJoin_8 & 0xFFFF
   1591              {
   1592                //When the device has successfully rejoined then reset retryCnt
   1593                retryCnt = 0;
   \   00008A   90....       MOV       DPTR,#retryCnt
   \   00008D   E4           CLR       A
   \   00008E   F0           MOVX      @DPTR,A
   1594          
   1595                // Verify NWK key is available before sending Device_annce
   1596                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey( TRUE ) == false ) )
   \   00008F                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00008F   7901         MOV       R1,#0x1
   \   000091   12....       LCALL     `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000094   E9           MOV       A,R1
   \   000095   700F         JNZ       ??ZDApp_ProcessNetworkJoin_9
   1597                {
   1598                  // wait for auth from trust center
   1599                  ZDApp_ChangeState( DEV_END_DEVICE_UNAUTH );
   \   000097                ; Setup parameters for call to function ZDApp_ChangeState
   \   000097   7905         MOV       R1,#0x5
   \   000099   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1600          
   1601                  // Start the reset timer for MAX UNAUTH time
   1602                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   00009C                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   00009C   7A10         MOV       R2,#0x10
   \   00009E   7B27         MOV       R3,#0x27
   \   0000A0   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   0000A3   02....       LJMP      ??CrossCallReturnLabel_122 & 0xFFFF
   1603                }
   1604                else
   1605                {
   1606                  ZDApp_ChangeState( DEV_END_DEVICE );
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   0000A6                ; Setup parameters for call to function ZDApp_ChangeState
   \   0000A6   7906         MOV       R1,#0x6
   \   0000A8   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   1607          
   1608                  osal_stop_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF );
   \   0000AB                ; Setup parameters for call to function osal_stop_timerEx
   \   0000AB   7A00         MOV       R2,#0x0
   \   0000AD   7B20         MOV       R3,#0x20
   \   0000AF   12....       LCALL     ?Subroutine26 & 0xFFFF
   1609          
   1610                  // setup Power Manager Device
   1611          #if defined ( POWER_SAVING )
   1612                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \                     ??CrossCallReturnLabel_65:
   \   0000B2                ; Setup parameters for call to function osal_pwrmgr_device
   \   0000B2   7901         MOV       R1,#0x1
   \   0000B4   12....       LCALL     `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1613          #endif
   1614          
   1615                  // The receiver is on, turn network layer polling off.
   1616                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   0000B7   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000BD   501D         JNC       ??ZDApp_ProcessNetworkJoin_10
   1617                  {
   1618                    // if Child Table Management process is not enabled
   1619                    if ( zgChildAgingEnable == FALSE )
   \   0000BF   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   7017         JNZ       ??ZDApp_ProcessNetworkJoin_10
   1620                    {
   1621                      NLME_SetPollRate( 0 );
   \   0000C5                ; Setup parameters for call to function NLME_SetPollRate
   \   0000C5   90....       MOV       DPTR,#__Constant_0
   \   0000C8   12....       LCALL     ?XLOAD_R2345
   \   0000CB   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1622                      NLME_SetQueuedPollRate( 0 );
   \   0000CE                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0000CE   7A00         MOV       R2,#0x0
   \   0000D0   7B00         MOV       R3,#0x0
   \   0000D2   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1623                      NLME_SetResponseRate( 0 );
   \   0000D5                ; Setup parameters for call to function NLME_SetResponseRate
   \   0000D5   7A00         MOV       R2,#0x0
   \   0000D7   7B00         MOV       R3,#0x0
   \   0000D9   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1624                    }
   1625                  }
   1626          
   1627                  if ( ZSTACK_ROUTER_BUILD )
   1628                  {
   1629                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1630                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   1631                    {
   1632                      NLME_StartRouterRequest( 0, 0, false );
   1633                    }
   1634                  }
   1635          
   1636                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000DC                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0000DC   12....       LCALL     ?Subroutine34 & 0xFFFF
   1637          
   1638                  if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
   1639                      || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
   1640                        && (zgChildAgingEnable == TRUE) ) )
   \                     ??CrossCallReturnLabel_37:
   \   0000DF   500B         JNC       ??ZDApp_ProcessNetworkJoin_11
   \   0000E1   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   6401         XRL       A,#0x1
   \   0000E7   6003         JZ        $+5
   \   0000E9   02....       LJMP      ??CrossCallReturnLabel_122 & 0xFFFF
   1641                  {
   1642                    if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000EC   90....       MOV       DPTR,#devStartMode
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   6403         XRL       A,#0x3
   \   0000F2   7010         JNZ       ??ZDApp_ProcessNetworkJoin_12
   1643                    {
   1644                      NLME_SetPollRate( zgRejoinPollRate );
   \   0000F4                ; Setup parameters for call to function NLME_SetPollRate
   \   0000F4   90....       MOV       DPTR,#zgRejoinPollRate
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F5..         MOV       ?V0,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   AA..         MOV       R2,?V0
   \   0000FE   FB           MOV       R3,A
   \   0000FF   E4           CLR       A
   \   000100   FC           MOV       R4,A
   \   000101   FD           MOV       R5,A
   \   000102   8006         SJMP      ??ZDApp_ProcessNetworkJoin_13
   1645                    }
   1646                    else
   1647                    {
   1648                      NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   000104                ; Setup parameters for call to function NLME_SetPollRate
   \   000104   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   000107   12....       LCALL     ?XLOAD_R2345
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   00010A   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   00010D   02....       LJMP      ??CrossCallReturnLabel_122 & 0xFFFF
   1649                    }
   1650                  }
   1651                }
   1652              }
   1653              else
   1654              {
   1655                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000110   90....       MOV       DPTR,#devStartMode
   \   000113   E0           MOVX      A,@DPTR
   \   000114   6401         XRL       A,#0x1
   \   000116   7038         JNZ       ??ZDApp_ProcessNetworkJoin_14
   1656                {
   1657                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000118   90....       MOV       DPTR,#retryCnt
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   04           INC       A
   \   00011D   F0           MOVX      @DPTR,A
   \   00011E   C3           CLR       C
   \   00011F   9404         SUBB      A,#0x4
   \   000121   501F         JNC       ??ZDApp_ProcessNetworkJoin_15
   1658                  {
   1659                    if ( _NIB.nwkPanId == 0xFFFF )
   \   000123   90....       MOV       DPTR,#_NIB + 33
   \   000126   E0           MOVX      A,@DPTR
   \   000127   F4           CPL       A
   \   000128   7003         JNZ       ??ZDApp_ProcessNetworkJoin_16
   \   00012A   A3           INC       DPTR
   \   00012B   E0           MOVX      A,@DPTR
   \   00012C   F4           CPL       A
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   00012D   601B         JZ        ??ZDApp_ProcessNetworkJoin_17
   1660                      devStartMode = MODE_JOIN;
   1661                    else
   1662                    {
   1663                      devStartMode = MODE_REJOIN;
   \   00012F   90....       MOV       DPTR,#devStartMode
   \   000132   7403         MOV       A,#0x3
   \   000134   F0           MOVX      @DPTR,A
   1664                      _tmpRejoinState = true;
   \   000135   90....       MOV       DPTR,#_tmpRejoinState
   \   000138   7401         MOV       A,#0x1
   \   00013A   F0           MOVX      @DPTR,A
   1665                      prevDevState = DEV_NWK_SEC_REJOIN_CURR_CHANNEL;
   \   00013B   90....       MOV       DPTR,#prevDevState
   \   00013E   7404         MOV       A,#0x4
   \   000140   8068         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1666                    }
   1667                  }
   1668                  // Do a normal join to the network after certain times of rejoin retries
   1669                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   000142   90....       MOV       DPTR,#AIB_apsUseInsecureJoin
   \   000145   E0           MOVX      A,@DPTR
   \   000146   6401         XRL       A,#0x1
   \   000148   7061         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1670                  {
   1671                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   00014A   90....       MOV       DPTR,#devStartMode
   \   00014D   E4           CLR       A
   \   00014E   805A         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1672                  }
   1673                }
   1674                else if(devStartMode == MODE_REJOIN)
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   000150   E0           MOVX      A,@DPTR
   \   000151   6403         XRL       A,#0x3
   \   000153   7056         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1675                {
   1676                  if ( ZSTACK_END_DEVICE_BUILD )
   1677                  {
   1678                    devStartMode = MODE_REJOIN;
   1679                    _tmpRejoinState = true;
   \   000155   90....       MOV       DPTR,#_tmpRejoinState
   \   000158   7401         MOV       A,#0x1
   \   00015A   F0           MOVX      @DPTR,A
   1680                    _NIB.nwkState = NWK_INIT;
   \   00015B   90....       MOV       DPTR,#_NIB + 35
   \   00015E   E4           CLR       A
   \   00015F   F0           MOVX      @DPTR,A
   1681          
   1682                    if( prevDevState == DEV_NWK_SEC_REJOIN_CURR_CHANNEL )
   \   000160   90....       MOV       DPTR,#prevDevState
   \   000163   E0           MOVX      A,@DPTR
   \   000164   6404         XRL       A,#0x4
   \   000166   7007         JNZ       ??ZDApp_ProcessNetworkJoin_20
   1683                    {
   1684                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   000168   12....       LCALL     ?Subroutine9 & 0xFFFF
   1685                      prevDevState = DEV_NWK_SEC_REJOIN_ALL_CHANNEL ;
   1686                    }
   \                     ??CrossCallReturnLabel_0:
   \   00016B   740D         MOV       A,#0xd
   \   00016D   803B         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1687                    else if ( prevDevState == DEV_NWK_SEC_REJOIN_ALL_CHANNEL)
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   00016F   E0           MOVX      A,@DPTR
   \   000170   640D         XRL       A,#0xd
   \   000172   702C         JNZ       ??ZDApp_ProcessNetworkJoin_21
   1688                    {
   1689                      // Set the flag that will ask the device to do trust center network layer rejoin.
   1690                      _NIB.nwkKeyLoaded = FALSE;
   \   000174   90....       MOV       DPTR,#_NIB + 61
   \   000177   E4           CLR       A
   \   000178   F0           MOVX      @DPTR,A
   1691                      ZDApp_ResetNwkKey(); // Clear up the old network key.
   \   000179                ; Setup parameters for call to function ZDApp_ResetNwkKey
   \   000179   12....       LCALL     `??ZDApp_ResetNwkKey::?relay`; Banked call to: ZDApp_ResetNwkKey
   1692                      runtimeChannel = (uint32) (1L << _NIB.nwkLogicalChannel);
   \   00017C   75..01       MOV       ?V0,#0x1
   \   00017F   75..00       MOV       ?V1,#0x0
   \   000182   75..00       MOV       ?V2,#0x0
   \   000185   75..00       MOV       ?V3,#0x0
   \   000188   90....       MOV       DPTR,#_NIB + 22
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   78..         MOV       R0,#?V0
   \   00018E   12....       LCALL     ?L_SHL
   \   000191   90....       MOV       DPTR,#runtimeChannel
   \   000194   78..         MOV       R0,#?V0
   \   000196   12....       LCALL     ?L_MOV_TO_X
   1693                      prevDevState = DEV_NWK_TC_REJOIN_CURR_CHANNEL ;
   \   000199   90....       MOV       DPTR,#prevDevState
   \   00019C   740E         MOV       A,#0xe
   \   00019E   800A         SJMP      ??ZDApp_ProcessNetworkJoin_18
   1694                    }
   1695                    else if ( prevDevState == DEV_NWK_TC_REJOIN_CURR_CHANNEL )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   640E         XRL       A,#0xe
   \   0001A3   7006         JNZ       ??ZDApp_ProcessNetworkJoin_19
   1696                    {
   1697                      runtimeChannel = MAX_CHANNELS_24GHZ;
   \   0001A5   12....       LCALL     ?Subroutine9 & 0xFFFF
   1698                      prevDevState= DEV_NWK_TC_REJOIN_ALL_CHANNEL ;
   1699                    }
   1700          
   1701                  }
   1702                }
   \                     ??CrossCallReturnLabel_1:
   \   0001A8   740F         MOV       A,#0xf
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   0001AA   F0           MOVX      @DPTR,A
   1703          
   1704                // Clear the neighbor Table and network discovery tables.
   1705                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   0001AB                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001AB   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1706                NLME_NwkDiscTerm();
   \   0001AE                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001AE   12....       LCALL     ?Subroutine30 & 0xFFFF
   1707          
   1708                // setup a retry for later...
   1709                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1710                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   1711              }
   1712            }
   \                     ??CrossCallReturnLabel_32:
   \   0001B1   8009         SJMP      ??CrossCallReturnLabel_122
   1713          #if defined ( ZIGBEEPRO )
   1714            else if ( devState != DEV_HOLD )
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001B3   E0           MOVX      A,@DPTR
   \   0001B4   6006         JZ        ??CrossCallReturnLabel_122
   1715            {
   1716              // Assume from address conflict
   1717          
   1718              // Notify the network
   1719              ZDApp_AnnounceNewAddress();
   \   0001B6                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001B6   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1720          
   1721              // Notify apps
   1722              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001B9                ; Setup parameters for call to function osal_set_event
   \   0001B9   12....       LCALL     ?Subroutine16 & 0xFFFF
   1723            }
   1724          #endif
   1725          }
   \                     ??CrossCallReturnLabel_122:
   \   0001BC   80..         SJMP      ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV       DPTR,#runtimeChannel
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   74F8         MOV       A,#-0x8
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   74FF         MOV       A,#-0x1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   A3           INC       DPTR
   \   00000E   7407         MOV       A,#0x7
   \   000010   F0           MOVX      @DPTR,A
   \   000011   90....       MOV       DPTR,#prevDevState
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   \   000003                ; Setup parameters for call to function osal_rand
   \   000003                ; Setup parameters for call to function osal_rand
   \   000003   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000006                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000006                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000006   EA           MOV       A,R2
   \   000007   547F         ANL       A,#0x7f
   \   000009   2464         ADD       A,#0x64
   \   00000B   FA           MOV       R2,A
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000011   22           RET
   1726          
   1727          /******************************************************************************
   1728           * @fn          ZDApp_StoreNwkSecMaterial
   1729           *
   1730           * @brief       Stores new entries in the NwkSecMaterial
   1731           *
   1732           * @param       none
   1733           *
   1734           * @return      none
   1735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1736          void ZDApp_StoreNwkSecMaterial(void)
   \                     ZDApp_StoreNwkSecMaterial:
   1737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1738            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1739            uint8 i;
   1740            uint8 emptyEntryIndexOffset = gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
   1741            
   1742            //Search if we do have security material for this network
   1743            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   7E00         MOV       R6,#0x0
   \   00000C   75....       MOV       ?V0,#(_NIB + 53) & 0xff
   \   00000F   75....       MOV       ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000012   8E..         MOV       ?V2,R6
   \   000014   8001         SJMP      ??ZDApp_StoreNwkSecMaterial_0
   \                     ??ZDApp_StoreNwkSecMaterial_1:
   \   000016   0E           INC       R6
   \                     ??ZDApp_StoreNwkSecMaterial_0:
   \   000017   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00001A   E4           CLR       A
   \   00001B   93           MOVC      A,@A+DPTR
   \   00001C   F8           MOV       R0,A
   \   00001D   EE           MOV       A,R6
   \   00001E   C3           CLR       C
   \   00001F   98           SUBB      A,R0
   \   000020   4003         JC        $+5
   \   000022   02....       LJMP      ??ZDApp_StoreNwkSecMaterial_2 & 0xFFFF
   1744            {
   1745              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V4,R0
   \   00002B   89..         MOV       ?V5,R1
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..0C       MOV       ?V4,#0xc
   \   000035   75..00       MOV       ?V5,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   2475         ADD       A,#0x75
   \   000044   FA           MOV       R2,A
   \   000045   E4           CLR       A
   \   000046   3400         ADDC      A,#0x0
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   1746              {
   1747                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   7404         MOV       A,#0x4
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C08         MOV       R4,#0x8
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   \   000074   E9           MOV       A,R1
   \   000075   705F         JNZ       ??ZDApp_StoreNwkSecMaterial_2
   1748                {
   1749                  break;
   1750                }
   1751                if(osal_isbufset(nwkSecMaterialDesc.extendedPanID,0,Z_EXTADDR_LEN))
   \   000077                ; Setup parameters for call to function osal_isbufset
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7900         MOV       R1,#0x0
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   AA82         MOV       R2,DPL
   \   000082   AB83         MOV       R3,DPH
   \   000084   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000087   E9           MOV       A,R1
   \   000088   608C         JZ        ??ZDApp_StoreNwkSecMaterial_1
   1752                {
   1753                  emptyEntryIndexOffset = i;
   \   00008A   EE           MOV       A,R6
   \   00008B   FF           MOV       R7,A
   1754                  break;
   1755                }
   1756              }
   1757            }
   1758            
   1759            //ExtPanID not found and found an empty entry, save the extended PANID
   1760            if(emptyEntryIndexOffset < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES)
   1761            {
   1762              osal_memcpy(nwkSecMaterialDesc.extendedPanID, _NIB.extendedPANID, Z_EXTADDR_LEN);
   \   00008C                ; Setup parameters for call to function osal_memcpy
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000091   7C08         MOV       R4,#0x8
   \   000093   7D00         MOV       R5,#0x0
   \   000095   7407         MOV       A,#0x7
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   AA82         MOV       R2,DPL
   \   00009C   AB83         MOV       R3,DPH
   \   00009E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A1   7403         MOV       A,#0x3
   \   0000A3   12....       LCALL     ?DEALLOC_XSTACK8
   1763              nwkSecMaterialDesc.FrameCounter = 0;
   \   0000A6   85..82       MOV       DPL,?XSP + 0
   \   0000A9   85..83       MOV       DPH,?XSP + 1
   \   0000AC   E4           CLR       A
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   12....       LCALL     ?Subroutine11 & 0xFFFF
   1764              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + emptyEntryIndexOffset,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   1765            }
   \                     ??CrossCallReturnLabel_4:
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   75..0C       MOV       ?V0,#0xc
   \   0000BC   75..00       MOV       ?V1,#0x0
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C4   7C00         MOV       R4,#0x0
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   EF           MOV       A,R7
   \   0000C9   2475         ADD       A,#0x75
   \   0000CB   FA           MOV       R2,A
   \   0000CC   E4           CLR       A
   \   0000CD   3400         ADDC      A,#0x0
   \   0000CF   FB           MOV       R3,A
   \   0000D0   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   1766          
   1767          }
   \                     ??ZDApp_StoreNwkSecMaterial_2:
   \   0000D6   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740C         MOV       A,#0xc
   \   000002                REQUIRE ??Subroutine56_0
   \   000002                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
   1768          
   1769          
   1770          /*********************************************************************
   1771           * @fn      ZDApp_SaveNwkKey()
   1772           *
   1773           * @brief   Save off the Network key information.
   1774           *
   1775           * @param   none
   1776           *
   1777           * @return  none
   1778           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7C00         MOV       R4,#0x0
   \   000002   7D00         MOV       R5,#0x0
   \   000004   7A82         MOV       R2,#-0x7e
   \   000006                REQUIRE ??Subroutine46_0
   \   000006                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1779          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1780          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1781            nwkActiveKeyItems keyItems;
   1782            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1783            uint8 found = 0;
   1784            uint8 i;
   1785            
   1786            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   740C         MOV       A,#0xc
   \   00000C   12....       LCALL     ?XSTACK_DISP101_8
   \   00000F   12....       LCALL     `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1787          
   1788            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1789                          (void *)&keyItems );
   \   000012                ; Setup parameters for call to function osal_nv_write
   \   000012   740C         MOV       A,#0xc
   \   000014   12....       LCALL     ?XSTACK_DISP100_8
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   75..15       MOV       ?V0,#0x15
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   1790            
   1791            //Search for the security material to update its framecounter
   1792            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   000031   75..00       MOV       ?V0,#0x0
   \   000034   8002         SJMP      ??ZDApp_SaveNwkKey_0
   \                     ??ZDApp_SaveNwkKey_1:
   \   000036   05..         INC       ?V0
   \                     ??ZDApp_SaveNwkKey_0:
   \   000038   AE..         MOV       R6,?V0
   \   00003A   7F00         MOV       R7,#0x0
   \   00003C   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00003F   E4           CLR       A
   \   000040   93           MOVC      A,@A+DPTR
   \   000041   F8           MOV       R0,A
   \   000042   EE           MOV       A,R6
   \   000043   C3           CLR       C
   \   000044   98           SUBB      A,R0
   \   000045   507D         JNC       ??ZDApp_SaveNwkKey_2
   1793            {
   1794              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000047   EE           MOV       A,R6
   \   000048   2475         ADD       A,#0x75
   \   00004A   FE           MOV       R6,A
   \   00004B   5001         JNC       ??ZDApp_SaveNwkKey_3
   \   00004D   0F           INC       R7
   \                     ??ZDApp_SaveNwkKey_3:
   \   00004E                ; Setup parameters for call to function osal_nv_read
   \   00004E   A8..         MOV       R0,?XSP + 0
   \   000050   A9..         MOV       R1,?XSP + 1
   \   000052   88..         MOV       ?V2,R0
   \   000054   89..         MOV       ?V3,R1
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..0C       MOV       ?V2,#0xc
   \   00005E   75..00       MOV       ?V3,#0x0
   \   000061   78..         MOV       R0,#?V2
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7C00         MOV       R4,#0x0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   EE           MOV       A,R6
   \   00006B   FA           MOV       R2,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1795              {
   1796                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000074                ; Setup parameters for call to function osal_memcmp
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   A982         MOV       R1,DPL
   \   00007B   AA83         MOV       R2,DPH
   \   00007D   89..         MOV       ?V4,R1
   \   00007F   8A..         MOV       ?V5,R2
   \   000081   75..00       MOV       ?V6,#0x0
   \   000084   78..         MOV       R0,#?V4
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000089   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008F   E9           MOV       A,R1
   \   000090   60A4         JZ        ??ZDApp_SaveNwkKey_1
   1797                {
   1798                  nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   000092   741D         MOV       A,#0x1d
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?XLOAD_R0123
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   12....       LCALL     ?XSTORE_R0123
   1799                  found = TRUE;
   1800                  //update the framecounter associated to this ExtPanID
   1801                  osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000A3                ; Setup parameters for call to function osal_nv_write
   \   0000A3   A8..         MOV       R0,?XSP + 0
   \   0000A5   A9..         MOV       R1,?XSP + 1
   \   0000A7   88..         MOV       ?V0,R0
   \   0000A9   89..         MOV       ?V1,R1
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   75..0C       MOV       ?V0,#0xc
   \   0000B3   75..00       MOV       ?V1,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   7C00         MOV       R4,#0x0
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   8045         SJMP      ??ZDApp_SaveNwkKey_4
   1802                  break;
   1803                }
   1804              }
   1805            }
   1806            
   1807            //If not found, then use the generic
   1808            if(!found)
   1809            {
   1810              osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \                     ??ZDApp_SaveNwkKey_2:
   \   0000C4                ; Setup parameters for call to function osal_memset
   \   0000C4   7C08         MOV       R4,#0x8
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   79FF         MOV       R1,#-0x1
   \   0000CA   7404         MOV       A,#0x4
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   AA82         MOV       R2,DPL
   \   0000D1   AB83         MOV       R3,DPH
   \   0000D3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1811              nwkSecMaterialDesc.FrameCounter = keyItems.frameCounter;
   \   0000D6   741D         MOV       A,#0x1d
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   12....       LCALL     ?XLOAD_R0123
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   12....       LCALL     ?XSTORE_R0123
   1812              //update the framecounter associated to this ExtPanID
   1813              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000E7                ; Setup parameters for call to function osal_nv_write
   \   0000E7   A8..         MOV       R0,?XSP + 0
   \   0000E9   A9..         MOV       R1,?XSP + 1
   \   0000EB   88..         MOV       ?V0,R0
   \   0000ED   89..         MOV       ?V1,R1
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   75..0C       MOV       ?V0,#0xc
   \   0000F7   8F..         MOV       ?V1,R7
   \   0000F9   78..         MOV       R0,#?V0
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   7C00         MOV       R4,#0x0
   \   000100   7D00         MOV       R5,#0x0
   \   000102   EE           MOV       A,R6
   \   000103   2474         ADD       A,#0x74
   \   000105   FA           MOV       R2,A
   \   000106   E4           CLR       A
   \   000107   3400         ADDC      A,#0x0
   \                     ??ZDApp_SaveNwkKey_4:
   \   000109   FB           MOV       R3,A
   1814            }
   \   00010A   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   1815            
   1816            
   1817            nwkFrameCounterChanges = 0;
   \   000110   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000113   E4           CLR       A
   \   000114   F0           MOVX      @DPTR,A
   \   000115   A3           INC       DPTR
   \   000116   F0           MOVX      @DPTR,A
   1818            
   1819            // Clear copy in RAM before return.
   1820            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000117                ; Setup parameters for call to function osal_memset
   \   000117   7C15         MOV       R4,#0x15
   \   000119   FD           MOV       R5,A
   \   00011A   F9           MOV       R1,A
   \   00011B   740C         MOV       A,#0xc
   \   00011D   12....       LCALL     ?XSTACK_DISP101_8
   \   000120   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1821          
   1822          }
   \   000123   7421         MOV       A,#0x21
   \   000125   80..         SJMP      ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   7C08         MOV       R4,#0x8
   \   000002   7D00         MOV       R5,#0x0
   \   000004   79..         MOV       R1,#(_NIB + 53) & 0xff
   \   000006   7A..         MOV       R2,#((_NIB + 53) >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine54_0
   \   000008                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine55_0
   \   000002                ; // Fall through to label ??Subroutine55_0
   1823          
   1824          /*********************************************************************
   1825           * @fn      ZDApp_ForceConcentratorChange()
   1826           *
   1827           * @brief   Force a network concentrator change by resetting
   1828           *          zgConcentratorEnable and zgConcentratorDiscoveryTime
   1829           *          from NV and set nwk event.
   1830           *
   1831           * @param   none
   1832           *
   1833           * @return  none
   1834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1835          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1836          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1837            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV       ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV       ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV       ?V0,#0x1
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A32         MOV       R2,#0x32
   \   000021   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   1838            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   000027                ; Setup parameters for call to function osal_nv_read
   \   000027   75....       MOV       ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002A   75....       MOV       ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV       ?V0,#0x1
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A33         MOV       R2,#0x33
   \   000043   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   1839          
   1840            if ( zgConcentratorEnable == TRUE )
   \   000049   90....       MOV       DPTR,#zgConcentratorEnable
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6401         XRL       A,#0x1
   \   00004F   7015         JNZ       ??ZDApp_ForceConcentratorChange_0
   1841            {
   1842              // Start next event
   1843              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000051                ; Setup parameters for call to function osal_start_timerEx
   \   000051   90....       MOV       DPTR,#__Constant_64
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   7A00         MOV       R2,#0x0
   \   000059   7B08         MOV       R3,#0x8
   \   00005B   90....       MOV       DPTR,#NWK_TaskID
   \   00005E   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   1844            }
   \                     ??CrossCallReturnLabel_90:
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   \   000064   800A         SJMP      ??CrossCallReturnLabel_67
   1845            else
   1846            {
   1847              // Stop the next event
   1848              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000066                ; Setup parameters for call to function osal_stop_timerEx
   \   000066   7A00         MOV       R2,#0x0
   \   000068   7B08         MOV       R3,#0x8
   \   00006A   90....       MOV       DPTR,#NWK_TaskID
   \   00006D   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1849            }
   1850          }
   \                     ??CrossCallReturnLabel_67:
   \   000070   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   1851          
   1852          /*********************************************************************
   1853           * @fn      ZDApp_ResetNwkKey()
   1854           *
   1855           * @brief   Reset the Network key information in NV.
   1856           *
   1857           * @param   none
   1858           *
   1859           * @return  none
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1862          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1863            nwkActiveKeyItems keyItems;
   1864          
   1865            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   12....       LCALL     ?Subroutine29 & 0xFFFF
   1866            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1867                          (void *)&keyItems );
   \                     ??CrossCallReturnLabel_31:
   \   00000F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000012   75..15       MOV       ?V0,#0x15
   \   000015   75..00       MOV       ?V1,#0x0
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000020   12....       LCALL     ?DEALLOC_XSTACK8
   1868          }
   \   000023   02....       LJMP      ?Subroutine7 & 0xFFFF
   1869          
   1870          /*********************************************************************
   1871           * @fn      ZDApp_RestoreNwkSecMaterial()
   1872           *
   1873           * @brief   Restore the network frame counter associated to this ExtPanID and 
   1874           *          increment it if found. This can only happens once per reset
   1875           *
   1876           * @param   none
   1877           *
   1878           * @return  none
   1879           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1880          void ZDApp_RestoreNwkSecMaterial(void)
   \                     ZDApp_RestoreNwkSecMaterial:
   1881          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1882            uint8 Found = FALSE;
   1883            uint8 i;
   1884            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   1885            uint8 UpdateFrameCounter = FALSE;
   1886          
   1887            //Search if we do have security material for this network
   1888            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   8046         SJMP      ??ZDApp_RestoreNwkSecMaterial_0
   1889            {
   1890              osal_nv_read(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \                     ??ZDApp_RestoreNwkSecMaterial_1:
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   A8..         MOV       R0,?XSP + 0
   \   000011   A9..         MOV       R1,?XSP + 1
   \   000013   88..         MOV       ?V2,R0
   \   000015   89..         MOV       ?V3,R1
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..0C       MOV       ?V2,#0xc
   \   00001F   75..00       MOV       ?V3,#0x0
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
   1891              {
   1892                if(osal_memcmp(_NIB.extendedPANID,nwkSecMaterialDesc.extendedPanID,Z_EXTADDR_LEN))
   \   000035                ; Setup parameters for call to function osal_memcmp
   \   000035   7404         MOV       A,#0x4
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   A982         MOV       R1,DPL
   \   00003C   AA83         MOV       R2,DPH
   \   00003E   89..         MOV       ?V4,R1
   \   000040   8A..         MOV       ?V5,R2
   \   000042   75..00       MOV       ?V6,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   12....       LCALL     ?Subroutine37 & 0xFFFF
   1893                {
   1894                  UpdateFrameCounter = TRUE;
   1895                  Found = TRUE;
   1896                  break;
   1897                }
   1898              }
   1899            }    
   \                     ??CrossCallReturnLabel_69:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   E9           MOV       A,R1
   \   000051   7025         JNZ       ??ZDApp_RestoreNwkSecMaterial_2
   \   000053   05..         INC       ?V0
   \                     ??ZDApp_RestoreNwkSecMaterial_0:
   \   000055   E5..         MOV       A,?V0
   \   000057   2475         ADD       A,#0x75
   \   000059   FE           MOV       R6,A
   \   00005A   E4           CLR       A
   \   00005B   3400         ADDC      A,#0x0
   \   00005D   FF           MOV       R7,A
   \   00005E   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   000061   E4           CLR       A
   \   000062   93           MOVC      A,@A+DPTR
   \   000063   F8           MOV       R0,A
   \   000064   E5..         MOV       A,?V0
   \   000066   98           SUBB      A,R0
   \   000067   40A6         JC        ??ZDApp_RestoreNwkSecMaterial_1
   1900            //Check if we do have frame counter stored in the generic
   1901            if(!Found)
   1902            {
   1903              //The last entry readed has the Generic item, thefore, no need to read it again
   1904              if(nwkSecMaterialDesc.FrameCounter)
   \   000069   85..82       MOV       DPL,?XSP + 0
   \   00006C   85..83       MOV       DPH,?XSP + 1
   \   00006F   12....       LCALL     ?XLOAD_R0123
   \   000072   E8           MOV       A,R0
   \   000073   49           ORL       A,R1
   \   000074   4A           ORL       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6058         JZ        ??ZDApp_RestoreNwkSecMaterial_3
   \                     ??ZDApp_RestoreNwkSecMaterial_2:
   \   000078   90....       MOV       DPTR,#FrameCounterUpdated
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   7052         JNZ       ??ZDApp_RestoreNwkSecMaterial_3
   1905              {
   1906                UpdateFrameCounter = TRUE;
   1907              }
   1908            }  
   1909          
   1910            if(UpdateFrameCounter && (!FrameCounterUpdated))
   1911            {
   1912              FrameCounterUpdated = TRUE;
   \   00007E   7401         MOV       A,#0x1
   \   000080   F0           MOVX      @DPTR,A
   1913              
   1914              // Increment the frame counter stored in NV
   1915              nwkSecMaterialDesc.FrameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1916                                        NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000081   90....       MOV       DPTR,#__Constant_4e2
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?L_MOV_X
   \   000089   85..82       MOV       DPL,?XSP + 0
   \   00008C   85..83       MOV       DPH,?XSP + 1
   \   00008F   78..         MOV       R0,#?V0
   \   000091   12....       LCALL     ?L_ADD_TO_X
   1917              
   1918              nwkFrameCounter = nwkSecMaterialDesc.FrameCounter;
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   12....       LCALL     ?XLOAD_R0123
   \   00009D   90....       MOV       DPTR,#nwkFrameCounter
   \   0000A0   12....       LCALL     ?XSTORE_R0123
   1919              
   1920              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000A3                ; Setup parameters for call to function osal_nv_write
   \   0000A3   A8..         MOV       R0,?XSP + 0
   \   0000A5   A9..         MOV       R1,?XSP + 1
   \   0000A7   88..         MOV       ?V0,R0
   \   0000A9   89..         MOV       ?V1,R1
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   75..0C       MOV       ?V0,#0xc
   \   0000B3   75..00       MOV       ?V1,#0x0
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   7C00         MOV       R4,#0x0
   \   0000BD   7D00         MOV       R5,#0x0
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   FB           MOV       R3,A
   \   0000C3   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000C6   12....       LCALL     ?DEALLOC_XSTACK8
   1921              
   1922              nwkFrameCounterChanges = 0;
   \   0000C9   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   0000CC   E4           CLR       A
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   F0           MOVX      @DPTR,A
   1923            }
   1924            return;
   \                     ??ZDApp_RestoreNwkSecMaterial_3:
   \   0000D0   02....       LJMP      ?Subroutine6 & 0xFFFF
   1925          }
   1926          
   1927          /*********************************************************************
   1928           * @fn      ZDApp_RestoreNwkKey(uint8 incrFrmCnt)
   1929           *
   1930           * @brief
   1931           *
   1932           *   Save off the Network key information.
   1933           *
   1934           * @param   incrFrmCnt - set to true if we want to increment the network
   1935                      frame counter, else set to false
   1936           *
   1937           * @return  true if restored from NV, false if not
   1938           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1939          uint8 ZDApp_RestoreNwkKey( uint8 incrFrmCnt )
   \                     ZDApp_RestoreNwkKey:
   1940          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV       A,#-0x25
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1941            nwkActiveKeyItems keyItems;
   1942            uint8 ret = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
   1943          
   1944            ZDApp_RestoreNwkSecMaterial();
   \   00000C                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00000C   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   1945          
   1946            // Restore the key information
   1947            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1948                == ZSUCCESS )
   \   00000F                ; Setup parameters for call to function osal_nv_read
   \   00000F   7410         MOV       A,#0x10
   \   000011   12....       LCALL     ?XSTACK_DISP100_8
   \   000014   88..         MOV       ?V0,R0
   \   000016   89..         MOV       ?V1,R1
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV       ?V0,#0x15
   \   000020   8E..         MOV       ?V1,R6
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   7A82         MOV       R2,#-0x7e
   \   00002D   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   \   000033   E9           MOV       A,R1
   \   000034   7032         JNZ       ??ZDApp_RestoreNwkKey_0
   1949            {
   1950              uint8 nullKey[SEC_KEY_LEN];
   1951          
   1952              // initialize default value to compare to
   1953              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C10         MOV       R4,#0x10
   \   000038   12....       LCALL     ?Subroutine43 & 0xFFFF
   1954          
   1955              // if stored key is different than default value, then a key has been established
   1956              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \                     ??CrossCallReturnLabel_49:
   \   00003B   8E..         MOV       ?V2,R6
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000042   7C10         MOV       R4,#0x10
   \   000044   7D00         MOV       R5,#0x0
   \   000046   7414         MOV       A,#0x14
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   A982         MOV       R1,DPL
   \   00004D   AA83         MOV       R2,DPH
   \   00004F   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   \   000055   E9           MOV       A,R1
   \   000056   7010         JNZ       ??ZDApp_RestoreNwkKey_0
   1957              {
   1958                ret = TRUE;
   \   000058   7E01         MOV       R6,#0x1
   1959          
   1960                // Clear copy in RAM before return.
   1961                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   00005A                ; Setup parameters for call to function osal_memset
   \   00005A   7C15         MOV       R4,#0x15
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7900         MOV       R1,#0x0
   \   000060   7410         MOV       A,#0x10
   \   000062   12....       LCALL     ?XSTACK_DISP101_8
   \   000065   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1962              }
   1963            }
   1964          
   1965            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   000068   EE           MOV       A,R6
   \   000069   F9           MOV       R1,A
   \   00006A   7425         MOV       A,#0x25
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   7F03         MOV       R7,#0x3
   \   000071   02....       LJMP      ?BANKED_LEAVE_XDATA
   1966          }
   1967          
   1968          /*********************************************************************
   1969           * @fn      ZDApp_ResetTimerStart
   1970           *
   1971           * @brief   Start the reset timer.
   1972           *
   1973           * @param   delay - delay time(ms) before reset
   1974           *
   1975           * @return  none
   1976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1977          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   1979            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \                     ??CrossCallReturnLabel_81:
   \   000008   7012         JNZ       ??ZDApp_ResetTimerStart_0
   1980            {
   1981              // Start the rest timer
   1982              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00000A                ; Setup parameters for call to function osal_start_timerEx
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V2,A
   \   00000D   F5..         MOV       ?V3,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000014   7A04         MOV       R2,#0x4
   \   000016   12....       LCALL     ?Subroutine17 & 0xFFFF
   1983            }
   \                     ??CrossCallReturnLabel_85:
   \   000019   12....       LCALL     ?DEALLOC_XSTACK8
   1984          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   00001C   02....       LJMP      ??Subroutine53_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008                REQUIRE ??Subroutine58_0
   \   000008                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000008   EA           MOV       A,R2
   \   000009   4B           ORL       A,R3
   \   00000A   4C           ORL       A,R4
   \   00000B   4D           ORL       A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   7B00         MOV       R3,#0x0
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0
   1985          
   1986          /*********************************************************************
   1987           * @fn      ZDApp_ResetTimerCancel
   1988           *
   1989           * @brief   Cancel the reset timer.
   1990           *
   1991           * @param   none
   1992           *
   1993           * @return  none
   1994           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1995          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1996          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1997            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV       R2,#0x4
   \   000006   7B00         MOV       R3,#0x0
   \   000008   12....       LCALL     ?Subroutine26 & 0xFFFF
   1998            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \                     ??CrossCallReturnLabel_66:
   \   00000B                ; Setup parameters for call to function osal_clear_event
   \   00000B   7A04         MOV       R2,#0x4
   \   00000D   7B00         MOV       R3,#0x0
   \   00000F   90....       MOV       DPTR,#ZDAppTaskID
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   12....       LCALL     `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1999          }
   \   000017   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   2000          
   2001          /*********************************************************************
   2002           * @fn      ZDApp_LeaveCtrlInit
   2003           *
   2004           * @brief   Initialize the leave control logic.
   2005           *
   2006           * @param   none
   2007           *
   2008           * @return  none
   2009           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2010          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   2011          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2012            uint8 status;
   2013          
   2014          
   2015            // Initialize control state
   2016            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2017          
   2018            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   2019                                        sizeof(ZDApp_LeaveCtrl),
   2020                                        &ZDApp_LeaveCtrl );
   2021          
   2022            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV       R0,#?V0
   \   000012   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV       R4,#0x1
   \   000017   7D00         MOV       R5,#0x0
   \   000019   7A85         MOV       R2,#-0x7b
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   \   000025   E9           MOV       A,R1
   \   000026   701C         JNZ       ??ZDApp_LeaveCtrlInit_0
   2023            {
   2024              // Read saved control
   2025              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   2026                            0,
   2027                            sizeof( uint8 ),
   2028                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV       R0,#?V0
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   7D00         MOV       R5,#0x0
   \   00003C   7A85         MOV       R2,#-0x7b
   \   00003E   12....       LCALL     ?Subroutine33 & 0xFFFF
   2029            }
   \                     ??CrossCallReturnLabel_76:
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   2030          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000044   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   2031          
   2032          /*********************************************************************
   2033           * @fn      ZDApp_LeaveCtrlSet
   2034           *
   2035           * @brief   Set the leave control logic.
   2036           *
   2037           * @param   ra - reassociate flag
   2038           *
   2039           * @return  none
   2040           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2041          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   2042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2043            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV       A,#0x1
   \   00000C   F0           MOVX      @DPTR,A
   2044          
   2045            if ( ra == TRUE )
   \   00000D   6E           XRL       A,R6
   \   00000E   7003         JNZ       ??ZDApp_LeaveCtrlSet_0
   2046            {
   2047              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV       A,#0x3
   \   000012   F0           MOVX      @DPTR,A
   2048            }
   2049          
   2050            // Write the leave control
   2051            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2052                           0,
   2053                           sizeof( uint8 ),
   2054                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP      ?Subroutine4 & 0xFFFF
   2055          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   75....       MOV       ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV       ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV       R0,#?V0
   \   000008   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV       R4,#0x0
   \   000018   7D00         MOV       R5,#0x0
   \   00001A   7A85         MOV       R2,#-0x7b
   \   00001C   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00001F                REQUIRE ??Subroutine71_0
   \   00001F                ; // Fall through to label ??Subroutine71_0
   2056          
   2057          /*********************************************************************
   2058           * @fn      ZDApp_LeaveCtrlReset
   2059           *
   2060           * @brief   Re-initialize the leave control logic.
   2061           *
   2062           * @param   none
   2063           *
   2064           * @return  none
   2065           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2066          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   2067          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2068            // Set leave control to initialized state
   2069            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   2070          
   2071            // Write initialized control
   2072            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   2073                          0,
   2074                          sizeof( uint8 ),
   2075                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP      ?Subroutine4 & 0xFFFF
   2076          }
   2077          
   2078          /*********************************************************************
   2079           * @fn      ZDApp_LeaveCtrlBypass
   2080           *
   2081           * @brief   Check if NV restore should be skipped during a leave reset.
   2082           *
   2083           * @param   none
   2084           *
   2085           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   2086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2087          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   2088          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2089            uint8 bypass;
   2090          
   2091            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   2092            {
   2093              bypass = TRUE;
   2094            }
   2095            else
   2096            {
   2097              bypass = FALSE;
   2098            }
   2099          
   2100            return bypass;
   \   000004   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX      A,@DPTR
   \   000008   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   F9           MOV       R1,A
   \   00000D   80..         SJMP      ??Subroutine61_0
   2101          }
   2102          
   2103          /*********************************************************************
   2104           * @fn      ZDApp_LeaveCtrlStartup
   2105           *
   2106           * @brief   Check for startup conditions during a leave reset.
   2107           *
   2108           * @param   state      - devState_t determined by leave control logic
   2109           * @param   startDelay - startup delay
   2110           *
   2111           * @return  none
   2112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2113          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   2114          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2115            *startDelay = 0;
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   2116          
   2117            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV       DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   A2E0         MOV       C,0xE0 /* A   */.0
   \   000012   5019         JNC       ??ZDApp_LeaveCtrlStartup_0
   2118            {
   2119              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV       C,0xE0 /* A   */.1
   \   000016   500C         JNC       ??ZDApp_LeaveCtrlStartup_1
   2120              {
   2121                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   7488         MOV       A,#-0x78
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   7413         MOV       A,#0x13
   \   000022   8005         SJMP      ??ZDApp_LeaveCtrlStartup_2
   2122              }
   2123              else
   2124              {
   2125                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   E4           CLR       A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX      @DPTR,A
   2126              }
   2127          
   2128              // Reset leave control logic
   2129              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL     `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   2130            }
   2131          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP      ??Subroutine61_0
   2132          
   2133          /*********************************************************************
   2134           * @fn      ZDApp_LeaveReset
   2135           *
   2136           * @brief   Setup a device reset due to a leave indication/confirm.
   2137           *
   2138           * @param   ra - reassociate flag
   2139           *
   2140           * @return  none
   2141           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2142          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   2143          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   2144            ZDApp_LeaveCtrlSet( ra );
   \   000007                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000007   12....       LCALL     `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   2145          
   2146            APSME_HoldDataRequests( LEAVE_RESET_DELAY);
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A88         MOV       R2,#-0x78
   \   00000C   7B13         MOV       R3,#0x13
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   2147          
   2148            if ( ZSTACK_ROUTER_BUILD )
   2149            {
   2150              osal_stop_timerEx( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2151              osal_clear_event( NWK_TaskID, NWK_LINK_STATUS_EVT );
   2152            }
   2153          
   2154            if (ZG_DEVICE_ENDDEVICE_TYPE)
   2155            {
   2156              // Save polling values to be restored after rejoin
   2157              if ( ra == TRUE )
   \   000011   7401         MOV       A,#0x1
   \   000013   6E           XRL       A,R6
   \   000014   7028         JNZ       ??ZDApp_LeaveReset_0
   2158              {
   2159                 ZDApp_SavedPollRate = zgPollRate;
   \   000016   90....       MOV       DPTR,#zgPollRate
   \   000019   12....       LCALL     ?XLOAD_R0123
   \   00001C   90....       MOV       DPTR,#ZDApp_SavedPollRate
   \   00001F   12....       LCALL     ?XSTORE_R0123
   2160                 savedResponseRate = zgResponsePollRate;
   \   000022   90....       MOV       DPTR,#zgResponsePollRate
   \   000025   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000028   90....       MOV       DPTR,#savedResponseRate
   \   00002B   E8           MOV       A,R0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E9           MOV       A,R1
   \   00002F   F0           MOVX      @DPTR,A
   2161                 savedQueuedPollRate = zgQueuedPollRate;
   \   000030   90....       MOV       DPTR,#zgQueuedPollRate
   \   000033   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   2162              }
   \                     ??CrossCallReturnLabel_115:
   \   000036   90....       MOV       DPTR,#savedQueuedPollRate
   \   000039   E8           MOV       A,R0
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   A3           INC       DPTR
   \   00003C   E9           MOV       A,R1
   \   00003D   F0           MOVX      @DPTR,A
   2163          
   2164              // Disable polling
   2165              NLME_SetPollRate(0);
   \                     ??ZDApp_LeaveReset_0:
   \   00003E                ; Setup parameters for call to function NLME_SetPollRate
   \   00003E   90....       MOV       DPTR,#__Constant_0
   \   000041   12....       LCALL     ?XLOAD_R2345
   \   000044   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   2166              NLME_SetResponseRate(0);
   \   000047                ; Setup parameters for call to function NLME_SetResponseRate
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     ?Subroutine36 & 0xFFFF
   2167              NLME_SetQueuedPollRate(0);
   2168            }
   2169          
   2170            if ( ra == TRUE )
   \                     ??CrossCallReturnLabel_40:
   \   00004E   7401         MOV       A,#0x1
   \   000050   6E           XRL       A,R6
   \   000051   701E         JNZ       ??ZDApp_LeaveReset_1
   2171            {
   2172              devState = DEV_NWK_DISC;
   \   000053   90....       MOV       DPTR,#devState
   \   000056   7402         MOV       A,#0x2
   \   000058   F0           MOVX      @DPTR,A
   2173              devStartMode = MODE_REJOIN;
   \   000059   90....       MOV       DPTR,#devStartMode
   \   00005C   04           INC       A
   \   00005D   F0           MOVX      @DPTR,A
   2174              _tmpRejoinState = true;
   \   00005E   90....       MOV       DPTR,#_tmpRejoinState
   \   000061   7401         MOV       A,#0x1
   \   000063   12....       LCALL     ?Subroutine10 & 0xFFFF
   2175          
   2176              // For rejoin, specify the extended PANID to look for
   2177              osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   2178          
   2179              _NIB.nwkState = NWK_DISC;
   \                     ??CrossCallReturnLabel_3:
   \   000066   90....       MOV       DPTR,#_NIB + 35
   \   000069   7402         MOV       A,#0x2
   \   00006B   F0           MOVX      @DPTR,A
   2180               NLME_NwkDiscTerm();
   \   00006C                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   00006C   12....       LCALL     ?Subroutine30 & 0xFFFF
   2181          
   2182              ZDApp_NetworkInit((uint16)(NWK_START_DELAY + ((uint16) (osal_rand() & EXTENDED_JOINING_RANDOM_MASK ))));
   2183            }
   \                     ??CrossCallReturnLabel_33:
   \   00006F   8007         SJMP      ??ZDApp_LeaveReset_2
   2184            else
   2185            {
   2186              ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \                     ??ZDApp_LeaveReset_1:
   \   000071                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000071   7A88         MOV       R2,#-0x78
   \   000073   7B13         MOV       R3,#0x13
   \   000075   12....       LCALL     `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   2187            }
   2188          }
   \                     ??ZDApp_LeaveReset_2:
   \   000078   02....       LJMP      ??Subroutine72_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000003   7A00         MOV       R2,#0x0
   \   000005   7B00         MOV       R3,#0x0
   \   000007   12....       LCALL     `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
   2189          
   2190          /*********************************************************************
   2191           * @fn      ZDApp_LeaveUpdate
   2192           *
   2193           * @brief   Update local device data related to leaving device.
   2194           *
   2195           * @param   nwkAddr        - NWK address of leaving device
   2196           * @param   extAddr        - EXT address of leaving device
   2197           * @param   removeChildren - remove children of leaving device
   2198           * @param   rejoin         - if device will rejoin or not
   2199           *
   2200           * @return  none
   2201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2202          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   2203                                  uint8 removeChildren, uint8 rejoin )
   2204          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2205            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   2206            // Remove Apps Key for leaving device
   2207            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000012                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000012   EC           MOV       A,R4
   \   000013   FA           MOV       R2,A
   \   000014   ED           MOV       A,R5
   \   000015   FB           MOV       R3,A
   \   000016   12....       LCALL     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   2208          
   2209            // Clear SECURITY bit from Address Manager
   2210            ZDSecMgrAddrClear( extAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   2211          
   2212            if ( pbindRemoveDev )
   \   000020   90....       MOV       DPTR,#pbindRemoveDev
   \   000023   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000026   6032         JZ        ??ZDApp_LeaveUpdate_0
   2213            {
   2214              zAddrType_t devAddr;
   2215          
   2216              // Remove bind entry and all related data
   2217              devAddr.addrMode = Addr64Bit;
   \   000028   7408         MOV       A,#0x8
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   7403         MOV       A,#0x3
   \   00002F   F0           MOVX      @DPTR,A
   2218              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   8E..         MOV       ?V4,R6
   \   000032   8F..         MOV       ?V5,R7
   \   000034   75..00       MOV       ?V6,#0x0
   \   000037   78..         MOV       R0,#?V4
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003C   7C08         MOV       R4,#0x8
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7403         MOV       A,#0x3
   \   000042   12....       LCALL     ?XSTACK_DISP101_8
   \   000045   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   2219          
   2220              pbindRemoveDev(&devAddr);
   \   00004D                ; Setup parameters for indirect call
   \   00004D   AA..         MOV       R2,?XSP + 0
   \   00004F   AB..         MOV       R3,?XSP + 1
   \   000051   90....       MOV       DPTR,#pbindRemoveDev
   \   000054   12....       LCALL     ?Subroutine42 & 0xFFFF
   2221            }
   \                     ??CrossCallReturnLabel_93:
   \   000057   12....       LCALL     ?CALL_IND
   2222          
   2223            // Remove if child
   2224            if ( ZSTACK_ROUTER_BUILD )
   2225            {
   2226              // Router shall notify the Trust Center that a child End Device or
   2227              // a neighbor Router (within radius=1) has left the network
   2228              APSME_UpdateDeviceReq_t req;
   2229          
   2230              // forward authorization to the Trust Center
   2231              req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   2232              req.devAddr    = nwkAddr;
   2233              req.devExtAddr = extAddr;
   2234              req.status = APSME_UD_DEVICE_LEFT;
   2235          
   2236              if ( rejoin == FALSE )
   2237              {
   2238                if(!APSME_IsDistributedSecurity())
   2239                {
   2240                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2241                  {
   2242                    uint8 found;
   2243                    APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   2244                    
   2245                    APSME_SearchTCLinkKeyEntry(extAddr,&found,NULL);
   2246                    
   2247                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   2248                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   2249                    // with legacy Coordinator devices which can only handle one or the other.
   2250                    if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY) && ( found == FALSE ) )
   2251                    {
   2252                      req.apsSecure = FALSE;
   2253          
   2254                      // send and APSME_UPDATE_DEVICE request to the trust center
   2255                      APSME_UpdateDeviceReq( &req );
   2256                    }
   2257          
   2258                    // send the message APS encrypted
   2259                    req.apsSecure = TRUE;
   2260          
   2261                    // send and APSME_UPDATE_DEVICE request to the trust center
   2262                    APSME_UpdateDeviceReq( &req );
   2263                  }
   2264                  else
   2265                  {
   2266                    req.apsSecure = FALSE;
   2267          
   2268                    // send and APSME_UPDATE_DEVICE request to the trust center
   2269                    APSME_UpdateDeviceReq( &req );
   2270                  }
   2271                }
   2272              }
   2273          
   2274              NLME_RemoveChild( extAddr, removeChildren );
   2275            }
   2276          
   2277            // Remove Routing table related entry
   2278            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_0:
   \   00005A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   AA..         MOV       R2,?V0
   \   00005E   AB..         MOV       R3,?V1
   \   000060   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2279          
   2280            // Remove entry from neighborTable
   2281            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   000063                ; Setup parameters for call to function nwkNeighborRemove
   \   000063   90....       MOV       DPTR,#_NIB + 33
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FC           MOV       R4,A
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FD           MOV       R5,A
   \   00006B   AA..         MOV       R2,?V0
   \   00006D   AB..         MOV       R3,?V1
   \   00006F   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2282          
   2283            // Schedule to save data to NV
   2284            ZDApp_NwkWriteNVRequest();
   \   000072                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   000072   12....       LCALL     `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2285          }
   \   000075   7409         MOV       A,#0x9
   \   000077   02....       LJMP      ??Subroutine56_0 & 0xFFFF
   2286          
   2287          /*********************************************************************
   2288           * @fn      ZDApp_NetworkDiscoveryReq
   2289           *
   2290           * @brief   Request a network discovery.
   2291           *
   2292           * @param  scanChannels -
   2293           * @param  scanDuration -
   2294           *
   2295           * @return  ZStatus_t
   2296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2297          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2298          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2299            // Setup optional filters - tbd
   2300          
   2301            // Request NLME network discovery
   2302            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL     `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   2303          }
   2304          
   2305          /*********************************************************************
   2306           * @fn      ZDApp_JoinReq
   2307           *
   2308           * @brief   Request the device to join a parent in a network.
   2309           *
   2310           * @param   channel -
   2311           * @param   panID -
   2312           *
   2313           * @return  ZStatus_t
   2314           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine52_0
   \   000002                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2315          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2316                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   2318            // Sync up the node with the stack profile (In the case where a pro device
   2319            // joins a non-pro network, or verse versa)
   2320            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV       A,#0xf
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   12....       LCALL     `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2321          
   2322            // Request NLME Join Request
   2323            return NLME_JoinRequest(extendedPanID, panID,channel,
   2324                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2325                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV       A,#0xe
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V3,A
   \   000021   78..         MOV       R0,#?V3
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV       A,#0xd
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   \   000034   78..         MOV       R0,#?V3
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV       R1,?V2
   \   00003B   AC..         MOV       R4,?V0
   \   00003D   AD..         MOV       R5,?V1
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   02....       LJMP      ?Subroutine5 & 0xFFFF
   2326          
   2327          }
   2328          
   2329          /*********************************************************************
   2330           * @fn      ZDApp_DeviceConfigured
   2331           *
   2332           * @brief   Check to see if the local device is configured (i.e., part
   2333           *          of a network).
   2334           *
   2335           * @param   none
   2336           *
   2337           * @return  TRUE if configured. FALSE, otherwise.
   2338           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2339          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2340          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2341            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   74FE         MOV       A,#-0x2
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   04           INC       A
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
   2342          
   2343            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2344                          sizeof( uint16), &nwkAddr );
   \                     ??CrossCallReturnLabel_5:
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   75..02       MOV       ?V0,#0x2
   \   00001E   75..00       MOV       ?V1,#0x0
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   7C14         MOV       R4,#0x14
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A21         MOV       R2,#0x21
   \   00002C   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   2345          
   2346            // Does the NIB have anything more than default?
   2347            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000032   85..82       MOV       DPL,?XSP + 0
   \   000035   85..83       MOV       DPH,?XSP + 1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   64FE         XRL       A,#0xfe
   \   00003B   7003         JNZ       ??ZDApp_DeviceConfigured_0
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F4           CPL       A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000040   7004         JNZ       ??ZDApp_DeviceConfigured_1
   \   000042   7900         MOV       R1,#0x0
   \   000044   8002         SJMP      ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000046   7901         MOV       R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000048   7402         MOV       A,#0x2
   \   00004A   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   2348          }
   2349          
   2350          /*********************************************************************
   2351           * CALLBACK FUNCTIONS
   2352           */
   2353          
   2354          
   2355          /*********************************************************************
   2356           * @fn      ZDApp_SendEventMsg()
   2357           *
   2358           * @brief
   2359           *
   2360           *   Sends a Network Join message
   2361           *
   2362           * @param  cmd - command ID
   2363           * @param  len - length (in bytes) of the buf field
   2364           * @param  buf - buffer for the rest of the message.
   2365           *
   2366           * @return  none
   2367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2368          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2369          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   2370            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000006                ; Setup parameters for call to function ZDApp_SendMsg
   \   000006   FB           MOV       R3,A
   \   000007   E9           MOV       A,R1
   \   000008   FA           MOV       R2,A
   \   000009   12....       LCALL     ?Subroutine27 & 0xFFFF
   2371          }
   \                     ??CrossCallReturnLabel_27:
   \   00000C   02....       LJMP      ??Subroutine49_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV       DPTR,#ZDAppTaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   \   000008   22           RET
   2372          
   2373          /*********************************************************************
   2374           * @fn      ZDApp_SendMsg()
   2375           *
   2376           * @brief   Sends a OSAL message
   2377           *
   2378           * @param  taskID - Where to send the message
   2379           * @param  cmd - command ID
   2380           * @param  len - length (in bytes) of the buf field
   2381           * @param  buf - buffer for the rest of the message.
   2382           *
   2383           * @return  none
   2384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2385          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V5,R3
   \   00000B   8C..         MOV       ?V2,R4
   \   00000D   8D..         MOV       ?V3,R5
   2387            osal_event_hdr_t *msgPtr;
   2388          
   2389            // Send the address to the task
   2390            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   AE..         MOV       R6,?V5
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   EB           MOV       A,R3
   \   000012   FA           MOV       R2,A
   \   000013   7B00         MOV       R3,#0x0
   \   000015   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV       ?V0,R2
   \   00001A   8B..         MOV       ?V1,R3
   2391            if ( msgPtr )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6035         JZ        ??ZDApp_SendMsg_0
   2392            {
   2393              if ( (len > 0) && (buf != NULL) )
   \   000020   EE           MOV       A,R6
   \   000021   6020         JZ        ??ZDApp_SendMsg_1
   \   000023   E5..         MOV       A,?V2
   \   000025   45..         ORL       A,?V3
   \   000027   601A         JZ        ??ZDApp_SendMsg_1
   2394                osal_memcpy( msgPtr, buf, len );
   \   000029                ; Setup parameters for call to function osal_memcpy
   \   000029   85....       MOV       ?V8,?V2
   \   00002C   85....       MOV       ?V9,?V3
   \   00002F   75..00       MOV       ?V10,#0x0
   \   000032   78..         MOV       R0,#?V8
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   EE           MOV       A,R6
   \   000038   FC           MOV       R4,A
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   2395          
   2396              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E5..         MOV       A,?V6
   \   00004B   F0           MOVX      @DPTR,A
   2397              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   00004C                ; Setup parameters for call to function osal_msg_send
   \   00004C   AA..         MOV       R2,?V0
   \   00004E   AB..         MOV       R3,?V1
   \   000050   A9..         MOV       R1,?V4
   \   000052   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2398            }
   2399          }
   \                     ??ZDApp_SendMsg_0:
   \   000055   7F0B         MOV       R7,#0xb
   \   000057   02....       LJMP      ?BANKED_LEAVE_XDATA
   2400          
   2401          /*********************************************************************
   2402           * Call Back Functions from NWK  - API
   2403           */
   2404          
   2405          /*********************************************************************
   2406           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2407           *
   2408           * @brief       This function returns a choice of PAN to join.
   2409           *
   2410           * @param       status - return status of the nwk discovery confirm
   2411           *
   2412           * @return      ZStatus_t
   2413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2414          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2415          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2416            osal_event_hdr_t msg;
   2417          
   2418            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2419            // Send ZDO_MGMT_NWK_DISC_RSP back
   2420          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2421            if ( zdappMgmtNwkDiscReqInProgress )
   \   000011   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6007         JZ        ??ZDO_NetworkDiscoveryConfirmCB_0
   2422            {
   2423              zdappMgmtNwkDiscReqInProgress = false;
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   2424              ZDO_FinishProcessingMgmtNwkDiscReq();
   \   000019                ; Setup parameters for call to function ZDO_FinishProcessingMgmtNwkDiscReq
   \   000019   12....       LCALL     `??ZDO_FinishProcessingMgmtNwkDiscReq::?relay`; Banked call to: ZDO_FinishProcessingMgmtNwkDiscReq
   \   00001C   8023         SJMP      ??CrossCallReturnLabel_28
   2425            }
   2426            else
   2427          #endif
   2428            {
   2429              // Pass the confirm to another task if it registers the callback
   2430              // Otherwise, pass the confirm to ZDApp.
   2431              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 4
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000024   6009         JZ        ??ZDO_NetworkDiscoveryConfirmCB_1
   2432              {
   2433                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   \   00002D   8012         SJMP      ??CrossCallReturnLabel_28
   2434              }
   2435              else
   2436              {
   2437                // Otherwise, send scan confirm to ZDApp task to proceed
   2438                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   2439          
   2440                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000036                ; Setup parameters for call to function ZDApp_SendMsg
   \   000036   04           INC       A
   \   000037   12....       LCALL     ?XSTACK_DISP102_8
   \   00003A   7B02         MOV       R3,#0x2
   \   00003C   7A01         MOV       R2,#0x1
   \   00003E   12....       LCALL     ?Subroutine27 & 0xFFFF
   2441              }
   2442            }
   2443            return (ZSuccess);
   \                     ??CrossCallReturnLabel_28:
   \   000041   7900         MOV       R1,#0x0
   \   000043   7403         MOV       A,#0x3
   \   000045   02....       LJMP      ?Subroutine3 & 0xFFFF
   2444          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   E582         MOV       A,DPL
   \   00000A   4583         ORL       A,DPH
   \   00000C   22           RET
   2445          
   2446          /*********************************************************************
   2447           * @fn          ZDApp_NwkDescListProcessing
   2448           *
   2449           * @brief       This function process the network discovery result and select
   2450           *              a parent device to join itself.
   2451           *
   2452           * @param       none
   2453           *
   2454           * @return      ZStatus_t
   2455           */
   2456          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2457          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2458          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2459            networkDesc_t *pNwkDesc;
   2460            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV       ?V1,#0x0
   2461            uint8 stackProfile;
   2462            uint8 stackProfilePro;
   2463            uint8 selected;
   2464          
   2465            // Count the number of nwk descriptors in the list
   2466            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV       ?V2,R2
   \   00000D   8B..         MOV       ?V3,R3
   \   00000F   AE..         MOV       R6,?V2
   \   000011   AF..         MOV       R7,?V3
   \   000013   8005         SJMP      ??CrossCallReturnLabel_101
   2467            while (pNwkDesc)
   2468            {
   2469              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC       ?V1
   2470              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL     ?Subroutine23 & 0xFFFF
   2471            }
   \                     ??CrossCallReturnLabel_101:
   \   00001A   EE           MOV       A,R6
   \   00001B   4F           ORL       A,R7
   \   00001C   70F7         JNZ       ??ZDApp_NwkDescListProcessing_0
   2472          
   2473            // process discovery results
   2474            stackProfilePro = FALSE;
   \   00001E   75..00       MOV       ?V0,#0x0
   2475            selected = FALSE;
   2476          
   2477          
   2478            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV       ?V2,#0x0
   2479            {
   2480              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL     `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
   \   00002B   AE..         MOV       R6,?V4
   \   00002D   AF..         MOV       R7,?V5
   2481              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV       ?V3,#0x0
   \   000032   8019         SJMP      ??CrossCallReturnLabel_102
   2482              {
   2483                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2484                {
   2485                  // If the extended Pan ID is commissioned to a non zero value
   2486                  // Only join the Pan that has match EPID
   2487                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2488                    continue;
   2489          
   2490                }
   2491                else if ( zgConfigPANID != 0xFFFF )
   2492                {
   2493                  // PAN Id is preconfigured. check if it matches
   2494                  if ( pNwkDesc->panId != zgConfigPANID )
   2495                    continue;
   2496                }
   2497          
   2498                if ( pNwkDesc->chosenRouter != _NIB.nwkCoordAddress || _NIB.nwkCoordAddress == INVALID_NODE_ADDR )
   2499                {
   2500                  // check that network is allowing joining
   2501                  if ( ZSTACK_ROUTER_BUILD )
   2502                  {
   2503                    if ( stackProfilePro == FALSE )
   2504                    {
   2505                      if ( !pNwkDesc->routerCapacity )
   2506                      {
   2507                        continue;
   2508                      }
   2509                    }
   2510                    else
   2511                    {
   2512                      if ( !pNwkDesc->deviceCapacity )
   2513                      {
   2514                        continue;
   2515                      }
   2516                    }
   2517                  }
   2518                  else if ( ZSTACK_END_DEVICE_BUILD )
   2519                  {
   2520                    if ( !pNwkDesc->deviceCapacity )
   2521                    {
   2522                      continue;
   2523                    }
   2524                  }
   2525                }
   2526          
   2527                // check version of zigbee protocol
   2528                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2529                  continue;
   2530          
   2531                // check version of stack profile
   2532                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2533                {
   2534                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2535                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6402         XRL       A,#0x2
   \   000037   7008         JNZ       ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV       A,#0x1
   \   00003B   68           XRL       A,R0
   \   00003C   7003         JNZ       ??ZDApp_NwkDescListProcessing_3
   2536                  {
   2537                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV       ?V0,#0x1
   2538                  }
   2539          
   2540                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV       A,?V2
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC       ?V3
   \   00004A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00004D   E5..         MOV       A,?V3
   \   00004F   C3           CLR       C
   \   000050   95..         SUBB      A,?V1
   \   000052   4003         JC        $+5
   \   000054   02....       LJMP      ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00005E   E9           MOV       A,R1
   \   00005F   6401         XRL       A,#0x1
   \   000061   7013         JNZ       ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV       A,R6
   \   000064   240B         ADD       A,#0xb
   \   000066   FC           MOV       R4,A
   \   000067   E4           CLR       A
   \   000068   3F           ADDC      A,R7
   \   000069   FD           MOV       R5,A
   \   00006A   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   00006C   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006E   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000071   E9           MOV       A,R1
   \   000072   701D         JNZ       ??ZDApp_NwkDescListProcessing_9
   \   000074   80D2         SJMP      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000076   90....       MOV       DPTR,#zgConfigPANID
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F4           CPL       A
   \   00007B   7003         JNZ       ??ZDApp_NwkDescListProcessing_10
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F4           CPL       A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000080   600F         JZ        ??ZDApp_NwkDescListProcessing_9
   \   000082   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000085   90....       MOV       DPTR,#zgConfigPANID
   \   000088   E0           MOVX      A,@DPTR
   \   000089   68           XRL       A,R0
   \   00008A   7003         JNZ       ??ZDApp_NwkDescListProcessing_11
   \   00008C   A3           INC       DPTR
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   00008F   70B7         JNZ       ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000091   90....       MOV       DPTR,#_NIB + 23
   \   000094   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000097   E0           MOVX      A,@DPTR
   \   000098   68           XRL       A,R0
   \   000099   7003         JNZ       ??ZDApp_NwkDescListProcessing_12
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   00009E   700A         JNZ       ??ZDApp_NwkDescListProcessing_13
   \   0000A0   74FE         MOV       A,#-0x2
   \   0000A2   68           XRL       A,R0
   \   0000A3   7003         JNZ       ??ZDApp_NwkDescListProcessing_14
   \   0000A5   74FF         MOV       A,#-0x1
   \   0000A7   69           XRL       A,R1
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000A8   700B         JNZ       ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000AA   8E82         MOV       DPL,R6
   \   0000AC   8F83         MOV       DPH,R7
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   6093         JZ        ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000B5   8E82         MOV       DPL,R6
   \   0000B7   8F83         MOV       DPH,R7
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F8           MOV       R0,A
   \   0000C0   90....       MOV       DPTR,#_NIB + 17
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   68           XRL       A,R0
   \   0000C5   7081         JNZ       ??ZDApp_NwkDescListProcessing_6
   \   0000C7   8E82         MOV       DPL,R6
   \   0000C9   8F83         MOV       DPH,R7
   \   0000CB   A3           INC       DPTR
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   F8           MOV       R0,A
   \   0000D3   90....       MOV       DPTR,#zgStackProfile
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   68           XRL       A,R0
   \   0000D8   6032         JZ        ??ZDApp_NwkDescListProcessing_5
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   6401         XRL       A,#0x1
   \   0000DD   6003         JZ        $+5
   \   0000DF   02....       LJMP      ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000E2   7402         MOV       A,#0x2
   \   0000E4   68           XRL       A,R0
   \   0000E5   6003         JZ        $+5
   \   0000E7   02....       LJMP      ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000EA   02....       LJMP      ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2541                  {
   2542                    continue;
   2543                  }
   2544                }
   2545          
   2546                break;
   2547              }
   2548          
   2549              if (i < ResultCount)
   2550              {
   2551               selected = TRUE;
   2552                break;
   2553              }
   2554          
   2555              // break if selected or stack profile pro wasn't found
   2556              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000ED   E5..         MOV       A,?V0
   \   0000EF   600C         JZ        ??ZDApp_NwkDescListProcessing_16
   2557              {
   2558                break;
   2559              }
   2560            }
   \   0000F1   05..         INC       ?V2
   \   0000F3   E5..         MOV       A,?V2
   \   0000F5   C3           CLR       C
   \   0000F6   9402         SUBB      A,#0x2
   \   0000F8   5003         JNC       $+5
   \   0000FA   02....       LJMP      ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2561          
   2562            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   0000FD   E5..         MOV       A,?V1
   \   0000FF   65..         XRL       A,?V3
   \   000101   7009         JNZ       ??ZDApp_NwkDescListProcessing_5
   2563            {
   2564              nwk_desc_list_free();
   \   000103                ; Setup parameters for call to function nwk_desc_list_free
   \   000103   12....       LCALL     `??nwk_desc_list_free::?relay`; Banked call to: nwk_desc_list_free
   2565              return (NULL);   // couldn't find appropriate PAN to join !
   \   000106   7A00         MOV       R2,#0x0
   \   000108   7B00         MOV       R3,#0x0
   \   00010A   8004         SJMP      ??ZDApp_NwkDescListProcessing_17
   2566            }
   2567            else
   2568            {
   2569              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   00010C   EE           MOV       A,R6
   \   00010D   FA           MOV       R2,A
   \   00010E   EF           MOV       A,R7
   \   00010F   FB           MOV       R3,A
   2570            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   000110   02....       LJMP      ?Subroutine1 & 0xFFFF
   2571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   EE           MOV       A,R6
   \   000001   2414         ADD       A,#0x14
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009                REQUIRE ??Subroutine65_0
   \   000009                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine68_0
   \   000004                ; // Fall through to label ??Subroutine68_0
   2572          
   2573          /*********************************************************************
   2574           * @fn          ZDO_NetworkFormationConfirmCB
   2575           *
   2576           * @brief       This function reports the results of the request to
   2577           *              initialize a coordinator in a network.
   2578           *
   2579           * @param       Status - Result of NLME_NetworkFormationRequest()
   2580           *
   2581           * @return      none
   2582           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2583          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2584          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   2585            nwkStatus = (byte)Status;
   \   00000B   90....       MOV       DPTR,#nwkStatus
   \   00000E   F0           MOVX      @DPTR,A
   2586          
   2587            if ( Status == ZSUCCESS )
   \   00000F   6003         JZ        $+5
   \   000011   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2588            {
   2589              bdb_setNodeIsOnANetwork(TRUE);
   \   000014                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   000014   7901         MOV       R1,#0x1
   \   000016   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
   2590              
   2591              if(ZG_DEVICE_COORDINATOR_TYPE)
   \   000019   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_1
   2592              {
   2593                // LED on shows Coordinator started
   2594                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2595          
   2596                zdoHalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   2597          
   2598                  #if defined ( ZBIT )
   2599                      SIM_SetColor(0xd0ffd0);
   2600                  #endif
   2601          
   2602                if ( devState == DEV_HOLD )
   \   00001F   90....       MOV       DPTR,#devState
   \   000022   E0           MOVX      A,@DPTR
   \   000023   7012         JNZ       ??ZDO_NetworkFormationConfirmCB_2
   2603                {
   2604                  ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000025                ; Setup parameters for call to function ZDApp_ChangeState
   \   000025   7908         MOV       R1,#0x8
   \   000027   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2605                }
   2606              }
   2607          
   2608              if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_NetworkFormationConfirmCB_1:
   \   00002A   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   6007         JZ        ??ZDO_NetworkFormationConfirmCB_2
   \   000030   6401         XRL       A,#0x1
   \   000032   6003         JZ        $+5
   \   000034   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2609              {
   2610                uint8 x;
   2611                uint8 tmpKey[SEC_KEY_LEN] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
   \                     ??ZDO_NetworkFormationConfirmCB_2:
   \   000037   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00003A   7401         MOV       A,#0x1
   \   00003C   12....       LCALL     ?XSTACK_DISP102_8
   \   00003F   7410         MOV       A,#0x10
   \   000041   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2612                
   2613                if(APSME_IsDistributedSecurity())
   \   000044                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000044   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000047   E9           MOV       A,R1
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??ZDO_NetworkFormationConfirmCB_0 & 0xFFFF
   2614                {
   2615                  //Check if we have an extended PANID assigned
   2616                  if(nwk_ExtPANIDValid( _NIB.extendedPANID ) == false)
   \   00004D                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   00004D   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   00004F   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   000051   12....       LCALL     `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000054   E9           MOV       A,R1
   \   000055   700B         JNZ       ??ZDO_NetworkFormationConfirmCB_3
   2617                  {
   2618                    //Set the extended PANID as the extended address
   2619                    osal_cpyExtAddr( _NIB.extendedPANID, aExtendedAddress );
   \   000057                ; Setup parameters for call to function sAddrExtCpy
   \   000057   7C..         MOV       R4,#aExtendedAddress & 0xff
   \   000059   7D..         MOV       R5,#(aExtendedAddress >> 8) & 0xff
   \   00005B   7A..         MOV       R2,#(_NIB + 53) & 0xff
   \   00005D   7B..         MOV       R3,#((_NIB + 53) >> 8) & 0xff
   \   00005F   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2620                  } 
   2621                  
   2622                  ZMacSetReq(MAC_SUPERFRAME_PAN_COORD,0);
   \                     ??ZDO_NetworkFormationConfirmCB_3:
   \   000062                ; Setup parameters for call to function ZMacSetReq
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   79F0         MOV       R1,#-0x10
   \   000068   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2623                  
   2624                  //Set the MAC address
   2625                  ZMacSetReq( ZMacShortAddress, (uint8 *)&(_NIB.nwkDevAddress) );
   \   00006B                ; Setup parameters for call to function ZMacSetReq
   \   00006B   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   00006D   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   00006F   7953         MOV       R1,#0x53
   \   000071   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2626          
   2627                  if ( _NIB.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   2628                    x = true;
   2629                  else
   2630                    x = false;
   \   000074   90....       MOV       DPTR,#_NIB + 14
   \   000077   E0           MOVX      A,@DPTR
   \   000078   A2E3         MOV       C,0xE0 /* A   */.3
   \   00007A   5004         JNC       ??ZDO_NetworkFormationConfirmCB_4
   \   00007C   D2F0         SETB      B.0
   \   00007E   8002         SJMP      ??ZDO_NetworkFormationConfirmCB_5
   \                     ??ZDO_NetworkFormationConfirmCB_4:
   \   000080   C2F0         CLR       B.0
   \                     ??ZDO_NetworkFormationConfirmCB_5:
   \   000082   A2F0         MOV       C,B.0
   \   000084   E4           CLR       A
   \   000085   33           RLC       A
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   F0           MOVX      @DPTR,A
   2631                  ZMacSetReq( ZMacRxOnIdle, &x );
   \   00008D                ; Setup parameters for call to function ZMacSetReq
   \   00008D   AA..         MOV       R2,?XSP + 0
   \   00008F   AB..         MOV       R3,?XSP + 1
   \   000091   7952         MOV       R1,#0x52
   \   000093   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2632          
   2633                  // Change NIB state to router for restore
   2634                  _NIB.nwkState = NWK_ROUTER;
   \   000096   90....       MOV       DPTR,#_NIB + 35
   \   000099   7408         MOV       A,#0x8
   \   00009B   F0           MOVX      @DPTR,A
   2635                  NLME_SetAssocFlags();
   \   00009C                ; Setup parameters for call to function NLME_SetAssocFlags
   \   00009C   12....       LCALL     `??NLME_SetAssocFlags::?relay`; Banked call to: NLME_SetAssocFlags
   2636          
   2637                  //Restore the nwk security material using the generic index
   2638                  ZDApp_RestoreNwkSecMaterial();
   \   00009F                ; Setup parameters for call to function ZDApp_RestoreNwkSecMaterial
   \   00009F   12....       LCALL     `??ZDApp_RestoreNwkSecMaterial::?relay`; Banked call to: ZDApp_RestoreNwkSecMaterial
   2639                  
   2640                  //Be sure to store the nwk FrameCounter if
   2641                  if(nwkFrameCounter == 0)
   \   0000A2   90....       MOV       DPTR,#nwkFrameCounter
   \   0000A5   12....       LCALL     ?XLOAD_R0123
   \   0000A8   E8           MOV       A,R0
   \   0000A9   49           ORL       A,R1
   \   0000AA   4A           ORL       A,R2
   \   0000AB   4B           ORL       A,R3
   \   0000AC   700D         JNZ       ??ZDO_NetworkFormationConfirmCB_6
   2642                  {
   2643                    nwkFrameCounter = 1;
   \   0000AE   90....       MOV       DPTR,#nwkFrameCounter
   \   0000B1   7401         MOV       A,#0x1
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
   \   0000B7   A3           INC       DPTR
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   F0           MOVX      @DPTR,A
   2644                  }
   2645                  
   2646                  osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV | ZDO_FRAMECOUNTER_CHANGE);
   \                     ??ZDO_NetworkFormationConfirmCB_6:
   \   0000BB                ; Setup parameters for call to function osal_set_event
   \   0000BB   7A00         MOV       R2,#0x0
   \   0000BD   7B03         MOV       R3,#0x3
   \   0000BF   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   2647                  
   2648                  ZDSecMgrGenerateRndKey(tmpKey);
   \                     ??CrossCallReturnLabel_129:
   \   0000C2                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   0000C2   7401         MOV       A,#0x1
   \   0000C4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C7   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2649                   
   2650                  //Set the nwk key as the default and initialize the keySeqNum
   2651                  SSP_UpdateNwkKey( tmpKey, 0 );
   \   0000CA                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000CA   7900         MOV       R1,#0x0
   \   0000CC   7401         MOV       A,#0x1
   \   0000CE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D1   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   2652                  if ( !_NIB.nwkKeyLoaded )
   \   0000D4   90....       MOV       DPTR,#_NIB + 61
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   7005         JNZ       ??ZDO_NetworkFormationConfirmCB_7
   2653                  {
   2654                    SSP_SwitchNwkKey( 0 );
   \   0000DA                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000DA   7900         MOV       R1,#0x0
   \   0000DC   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2655                  }
   2656                  
   2657                  // Clear copy in RAM after use 
   2658                  osal_memset(tmpKey,0,SEC_KEY_LEN);
   \                     ??ZDO_NetworkFormationConfirmCB_7:
   \   0000DF                ; Setup parameters for call to function osal_memset
   \   0000DF   7C10         MOV       R4,#0x10
   \   0000E1   7D00         MOV       R5,#0x0
   \   0000E3   7900         MOV       R1,#0x0
   \   0000E5   7401         MOV       A,#0x1
   \   0000E7   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EA   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2659                  
   2660                  //Success formation of distributed nwk
   2661                  bdb_nwkFormationAttempt(TRUE);
   \   0000ED                ; Setup parameters for call to function bdb_nwkFormationAttempt
   \   0000ED   7901         MOV       R1,#0x1
   \   0000EF   12....       LCALL     `??bdb_nwkFormationAttempt::?relay`; Banked call to: bdb_nwkFormationAttempt
   2662                }
   2663              }
   2664            }
   2665          
   2666            else
   2667            {
   2668              #if defined(BLINK_LEDS)
   2669                zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2670              #endif
   2671            }
   2672          
   2673          
   2674            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   0000F2                ; Setup parameters for call to function osal_set_event
   \   0000F2   7A02         MOV       R2,#0x2
   \   0000F4   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   2675          }
   \                     ??CrossCallReturnLabel_126:
   \   0000F7   7411         MOV       A,#0x11
   \   0000F9   02....       LJMP      ??Subroutine48_0 & 0xFFFF
   2676          
   2677          /****************************************************************************
   2678           * @fn          ZDApp_beaconIndProcessing
   2679           *
   2680           * @brief       This function processes the incoming beacon indication.
   2681           *
   2682           *              When another task (MT or App) is registered to process
   2683           *              beacon indication themselves, this function will parse the
   2684           *              beacon payload and pass the beacon descriptor to that task
   2685           *              If no other tasks registered, this function will process
   2686           *              the beacon payload and generate the network descriptor link
   2687           *              list.
   2688           *
   2689           * @param
   2690           *
   2691           * @return      none
   2692           *
   2693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2694          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2696            // Pass the beacon Indication to another task if it registers the callback
   2697            // Otherwise, process the beacon notification here.
   2698            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV       DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   6006         JZ        ??ZDO_beaconNotifyIndCB_0
   2699            {
   2700              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL     ?CALL_IND
   \   000014   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2701            }
   2702            else
   2703            {
   2704              networkDesc_t *pNwkDesc;
   2705              networkDesc_t *pLastNwkDesc;
   2706              uint8 found = false;
   2707          
   2708              // Add the network to the Network Descriptor List
   2709              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV       DPTR,#NwkDescList
   \   00001A   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2710              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_98:
   \   00001D   90....       MOV       DPTR,#NwkDescList
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F5..         MOV       ?V2,A
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F5..         MOV       ?V3,A
   \   000027   EA           MOV       A,R2
   \   000028   2404         ADD       A,#0x4
   \   00002A   F5..         MOV       ?V6,A
   \   00002C   E4           CLR       A
   \   00002D   35..         ADDC      A,?V1
   \   00002F   F5..         MOV       ?V7,A
   \   000031   EA           MOV       A,R2
   \   000032   2402         ADD       A,#0x2
   \   000034   F5..         MOV       ?V4,A
   \   000036   E4           CLR       A
   \   000037   35..         ADDC      A,?V1
   \   000039   F5..         MOV       ?V5,A
   \   00003B   802B         SJMP      ??CrossCallReturnLabel_103
   2711              while (pNwkDesc)
   2712              {
   2713                if ((pNwkDesc->panId == pBeacon->panID) &&
   2714                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00003D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000040   85..82       MOV       DPL,?V4
   \   000043   85..83       MOV       DPH,?V5
   \   000046   E0           MOVX      A,@DPTR
   \   000047   68           XRL       A,R0
   \   000048   7003         JNZ       ??ZDO_beaconNotifyIndCB_3
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   69           XRL       A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00004D   7012         JNZ       ??ZDO_beaconNotifyIndCB_4
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F8           MOV       R0,A
   \   000057   85..82       MOV       DPL,?V6
   \   00005A   85..83       MOV       DPH,?V7
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   68           XRL       A,R0
   \   00005F   6067         JZ        ??ZDO_beaconNotifyIndCB_5
   2715                {
   2716                  found = true;
   2717                  break;
   2718                }
   2719                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000061   8E..         MOV       ?V2,R6
   \   000063   8F..         MOV       ?V3,R7
   2720                pNwkDesc = pNwkDesc->nextDesc;
   \   000065   12....       LCALL     ?Subroutine23 & 0xFFFF
   2721              }
   \                     ??CrossCallReturnLabel_103:
   \   000068   EE           MOV       A,R6
   \   000069   4F           ORL       A,R7
   \   00006A   70D1         JNZ       ??ZDO_beaconNotifyIndCB_2
   2722          
   2723              // If no existing descriptor found, make a new one and add to the list
   2724              if (found == false)
   2725              {
   2726                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00006C                ; Setup parameters for call to function osal_mem_alloc
   \   00006C   7A16         MOV       R2,#0x16
   \   00006E   7B00         MOV       R3,#0x0
   \   000070   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000073   8A..         MOV       ?V8,R2
   \   000075   8B..         MOV       ?V9,R3
   \   000077   AE..         MOV       R6,?V8
   \   000079   AF..         MOV       R7,?V9
   2727                if ( !pNwkDesc )
   \   00007B   EA           MOV       A,R2
   \   00007C   4F           ORL       A,R7
   \   00007D   7003         JNZ       $+5
   \   00007F   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2728                {
   2729                  // Memory alloc failed, discard this beacon
   2730                  return;
   2731                }
   2732          
   2733                // Clear the network descriptor
   2734                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000082                ; Setup parameters for call to function osal_memset
   \   000082   7C16         MOV       R4,#0x16
   \   000084   7D00         MOV       R5,#0x0
   \   000086   7900         MOV       R1,#0x0
   \   000088   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2735          
   2736                // Initialize the descriptor
   2737                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00008B   8E82         MOV       DPL,R6
   \   00008D   8F83         MOV       DPH,R7
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   74FE         MOV       A,#-0x2
   \   000098   F0           MOVX      @DPTR,A
   \   000099   A3           INC       DPTR
   \   00009A   04           INC       A
   \   00009B   F0           MOVX      @DPTR,A
   2738                pNwkDesc->chosenRouterDepth = 0xFF;
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   A3           INC       DPTR
   \   0000AA   F0           MOVX      @DPTR,A
   2739          
   2740                // Save new entry into the descriptor list
   2741                if ( !NwkDescList )
   \   0000AB   90....       MOV       DPTR,#NwkDescList
   \   0000AE   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000B1   7005         JNZ       ??ZDO_beaconNotifyIndCB_6
   2742                {
   2743                  NwkDescList = pNwkDesc;
   \   0000B3   90....       MOV       DPTR,#NwkDescList
   \   0000B6   800B         SJMP      ??ZDO_beaconNotifyIndCB_7
   2744                }
   2745                else
   2746                {
   2747                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B8   E5..         MOV       A,?V2
   \   0000BA   2414         ADD       A,#0x14
   \   0000BC   F582         MOV       DPL,A
   \   0000BE   E4           CLR       A
   \   0000BF   35..         ADDC      A,?V3
   \   0000C1   F583         MOV       DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000C3   EE           MOV       A,R6
   \   0000C4   F0           MOVX      @DPTR,A
   \   0000C5   A3           INC       DPTR
   \   0000C6   EF           MOV       A,R7
   \   0000C7   F0           MOVX      @DPTR,A
   2748                }
   2749              }
   2750          
   2751              // Update the descriptor with the incoming beacon
   2752              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C8   85..82       MOV       DPL,?V0
   \   0000CB   85..83       MOV       DPH,?V1
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000DA   A3           INC       DPTR
   \   0000DB   F0           MOVX      @DPTR,A
   2753              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000DC   E5..         MOV       A,?V0
   \   0000DE   2408         ADD       A,#0x8
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E4           CLR       A
   \   0000E2   35..         ADDC      A,?V1
   \   0000E4   F9           MOV       R1,A
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000EC   F0           MOVX      @DPTR,A
   2754              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000ED   85..82       MOV       DPL,?V6
   \   0000F0   85..83       MOV       DPH,?V7
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   8E82         MOV       DPL,R6
   \   0000F6   8F83         MOV       DPH,R7
   \   0000F8   A3           INC       DPTR
   \   0000F9   A3           INC       DPTR
   \   0000FA   F0           MOVX      @DPTR,A
   2755              pNwkDesc->panId          = pBeacon->panID;
   \   0000FB   85..82       MOV       DPL,?V4
   \   0000FE   85..83       MOV       DPH,?V5
   \   000101   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000104   8E82         MOV       DPL,R6
   \   000106   8F83         MOV       DPH,R7
   \   000108   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2756              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_132:
   \   00010B   E5..         MOV       A,?V0
   \   00010D   240C         ADD       A,#0xc
   \   00010F   F582         MOV       DPL,A
   \   000111   E4           CLR       A
   \   000112   35..         ADDC      A,?V1
   \   000114   F583         MOV       DPH,A
   \   000116   E0           MOVX      A,@DPTR
   \   000117   C0E0         PUSH      A
   \   000119   EE           MOV       A,R6
   \   00011A   2413         ADD       A,#0x13
   \   00011C   F582         MOV       DPL,A
   \   00011E   E4           CLR       A
   \   00011F   3F           ADDC      A,R7
   \   000120   F583         MOV       DPH,A
   \   000122   D0E0         POP       A
   \   000124   F0           MOVX      @DPTR,A
   2757          
   2758              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2759              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   000125   EE           MOV       A,R6
   \   000126   240B         ADD       A,#0xb
   \   000128   FA           MOV       R2,A
   \   000129   E4           CLR       A
   \   00012A   3F           ADDC      A,R7
   \   00012B   FB           MOV       R3,A
   \   00012C   8882         MOV       DPL,R0
   \   00012E   8983         MOV       DPH,R1
   \   000130   E0           MOVX      A,@DPTR
   \   000131   6401         XRL       A,#0x1
   \   000133   600E         JZ        ??ZDO_beaconNotifyIndCB_8
   2760              {
   2761                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000135                ; Setup parameters for call to function sAddrExtCpy
   \   000135   E5..         MOV       A,?V0
   \   000137   240D         ADD       A,#0xd
   \   000139   FC           MOV       R4,A
   \   00013A   E4           CLR       A
   \   00013B   35..         ADDC      A,?V1
   \   00013D   FD           MOV       R5,A
   \   00013E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000141   8009         SJMP      ??ZDO_beaconNotifyIndCB_9
   2762              }
   2763              else
   2764              {
   2765                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000143                ; Setup parameters for call to function osal_memset
   \   000143   7C08         MOV       R4,#0x8
   \   000145   7D00         MOV       R5,#0x0
   \   000147   79FF         MOV       R1,#-0x1
   \   000149   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2766              }
   2767          
   2768              // check if this device is a better choice to join...
   2769              // ...dont bother checking assocPermit flag is doing a rejoin
   2770              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2771                  ( ( pBeacon->permitJoining == TRUE ) || ( bdb_isDeviceNonFactoryNew() ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00014C   E5..         MOV       A,?V0
   \   00014E   240A         ADD       A,#0xa
   \   000150   F8           MOV       R0,A
   \   000151   E4           CLR       A
   \   000152   35..         ADDC      A,?V1
   \   000154   88..         MOV       ?V2,R0
   \   000156   F5..         MOV       ?V3,A
   \   000158   8882         MOV       DPL,R0
   \   00015A   F583         MOV       DPH,A
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F8           MOV       R0,A
   \   00015E   90....       MOV       DPTR,#gMIN_TREE_LQI
   \   000161   E0           MOVX      A,@DPTR
   \   000162   C3           CLR       C
   \   000163   98           SUBB      A,R0
   \   000164   4003         JC        $+5
   \   000166   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000169   85..82       MOV       DPL,?V0
   \   00016C   85..83       MOV       DPH,?V1
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   A3           INC       DPTR
   \   000172   A3           INC       DPTR
   \   000173   A3           INC       DPTR
   \   000174   E0           MOVX      A,@DPTR
   \   000175   6401         XRL       A,#0x1
   \   000177   6009         JZ        ??ZDO_beaconNotifyIndCB_10
   \   000179                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000179   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   00017C   E9           MOV       A,R1
   \   00017D   7003         JNZ       $+5
   \   00017F   02....       LJMP      ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2772              {
   2773                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000182   C2F0         CLR       B.0
   2774                uint8 capacity = FALSE;
   2775          
   2776          #if defined ( ZIGBEEPRO )
   2777                if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2778                      (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2779                    ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2780                     (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000184   85..82       MOV       DPL,?V2
   \   000187   85..83       MOV       DPH,?V3
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   F5..         MOV       ?V4,A
   \   00018D   EE           MOV       A,R6
   \   00018E   2409         ADD       A,#0x9
   \   000190   F8           MOV       R0,A
   \   000191   E4           CLR       A
   \   000192   3F           ADDC      A,R7
   \   000193   F9           MOV       R1,A
   \   000194   8882         MOV       DPL,R0
   \   000196   F583         MOV       DPH,A
   \   000198   E0           MOVX      A,@DPTR
   \   000199   F5..         MOV       ?V5,A
   \   00019B   EE           MOV       A,R6
   \   00019C   240A         ADD       A,#0xa
   \   00019E   FA           MOV       R2,A
   \   00019F   E4           CLR       A
   \   0001A0   3F           ADDC      A,R7
   \   0001A1   FB           MOV       R3,A
   \   0001A2   E5..         MOV       A,?V0
   \   0001A4   240B         ADD       A,#0xb
   \   0001A6   FC           MOV       R4,A
   \   0001A7   E4           CLR       A
   \   0001A8   35..         ADDC      A,?V1
   \   0001AA   FD           MOV       R5,A
   \   0001AB   E5..         MOV       A,?V5
   \   0001AD   C3           CLR       C
   \   0001AE   95..         SUBB      A,?V4
   \   0001B0   500C         JNC       ??ZDO_beaconNotifyIndCB_11
   \   0001B2   8C82         MOV       DPL,R4
   \   0001B4   8D83         MOV       DPH,R5
   \   0001B6   E0           MOVX      A,@DPTR
   \   0001B7   C3           CLR       C
   \   0001B8   9414         SUBB      A,#0x14
   \   0001BA   4019         JC        ??ZDO_beaconNotifyIndCB_12
   \   0001BC   8019         SJMP      ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001BE   E5..         MOV       A,?V5
   \   0001C0   65..         XRL       A,?V4
   \   0001C2   7013         JNZ       ??ZDO_beaconNotifyIndCB_13
   \   0001C4   8A82         MOV       DPL,R2
   \   0001C6   8B83         MOV       DPH,R3
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   F5..         MOV       ?V4,A
   \   0001CB   8C82         MOV       DPL,R4
   \   0001CD   8D83         MOV       DPH,R5
   \   0001CF   E0           MOVX      A,@DPTR
   \   0001D0   C3           CLR       C
   \   0001D1   95..         SUBB      A,?V4
   \   0001D3   5002         JNC       ??ZDO_beaconNotifyIndCB_13
   2781                {
   2782                  selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001D5   D2F0         SETB      B.0
   2783                }
   2784          #else
   2785                if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   2786                {
   2787                  selected = TRUE;
   2788                }
   2789          #endif
   2790          
   2791                if ( ZSTACK_ROUTER_BUILD )
   2792                {
   2793                  capacity = pBeacon->routerCapacity;
   2794                }
   2795                else if ( ZSTACK_END_DEVICE_BUILD )
   2796                {
   2797                  capacity = pBeacon->deviceCapacity;
   2798                }
   2799          
   2800                if ( ( (capacity) || ( pBeacon->sourceAddr == _NIB.nwkCoordAddress ) ) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001D7   E5..         MOV       A,?V0
   \   0001D9   2407         ADD       A,#0x7
   \   0001DB   F5..         MOV       ?V4,A
   \   0001DD   E4           CLR       A
   \   0001DE   35..         ADDC      A,?V1
   \   0001E0   F5..         MOV       ?V5,A
   \   0001E2   85..82       MOV       DPL,?V4
   \   0001E5   F583         MOV       DPH,A
   \   0001E7   E0           MOVX      A,@DPTR
   \   0001E8   701B         JNZ       ??ZDO_beaconNotifyIndCB_14
   \   0001EA   85..82       MOV       DPL,?V0
   \   0001ED   85..83       MOV       DPH,?V1
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   F5..         MOV       ?V6,A
   \   0001F3   A3           INC       DPTR
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   F5..         MOV       ?V7,A
   \   0001F7   90....       MOV       DPTR,#_NIB + 23
   \   0001FA   E0           MOVX      A,@DPTR
   \   0001FB   65..         XRL       A,?V6
   \   0001FD   7004         JNZ       ??ZDO_beaconNotifyIndCB_15
   \   0001FF   A3           INC       DPTR
   \   000200   E0           MOVX      A,@DPTR
   \   000201   65..         XRL       A,?V7
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   000203   7048         JNZ       ??ZDO_beaconNotifyIndCB_16
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   000205   A2F0         MOV       C,B.0
   \   000207   5030         JNC       ??ZDO_beaconNotifyIndCB_17
   2801                {
   2802                  // this is the new chosen router for joining...
   2803                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   000209   85..82       MOV       DPL,?V0
   \   00020C   85..83       MOV       DPH,?V1
   \   00020F   E0           MOVX      A,@DPTR
   \   000210   F5..         MOV       ?V6,A
   \   000212   A3           INC       DPTR
   \   000213   E0           MOVX      A,@DPTR
   \   000214   F5..         MOV       ?V7,A
   \   000216   8E82         MOV       DPL,R6
   \   000218   8F83         MOV       DPH,R7
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   A3           INC       DPTR
   \   000221   E5..         MOV       A,?V6
   \   000223   F0           MOVX      @DPTR,A
   \   000224   A3           INC       DPTR
   \   000225   E5..         MOV       A,?V7
   \   000227   12....       LCALL     ?Subroutine13 & 0xFFFF
   2804                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_6:
   \   00022A   8882         MOV       DPL,R0
   \   00022C   8983         MOV       DPH,R1
   \   00022E   F0           MOVX      @DPTR,A
   2805                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   00022F   8C82         MOV       DPL,R4
   \   000231   8D83         MOV       DPH,R5
   \   000233   E0           MOVX      A,@DPTR
   \   000234   8A82         MOV       DPL,R2
   \   000236   8B83         MOV       DPH,R3
   \   000238   F0           MOVX      @DPTR,A
   2806                }
   2807          
   2808                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   000239   85..82       MOV       DPL,?V4
   \   00023C   85..83       MOV       DPH,?V5
   \   00023F   E0           MOVX      A,@DPTR
   \   000240   600B         JZ        ??ZDO_beaconNotifyIndCB_16
   2809                  pNwkDesc->deviceCapacity = 1;
   \   000242   8E82         MOV       DPL,R6
   \   000244   8F83         MOV       DPH,R7
   \   000246   A3           INC       DPTR
   \   000247   A3           INC       DPTR
   \   000248   A3           INC       DPTR
   \   000249   A3           INC       DPTR
   \   00024A   7401         MOV       A,#0x1
   \   00024C   F0           MOVX      @DPTR,A
   2810          
   2811                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   00024D   85..82       MOV       DPL,?V0
   \   000250   85..83       MOV       DPH,?V1
   \   000253   A3           INC       DPTR
   \   000254   A3           INC       DPTR
   \   000255   A3           INC       DPTR
   \   000256   A3           INC       DPTR
   \   000257   A3           INC       DPTR
   \   000258   A3           INC       DPTR
   \   000259   E0           MOVX      A,@DPTR
   \   00025A   600A         JZ        ??ZDO_beaconNotifyIndCB_1
   2812                  pNwkDesc->routerCapacity = 1;
   \   00025C   8E82         MOV       DPL,R6
   \   00025E   8F83         MOV       DPH,R7
   \   000260   A3           INC       DPTR
   \   000261   A3           INC       DPTR
   \   000262   A3           INC       DPTR
   \   000263   7401         MOV       A,#0x1
   \   000265   F0           MOVX      @DPTR,A
   2813              }
   2814            }
   2815          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   000266   7F0A         MOV       R7,#0xa
   \   000268   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET
   2816          
   2817          /*********************************************************************
   2818           * @fn          ZDO_StartRouterConfirmCB
   2819           *
   2820           * @brief       This function reports the results of the request to
   2821           *              start functioning as a router in a network.
   2822           *
   2823           * @param       Status - Result of NLME_StartRouterRequest()
   2824           *
   2825           * @return      none
   2826           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2827          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2828          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   2829            nwkStatus = (byte)Status;
   \   000006   90....       MOV       DPTR,#nwkStatus
   \   000009   F0           MOVX      @DPTR,A
   2830          
   2831            if ( Status == ZSUCCESS )
   \   00000A   700B         JNZ       ??ZDO_StartRouterConfirmCB_0
   2832            {
   2833              // LED on shows Router started
   2834              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2835              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2836              if ( devState == DEV_HOLD )
   \   00000C   90....       MOV       DPTR,#devState
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7005         JNZ       ??ZDO_StartRouterConfirmCB_0
   2837              {
   2838                ZDApp_ChangeState( DEV_END_DEVICE );
   \   000012                ; Setup parameters for call to function ZDApp_ChangeState
   \   000012   7906         MOV       R1,#0x6
   \   000014   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2839              }
   2840            }
   2841          #if defined(BLINK_LEDS)
   2842            else
   2843            {
   2844              zdoHalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2845            }
   2846          #endif
   2847          
   2848            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A20         MOV       R2,#0x20
   \   000019   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   2849          }
   \                     ??CrossCallReturnLabel_127:
   \   00001C   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   2850          
   2851          /*********************************************************************
   2852           * @fn          ZDO_JoinConfirmCB
   2853           *
   2854           * @brief       This function allows the next higher layer to be notified
   2855           *              of the results of its request to join itself or another
   2856           *              device to a network.
   2857           *
   2858           * @param       Status - Result of NLME_JoinRequest()
   2859           *
   2860           * @return      none
   2861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2862          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   2864            (void)PanId;  // remove if this parameter is used.
   2865          
   2866            nwkStatus = (byte)Status;
   \   00000C   E9           MOV       A,R1
   \   00000D   90....       MOV       DPTR,#nwkStatus
   \   000010   F0           MOVX      @DPTR,A
   2867          
   2868            if ( Status == ZSUCCESS )
   \   000011   7079         JNZ       ??ZDO_JoinConfirmCB_0
   2869            {
   2870              if ( ZSTACK_END_DEVICE_BUILD
   2871                || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   2872              {
   2873                neighborEntry_t *pItem;
   2874          
   2875                // We don't need the neighbor table entries.
   2876                // Clear the neighbor Table to remove beacon information
   2877                nwkNeighborInitTable();
   \   000013                ; Setup parameters for call to function nwkNeighborInitTable
   \   000013   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2878          
   2879                // Force a neighbor table entry for the parent
   2880                pItem = nwkNeighborFindEmptySlot();
   \   000016                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000016   12....       LCALL     `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000019   8A..         MOV       ?V2,R2
   \   00001B   8B..         MOV       ?V3,R3
   \   00001D   AE..         MOV       R6,?V2
   \   00001F   AF..         MOV       R7,?V3
   2881                if ( pItem != NULL )
   \   000021   EA           MOV       A,R2
   \   000022   4F           ORL       A,R7
   \   000023   605C         JZ        ??ZDO_JoinConfirmCB_1
   2882                {
   2883                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   000025                ; Setup parameters for call to function osal_memset
   \   000025   7C17         MOV       R4,#0x17
   \   000027   7D00         MOV       R5,#0x0
   \   000029   7900         MOV       R1,#0x0
   \   00002B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2884                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   00002E   90....       MOV       DPTR,#_NIB + 23
   \   000031   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000034   8E82         MOV       DPL,R6
   \   000036   8F83         MOV       DPH,R7
   \   000038   E8           MOV       A,R0
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   E9           MOV       A,R1
   \   00003C   F0           MOVX      @DPTR,A
   2885                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   7C..         MOV       R4,#(_NIB + 25) & 0xff
   \   00003F   7D..         MOV       R5,#((_NIB + 25) >> 8) & 0xff
   \   000041   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000044   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2886                  pItem->panId = _NIB. nwkPanId;
   \   000047   90....       MOV       DPTR,#_NIB + 33
   \   00004A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   E8           MOV       A,R0
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   E9           MOV       A,R1
   \   000054   F0           MOVX      @DPTR,A
   2887                  pItem->linkInfo.rxLqi = DEF_LQI;
   \   000055   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000058   74AA         MOV       A,#-0x56
   \   00005A   F0           MOVX      @DPTR,A
   2888                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   00005B   90....       MOV       DPTR,#gLINK_DOWN_TRIGGER
   \   00005E   E4           CLR       A
   \   00005F   93           MOVC      A,@A+DPTR
   \   000060   7900         MOV       R1,#0x0
   \   000062   2401         ADD       A,#0x1
   \   000064   F8           MOV       R0,A
   \   000065   5001         JNC       ??ZDO_JoinConfirmCB_2
   \   000067   09           INC       R1
   \                     ??ZDO_JoinConfirmCB_2:
   \   000068   7A02         MOV       R2,#0x2
   \   00006A   7B00         MOV       R3,#0x0
   \   00006C   12....       LCALL     ?S_DIV_MOD
   \   00006F   EE           MOV       A,R6
   \   000070   240D         ADD       A,#0xd
   \   000072   F582         MOV       DPL,A
   \   000074   E4           CLR       A
   \   000075   3F           ADDC      A,R7
   \   000076   F583         MOV       DPH,A
   \   000078   E8           MOV       A,R0
   \   000079   F0           MOVX      @DPTR,A
   2889                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   00007A   EE           MOV       A,R6
   \   00007B   12....       LCALL     ?Subroutine41 & 0xFFFF
   2890                }
   2891              }
   \                     ??CrossCallReturnLabel_46:
   \   00007E   7401         MOV       A,#0x1
   \   000080   F0           MOVX      @DPTR,A
   2892          
   2893              // LED on shows device joined
   2894              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   2895              zdoHalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   2896              if ( (devState == DEV_HOLD) )
   \                     ??ZDO_JoinConfirmCB_1:
   \   000081   90....       MOV       DPTR,#devState
   \   000084   E0           MOVX      A,@DPTR
   \   000085   7005         JNZ       ??ZDO_JoinConfirmCB_0
   2897              {
   2898                ZDApp_ChangeState( DEV_NWK_JOINING );
   \   000087                ; Setup parameters for call to function ZDApp_ChangeState
   \   000087   7903         MOV       R1,#0x3
   \   000089   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
   2899              }
   2900          
   2901              if ( !ZG_SECURE_ENABLED )
   2902              {
   2903                // Notify to save info into NV
   2904                ZDApp_NVUpdate();
   2905              }
   2906            }
   2907            else
   2908            {
   2909          #if defined(BLINK_LEDS)
   2910              zdoHalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2911          #endif
   2912            }
   2913          
   2914            // Pass the join confirm to higher layer if callback registered
   2915            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   00008C   90....       MOV       DPTR,#zdoCBFunc + 8
   \   00008F   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000092   6030         JZ        ??ZDO_JoinConfirmCB_3
   2916            {
   2917              zdoJoinCnf_t joinCnf;
   2918          
   2919              joinCnf.status = Status;
   \   000094   85..82       MOV       DPL,?XSP + 0
   \   000097   85..83       MOV       DPH,?XSP + 1
   \   00009A   E5..         MOV       A,?V0
   \   00009C   F0           MOVX      @DPTR,A
   2920              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   00009D   90....       MOV       DPTR,#_NIB + 20
   \   0000A0   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000A3   7401         MOV       A,#0x1
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2921              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_133:
   \   0000AB   90....       MOV       DPTR,#_NIB + 23
   \   0000AE   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000B1   7403         MOV       A,#0x3
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2922          
   2923              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_134:
   \   0000B9                ; Setup parameters for indirect call
   \   0000B9   AA..         MOV       R2,?XSP + 0
   \   0000BB   AB..         MOV       R3,?XSP + 1
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   8983         MOV       DPH,R1
   \   0000C1   12....       LCALL     ?CALL_IND
   2924            }
   2925            
   2926            // Notify ZDApp
   2927            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_3:
   \   0000C4                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000C4   7C00         MOV       R4,#0x0
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   7B02         MOV       R3,#0x2
   \   0000CA   7A02         MOV       R2,#0x2
   \   0000CC   12....       LCALL     ?Subroutine27 & 0xFFFF
   2928          
   2929          }
   \                     ??CrossCallReturnLabel_29:
   \   0000CF   7405         MOV       A,#0x5
   \   0000D1   02....       LJMP      ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine64_0
   \   000001                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3F           ADDC      A,R7
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV       A,R6
   \   000001   240F         ADD       A,#0xf
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   2930          
   2931          /*********************************************************************
   2932           * @fn          ZDO_PermitJoinCB
   2933           *
   2934           * @brief      This function is called when there is a change in the
   2935           *             device's permit join status.
   2936           *
   2937           * @param       duration - the new duration
   2938           *
   2939           * @return      none
   2940           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2941          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2942          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV       A,#-0x1
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   E9           MOV       A,R1
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   F0           MOVX      @DPTR,A
   2943            // Pass the Permit Join status to higher layer if callback registered
   2944            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV       DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000017   6007         JZ        ??ZDO_PermitJoinCB_0
   2945            {
   2946              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   AA..         MOV       R2,?XSP + 0
   \   00001B   AB..         MOV       R3,?XSP + 1
   \   00001D   12....       LCALL     ?CALL_IND
   2947            }
   2948          }
   \                     ??ZDO_PermitJoinCB_0:
   \   000020   7401         MOV       A,#0x1
   \   000022   02....       LJMP      ?Subroutine3 & 0xFFFF
   2949          
   2950          /*********************************************************************
   2951           * @fn          ZDO_AddrChangeIndicationCB
   2952           *
   2953           * @brief       This function notifies the application that this
   2954           *              device's address has changed.  Could happen in
   2955           *              a network with stochastic addressing (PRO).
   2956           *
   2957           * @param       newAddr - the new address
   2958           *
   2959           * @return      none
   2960           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2961          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2962          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   2963            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2964            epList_t *pItem = epList;
   \   000009   90....       MOV       DPTR,#epList
   \   00000C   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2965          
   2966            // Notify to save info into NV
   2967            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_99:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2968          
   2969            // Notify the applications
   2970            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000015   8043         SJMP      ??CrossCallReturnLabel_100
   2971          
   2972            while (pItem != NULL)
   2973            {
   2974              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000017   EE           MOV       A,R6
   \   000018   2402         ADD       A,#0x2
   \   00001A   F8           MOV       R0,A
   \   00001B   E4           CLR       A
   \   00001C   3F           ADDC      A,R7
   \   00001D   88..         MOV       ?V2,R0
   \   00001F   F5..         MOV       ?V3,A
   \   000021   8882         MOV       DPL,R0
   \   000023   F583         MOV       DPH,A
   \   000025   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000028   6029         JZ        ??ZDO_AddrChangeIndicationCB_1
   2975              {
   2976                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   7A04         MOV       R2,#0x4
   \   00002C   7B00         MOV       R3,#0x0
   \   00002E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2977                if (pZDOAddrChangeMsg != NULL)
   \   000031   EA           MOV       A,R2
   \   000032   4B           ORL       A,R3
   \   000033   601E         JZ        ??ZDO_AddrChangeIndicationCB_1
   2978                {
   2979                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000035   8A82         MOV       DPL,R2
   \   000037   8B83         MOV       DPH,R3
   \   000039   74D6         MOV       A,#-0x2a
   \   00003B   F0           MOVX      @DPTR,A
   2980                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E5..         MOV       A,?V0
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E5..         MOV       A,?V1
   \   000044   12....       LCALL     ?Subroutine13 & 0xFFFF
   2981                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   2982                }
   2983              }
   \                     ??CrossCallReturnLabel_7:
   \   000047   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00004F   F9           MOV       R1,A
   \   000050   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2984              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2985            }
   \                     ??CrossCallReturnLabel_100:
   \   00005A   EE           MOV       A,R6
   \   00005B   4F           ORL       A,R7
   \   00005C   70B9         JNZ       ??ZDO_AddrChangeIndicationCB_0
   2986          
   2987            // Send out a device announce
   2988            ZDApp_AnnounceNewAddress();
   \   00005E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005E   12....       LCALL     `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2989          }
   \   000061   02....       LJMP      ?Subroutine1 & 0xFFFF
   2990          
   2991          /*********************************************************************
   2992           * @fn          ZDO_JoinIndicationCB
   2993           *
   2994           * @brief       This function allows the next higher layer of a
   2995           *              coordinator to be notified of a remote join request.
   2996           *
   2997           * @param       ShortAddress - 16-bit address
   2998           * @param       ExtendedAddress - IEEE (64-bit) address
   2999           * @param       CapabilityFlags - Association Capability Flags
   3000           * @param       type - of joining -
   3001           *                          NWK_ASSOC_JOIN
   3002           *                          NWK_ASSOC_REJOIN_UNSECURE
   3003           *                          NWK_ASSOC_REJOIN_SECURE
   3004           *
   3005           * @return      ZStatus_t
   3006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3007          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   3008                                          uint8 CapabilityFlags, uint8 type)
   3009          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
   3010            (void)ExtendedAddress;
   3011            //check if the device is leaving before responding to rejoin request
   3012            if( osal_get_timeoutEx( ZDAppTaskID , ZDO_DEVICE_RESET) )
   \                     ??CrossCallReturnLabel_82:
   \   000008   6005         JZ        ??ZDO_JoinIndicationCB_0
   3013            {
   3014              return ZFailure; // device leaving , hence do not allow rejoin
   \   00000A   7901         MOV       R1,#0x1
   \   00000C   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3015            }
   3016          
   3017          #if ZDO_NV_SAVE_RFDs
   3018              (void)CapabilityFlags;
   3019          
   3020          #else  // if !ZDO_NV_SAVE_RFDs
   3021              if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   3022          #endif
   3023              {
   3024                ZDApp_NVUpdate();  // Notify to save info into NV.
   \                     ??ZDO_JoinIndicationCB_0:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   3025              }
   3026          
   3027              if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   3028              {
   3029                if ( type == NWK_ASSOC_JOIN ||
   3030                    type == NWK_ASSOC_REJOIN_UNSECURE ||
   3031                      type == NWK_ASSOC_REJOIN_SECURE )
   \   000019   600D         JZ        ??ZDO_JoinIndicationCB_2
   \   00001B   7401         MOV       A,#0x1
   \   00001D   68           XRL       A,R0
   \   00001E   6008         JZ        ??ZDO_JoinIndicationCB_2
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   6003         JZ        $+5
   \   000025   02....       LJMP      ??ZDO_JoinIndicationCB_3 & 0xFFFF
   3032                {
   3033                  uint16 timeToFire;
   3034                  ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   3035          
   3036                  pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_2:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   7A06         MOV       R2,#0x6
   \   00002A   7B00         MOV       R3,#0x0
   \   00002C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   8A..         MOV       ?V2,R2
   \   000031   8B..         MOV       ?V3,R3
   \   000033   AE..         MOV       R6,?V2
   \   000035   AF..         MOV       R7,?V3
   3037          
   3038                  if ( pNewDevice == NULL )
   \   000037   EA           MOV       A,R2
   \   000038   4F           ORL       A,R7
   \   000039   7005         JNZ       ??ZDO_JoinIndicationCB_4
   3039                  {
   3040                    // Memory alloc failed
   3041                    return ZMemError;
   \   00003B   7910         MOV       R1,#0x10
   \   00003D   02....       LJMP      ??ZDO_JoinIndicationCB_1 & 0xFFFF
   3042                  }
   3043          
   3044                  // Add the new device to the New Device List
   3045                  if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_4:
   \   000040   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000043   90....       MOV       DPTR,#ZDApp_NewDeviceList
   \   000046   7006         JNZ       ??ZDO_JoinIndicationCB_5
   3046                  {
   3047                    // The list is empty, add the first element
   3048                    ZDApp_NewDeviceList = pNewDevice;
   \   000048   EA           MOV       A,R2
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   EB           MOV       A,R3
   \   00004C   801B         SJMP      ??ZDO_JoinIndicationCB_6
   3049                  }
   3050                  else
   3051                  {
   3052                    pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_5:
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FA           MOV       R2,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   8003         SJMP      ??ZDO_JoinIndicationCB_7
   3053          
   3054                    // Walk the list to last element
   3055                    while ( pDeviceList->next )
   3056                    {
   3057                      pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_8:
   \   000054   E8           MOV       A,R0
   \   000055   FA           MOV       R2,A
   \   000056   E9           MOV       A,R1
   \                     ??ZDO_JoinIndicationCB_7:
   \   000057   FB           MOV       R3,A
   3058                    }
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00005F   70F3         JNZ       ??ZDO_JoinIndicationCB_8
   3059          
   3060                    // Add new device at the end
   3061                    pDeviceList->next = pNewDevice;
   \   000061   8A82         MOV       DPL,R2
   \   000063   8B83         MOV       DPH,R3
   \   000065   EE           MOV       A,R6
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   EF           MOV       A,R7
   \                     ??ZDO_JoinIndicationCB_6:
   \   000069   F0           MOVX      @DPTR,A
   3062                  }
   3063          
   3064                  // get the remaining time of the timer
   3065                  timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   00006A                ; Setup parameters for call to function osal_get_timeoutEx
   \   00006A   7A40         MOV       R2,#0x40
   \   00006C   7B00         MOV       R3,#0x0
   \   00006E   90....       MOV       DPTR,#ZDAppTaskID
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000076   8A..         MOV       ?V4,R2
   \   000078   8B..         MOV       ?V5,R3
   3066          
   3067                  pNewDevice->next = NULL;
   \   00007A   8E82         MOV       DPL,R6
   \   00007C   8F83         MOV       DPH,R7
   \   00007E   E4           CLR       A
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   A3           INC       DPTR
   \   000081   F0           MOVX      @DPTR,A
   3068                  pNewDevice->shortAddr = ShortAddress;
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   E5..         MOV       A,?V0
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   E5..         MOV       A,?V1
   \   00008E   F0           MOVX      @DPTR,A
   3069                  pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \   00008F   7458         MOV       A,#0x58
   \   000091   C3           CLR       C
   \   000092   95..         SUBB      A,?V4
   \   000094   F8           MOV       R0,A
   \   000095   7402         MOV       A,#0x2
   \   000097   95..         SUBB      A,?V5
   \   000099   F9           MOV       R1,A
   \   00009A   8E82         MOV       DPL,R6
   \   00009C   8F83         MOV       DPH,R7
   \   00009E   A3           INC       DPTR
   \   00009F   A3           INC       DPTR
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   E8           MOV       A,R0
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E9           MOV       A,R1
   \   0000A6   F0           MOVX      @DPTR,A
   3070          
   3071                  // Start the timer only if there is no pending timer
   3072                  if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000A7   7458         MOV       A,#0x58
   \   0000A9   68           XRL       A,R0
   \   0000AA   7003         JNZ       ??ZDO_JoinIndicationCB_9
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   69           XRL       A,R1
   \                     ??ZDO_JoinIndicationCB_9:
   \   0000AF   700E         JNZ       ??ZDO_JoinIndicationCB_3
   3073                  {
   3074                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000B1                ; Setup parameters for call to function osal_start_timerEx
   \   0000B1   90....       MOV       DPTR,#__Constant_258
   \   0000B4   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000B7   7A40         MOV       R2,#0x40
   \   0000B9   12....       LCALL     ?Subroutine17 & 0xFFFF
   3075                  }
   3076                }
   3077              }
   \                     ??CrossCallReturnLabel_86:
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   3078          
   3079              return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000BF   7900         MOV       R1,#0x0
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000C1   02....       LJMP      ?Subroutine2 & 0xFFFF
   3080          
   3081          }
   3082          
   3083          /*********************************************************************
   3084           * @fn          ZDO_ConcentratorIndicationCB
   3085           *
   3086           * @brief       This function allows the next higher layer of a
   3087           *              device to be notified of existence of the concentrator.
   3088           *
   3089           * @param       nwkAddr - 16-bit NWK address of the concentrator
   3090           * @param       extAddr - pointer to extended Address
   3091           *                        NULL if not available
   3092           * @param       pktCost - PktCost from RREQ
   3093           *
   3094           * @return      void
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7405         MOV       A,#0x5
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   3097          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3098            zdoConcentratorInd_t conInd;
   3099          
   3100            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   3101            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_136:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   3102            conInd.pktCost = pktCost;
   \   000017   7404         MOV       A,#0x4
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E9           MOV       A,R1
   \   00001D   F0           MOVX      @DPTR,A
   3103          
   3104            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000024   6007         JZ        ??ZDO_ConcentratorIndicationCB_0
   3105            {
   3106              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ?CALL_IND
   3107            }
   3108          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine73_0
   \   000006                ; // Fall through to label ??Subroutine73_0
   3109          
   3110          /*********************************************************************
   3111           * @fn          ZDO_LeaveCnf
   3112           *
   3113           * @brief       This function allows the next higher layer to be
   3114           *              notified of the results of its request for this or
   3115           *              a child device to leave the network.
   3116           *
   3117           * @param       cnf - NLME_LeaveCnf_t
   3118           *
   3119           * @return      none
   3120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3121          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   3122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3123            // Check for this device
   3124            if ( osal_ExtAddrEqual( cnf->extAddr,
   3125                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   AC..         MOV       R4,?V0
   \   000012   AD..         MOV       R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000017   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV       A,R1
   \   00001B   6401         XRL       A,#0x1
   \   00001D   701A         JNZ       ??CrossCallReturnLabel_113
   3126            {
   3127              // Pass the leave confirm to higher layer if callback registered
   3128              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   3129                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV       DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000025   600B         JZ        ??ZDO_LeaveCnf_0
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     ?CALL_IND
   \   00002E   EA           MOV       A,R2
   \   00002F   4B           ORL       A,R3
   \   000030   7007         JNZ       ??CrossCallReturnLabel_113
   3130              {
   3131                // Prepare to leave with reset
   3132                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_0:
   \   000032                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000032   EE           MOV       A,R6
   \   000033   12....       LCALL     ?Subroutine45 & 0xFFFF
   3133              }
   3134            }
   \                     ??CrossCallReturnLabel_52:
   \   000036   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   3135            else if ( ZSTACK_ROUTER_BUILD )
   3136            {
   3137              // Remove device address(optionally descendents) from data
   3138              ZDApp_LeaveUpdate( cnf->dstAddr,
   3139                                 cnf->extAddr,
   3140                                 cnf->removeChildren,
   3141                                 cnf->rejoin );
   3142            }
   3143          }
   \                     ??CrossCallReturnLabel_113:
   \   000039   02....       LJMP      ??Subroutine72_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   240B         ADD       A,#0xb
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
   3144          
   3145          /*********************************************************************
   3146           * @fn          ZDO_LeaveInd
   3147           *
   3148           * @brief       This function allows the next higher layer of a
   3149           *              device to be notified of a remote leave request or
   3150           *              indication.
   3151           *
   3152           * @param       ind - NLME_LeaveInd_t
   3153           *
   3154           * @return      none
   3155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3156          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   3157          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   3158            uint8 leave;
   3159          
   3160            // NWK layer filters out illegal requests
   3161            if ( ind->request == TRUE )
   \   00000E   EA           MOV       A,R2
   \   00000F   240C         ADD       A,#0xc
   \   000011   F8           MOV       R0,A
   \   000012   E4           CLR       A
   \   000013   3F           ADDC      A,R7
   \   000014   88..         MOV       ?V0,R0
   \   000016   F5..         MOV       ?V1,A
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6401         XRL       A,#0x1
   \   000029   7045         JNZ       ??ZDO_LeaveInd_0
   3162            {
   3163              byte temp = FALSE;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   3164              
   3165              // Only respond if we are not rejoining the network
   3166              if ( ind->rejoin == FALSE )
   \   000032   8882         MOV       DPL,R0
   \   000034   85..83       MOV       DPH,?V1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   701E         JNZ       ??ZDO_LeaveInd_1
   3167              {
   3168                // Notify network of leave
   3169                NLME_LeaveRsp_t rsp;
   3170                rsp.rejoin = ind->rejoin;
   \   00003A   7401         MOV       A,#0x1
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   E4           CLR       A
   \   000040   F0           MOVX      @DPTR,A
   3171          
   3172                if ( ZSTACK_ROUTER_BUILD )
   3173                {
   3174                  rsp.removeChildren = ind->removeChildren;
   3175                }
   3176                else if ( ZSTACK_END_DEVICE_BUILD )
   3177                {
   3178                  NLME_SetResponseRate(0);
   \   000041                ; Setup parameters for call to function NLME_SetResponseRate
   \   000041   FA           MOV       R2,A
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     ?Subroutine36 & 0xFFFF
   3179                  NLME_SetQueuedPollRate(0);
   3180                  rsp.removeChildren = 0;
   \                     ??CrossCallReturnLabel_41:
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   3181                }
   3182                
   3183                bdb_setFN();
   \   00004E                ; Setup parameters for call to function bdb_setFN
   \   00004E   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   3184                 
   3185                NLME_LeaveRsp( &rsp );
   \   000051                ; Setup parameters for call to function NLME_LeaveRsp
   \   000051   AA..         MOV       R2,?XSP + 0
   \   000053   AB..         MOV       R3,?XSP + 1
   \   000055   12....       LCALL     `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   3186              }
   3187          
   3188              if ( ZSTACK_END_DEVICE_BUILD )
   3189              {
   3190                // Stop polling and get ready to reset
   3191                NLME_SetPollRate( 0 );
   \                     ??ZDO_LeaveInd_1:
   \   000058                ; Setup parameters for call to function NLME_SetPollRate
   \   000058   90....       MOV       DPTR,#__Constant_0
   \   00005B   12....       LCALL     ?XLOAD_R2345
   \   00005E   12....       LCALL     `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   3192              }
   3193          
   3194              // Prepare to leave with reset
   3195              ZDApp_LeaveReset( ind->rejoin );
   \   000061                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000061   12....       LCALL     ?Subroutine28 & 0xFFFF
   3196              
   3197              //Turn on the radio to avoid sending packets after sending the leave    
   3198              ZMacSetReq(ZMacRxOnIdle, &temp);
   \                     ??CrossCallReturnLabel_111:
   \   000064                ; Setup parameters for call to function ZMacSetReq
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP101_8
   \   000069   7952         MOV       R1,#0x52
   \   00006B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00006E   8057         SJMP      ??ZDO_LeaveInd_2
   3199            }
   3200            else
   3201            {
   3202              leave = FALSE;
   3203          
   3204              // Check if this device needs to leave as a child or descendent
   3205              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000070                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000070   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000073   8A..         MOV       ?V2,R2
   \   000075   8B..         MOV       ?V3,R3
   \   000077   EE           MOV       A,R6
   \   000078   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00007B   F9           MOV       R1,A
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000083   E5..         MOV       A,?V2
   \   000085   6A           XRL       A,R2
   \   000086   7003         JNZ       ??ZDO_LeaveInd_3
   \   000088   E5..         MOV       A,?V3
   \   00008A   6B           XRL       A,R3
   \                     ??ZDO_LeaveInd_3:
   \   00008B   701D         JNZ       ??ZDO_LeaveInd_4
   3206              {
   3207                if ( ( ind->removeChildren == TRUE )   )
   \   00008D   7401         MOV       A,#0x1
   \   00008F   69           XRL       A,R1
   \   000090   6013         JZ        ??ZDO_LeaveInd_5
   3208                {
   3209                  leave = TRUE;
   3210                }
   3211                else if ( ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_DEVICE)
   \   000092   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000095   E0           MOVX      A,@DPTR
   \   000096   5407         ANL       A,#0x7
   \   000098   6402         XRL       A,#0x2
   \   00009A   700E         JNZ       ??ZDO_LeaveInd_4
   3212                {
   3213                  // old parents is leaving the network, child needs to search for a new parent
   3214                  ind->rejoin = TRUE;
   \   00009C   85..82       MOV       DPL,?V0
   \   00009F   85..83       MOV       DPH,?V1
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   F0           MOVX      @DPTR,A
   3215                  leave = TRUE;
   3216                }
   3217          
   3218              }
   3219              else if ( ind->removeChildren == TRUE )
   3220              {
   3221                // Check NWK address allocation algorithm
   3222                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   3223              }
   3224          
   3225              if ( leave == TRUE )
   3226              {
   3227                // Prepare to leave with reset
   3228                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_5:
   \   0000A5                ; Setup parameters for call to function ZDApp_LeaveReset
   \   0000A5   12....       LCALL     ?Subroutine28 & 0xFFFF
   3229              }
   \                     ??CrossCallReturnLabel_112:
   \   0000A8   801D         SJMP      ??ZDO_LeaveInd_2
   3230              else
   3231              {
   3232                // Remove device address(optionally descendents) from data
   3233                ZDApp_LeaveUpdate( ind->srcAddr,
   3234                                   ind->extAddr,
   3235                                   ind->removeChildren,
   3236                                   ind->rejoin );
   \                     ??ZDO_LeaveInd_4:
   \   0000AA                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   0000AA   85..82       MOV       DPL,?V0
   \   0000AD   85..83       MOV       DPH,?V1
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   EE           MOV       A,R6
   \   0000B9   2402         ADD       A,#0x2
   \   0000BB   FC           MOV       R4,A
   \   0000BC   E4           CLR       A
   \   0000BD   3F           ADDC      A,R7
   \   0000BE   FD           MOV       R5,A
   \   0000BF   12....       LCALL     `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   \   0000C2   7401         MOV       A,#0x1
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   3237              }
   3238            }
   3239          
   3240            // Pass the leave indication to higher layer if callback registered.
   3241            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_2:
   \   0000C7   90....       MOV       DPTR,#zdoCBFunc + 12
   \   0000CA   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CD   6007         JZ        ??ZDO_LeaveInd_6
   3242            {
   3243              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000CF                ; Setup parameters for indirect call
   \   0000CF   EE           MOV       A,R6
   \   0000D0   FA           MOV       R2,A
   \   0000D1   EF           MOV       A,R7
   \   0000D2   FB           MOV       R3,A
   \   0000D3   12....       LCALL     ?CALL_IND
   3244            }
   3245          }
   \                     ??ZDO_LeaveInd_6:
   \   0000D6   7403         MOV       A,#0x3
   \   0000D8   02....       LJMP      ??Subroutine52_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine67_0
   \   000006                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   3246          
   3247          /*********************************************************************
   3248           * @fn          ZDO_SyncIndicationCB
   3249           *
   3250           * @brief       This function allows the next higher layer of a
   3251           *              coordinator to be notified of a loss of synchronization
   3252           *                          with the parent/child device.
   3253           *
   3254           * @param       type: 0 - child; 1 - parent
   3255           *
   3256           *
   3257           * @return      none
   3258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3259          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   3260          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3261            (void)shortAddr;  // Remove this line if this parameter is used.
   3262          
   3263            if ( ZSTACK_END_DEVICE_BUILD
   3264              || (ZSTACK_ROUTER_BUILD && BUILD_FLEXABLE && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   3265            {
   3266              if ( type == 1 && retryCnt == 0 )
   \   000007   7401         MOV       A,#0x1
   \   000009   6E           XRL       A,R6
   \   00000A   7019         JNZ       ??ZDO_SyncIndicationCB_0
   \   00000C   90....       MOV       DPTR,#retryCnt
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   7013         JNZ       ??ZDO_SyncIndicationCB_0
   3267              {
   3268                // We lost contact with our parent.  Clear the neighbor Table.
   3269                nwkNeighborInitTable();
   \   000012                ; Setup parameters for call to function nwkNeighborInitTable
   \   000012   12....       LCALL     `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   3270                
   3271                //If we are Factory new, then report fail on association
   3272                if(!bdb_isDeviceNonFactoryNew())
   \   000015                ; Setup parameters for call to function bdb_isDeviceNonFactoryNew
   \   000015   12....       LCALL     `??bdb_isDeviceNonFactoryNew::?relay`; Banked call to: bdb_isDeviceNonFactoryNew
   \   000018   E9           MOV       A,R1
   \   000019   7007         JNZ       ??ZDO_SyncIndicationCB_1
   3273                {
   3274                  bdb_nwkAssocAttemt(FALSE);
   \   00001B                ; Setup parameters for call to function bdb_nwkAssocAttemt
   \   00001B   7900         MOV       R1,#0x0
   \   00001D   12....       LCALL     `??bdb_nwkAssocAttemt::?relay`; Banked call to: bdb_nwkAssocAttemt
   \   000020   8003         SJMP      ??ZDO_SyncIndicationCB_0
   3275                }
   3276          #if (ZG_BUILD_ENDDEVICE_TYPE)
   3277                else
   3278                {
   3279                  //We lost our parent
   3280                  bdb_parentLost();
   \                     ??ZDO_SyncIndicationCB_1:
   \   000022                ; Setup parameters for call to function bdb_parentLost
   \   000022   12....       LCALL     `??bdb_parentLost::?relay`; Banked call to: bdb_parentLost
   3281                }
   3282          #endif
   3283              }
   3284            }
   3285          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   000025   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3286          
   3287          /*********************************************************************
   3288           * @fn          ZDO_ManytoOneFailureIndicationCB
   3289           *
   3290           * @brief       This function allows the next higher layer of a
   3291           *              concentrator to be notified of a many-to-one route
   3292           *              failure.
   3293           *
   3294           * @param       none
   3295           *
   3296           *
   3297           * @return      none
   3298           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3299          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   3300          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3301            // By default, the concentrator automatically redo many-to-one route
   3302            // discovery to update all many-to-one routes in the network
   3303            // If you want anything processing other than the default,
   3304            // please replace the following code.
   3305          
   3306            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL     `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   3307          }
   \   000007   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3308          
   3309          /*********************************************************************
   3310           * @fn          ZDO_PollConfirmCB
   3311           *
   3312           * @brief       This function allows the next higher layer to be
   3313           *              notified of a Poll Confirm.
   3314           *
   3315           * @param       none
   3316           *
   3317           * @return      none
   3318           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3319          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   3320          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3321            (void)status;  // Remove this line if this parameter is used.
   3322            return;
   \   000000   02....       LJMP      ?BRET
   3323          }
   3324          
   3325          /*********************************************************************
   3326           * @fn          ZDO_NetworkStatusCB
   3327           *
   3328           * @brief       Network Status Callback function
   3329           *
   3330           * @param       nwkDstAddr - message's destination address- used to determine
   3331           *                           if the message was intended for this device or
   3332           *                           a sleeping end device.
   3333           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   3334           * @param       dstAddr - the destination address related to the status code
   3335           *
   3336           * @return      none
   3337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3338          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   3339          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3340            (void)dstAddr;     // Remove this line if this parameter is used.
   3341          
   3342            if ( (nwkDstAddr == NLME_GetShortAddr())
   3343                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   3344            {
   3345              // Routing error for dstAddr, this is informational and a Route
   3346              // Request should happen automatically.
   3347            }
   3348          }
   \   000007   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3349          
   3350          /******************************************************************************
   3351           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   3352           *
   3353           * @brief       Stub routine implemented by NHLE. NHLE should call
   3354           *              <AddrMgrWriteNV> when appropriate.
   3355           *
   3356           * @param       none
   3357           *
   3358           * @return      none
   3359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3360          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3361          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3362          #if defined ( NV_RESTORE )
   3363            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00000B   7003         JNZ       ??AddrMgrWriteNVRequest_0
   3364            {
   3365              // Trigger to save info into NV
   3366              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3367            }
   3368          #endif
   3369          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000010   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3370          
   3371          /*********************************************************************
   3372           * Call Back Functions from Security  - API
   3373           */
   3374          
   3375           /*********************************************************************
   3376           * @fn          ZDO_UpdateDeviceIndication
   3377           *
   3378           * @brief       This function notifies the "Trust Center" of a
   3379           *              network when a device joins or leaves the network.
   3380           *
   3381           * @param       extAddr - pointer to 64 bit address of new device
   3382           * @param       status  - 0 if a new device joined securely
   3383           *                      - 1 if a new device joined un-securely
   3384           *                      - 2 if a device left the network
   3385           *
   3386           * @return      true if newly joined device should be allowed to
   3387           *                                              remain on network
   3388           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3389          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3390          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3391            // can implement a network access policy based on the
   3392            // IEEE address of newly joining devices...
   3393            (void)extAddr;
   3394            (void)status;
   3395          
   3396            return ZSuccess;
   \   000000   7900         MOV       R1,#0x0
   \   000002   02....       LJMP      ?BRET
   3397          }
   3398          
   3399          /*********************************************************************
   3400           * @fn          ZDApp_InMsgCB
   3401           *
   3402           * @brief       This function is called to pass up any message that is
   3403           *              not yet supported.  This allows for the developer to
   3404           *              support features themselves..
   3405           *
   3406           * @return      none
   3407           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3408          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3409          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine35 & 0xFFFF
   3410            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \                     ??CrossCallReturnLabel_39:
   \   000008   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000B   5480         ANL       A,#0x80
   \   00000D   703E         JNZ       ??ZDApp_InMsgCB_0
   3411            {
   3412              // Handle the response message
   3413            }
   3414            else
   3415            {
   3416              // Handle the request message by sending a generic "not supported".
   3417              // Device Announce doesn't have a response.
   3418              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   00000F   EA           MOV       A,R2
   \   000010   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000013   7038         JNZ       ??ZDApp_InMsgCB_0
   \   000015   7413         MOV       A,#0x13
   \   000017   68           XRL       A,R0
   \   000018   7001         JNZ       ??ZDApp_InMsgCB_1
   \   00001A   E9           MOV       A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   00001B   6030         JZ        ??ZDApp_InMsgCB_0
   3419              {
   3420                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3421                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   00001D                ; Setup parameters for call to function ZDP_GenericRsp
   \   00001D   E8           MOV       A,R0
   \   00001E   F5..         MOV       ?V0,A
   \   000020   E9           MOV       A,R1
   \   000021   4480         ORL       A,#0x80
   \   000023   F5..         MOV       ?V1,A
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   E4           CLR       A
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   78..         MOV       R0,#?V0
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   EA           MOV       A,R2
   \   000035   12....       LCALL     ?Subroutine41 & 0xFFFF
   3422              }
   3423            }
   \                     ??CrossCallReturnLabel_47:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FD           MOV       R5,A
   \   00003A   7C84         MOV       R4,#-0x7c
   \   00003C   EA           MOV       A,R2
   \   00003D   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000040   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000043   E0           MOVX      A,@DPTR
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   3424          }
   \                     ??ZDApp_InMsgCB_0:
   \   00004D   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   3425          
   3426          
   3427          /*********************************************************************
   3428           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3429           *
   3430           * @brief   Changes the Match Descriptor Response permission.
   3431           *
   3432           * @param   endpoint - endpoint to allow responses
   3433           * @param   action - true to allow responses, false to not
   3434           *
   3435           * @return  none
   3436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3437          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3438          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3439            // Store the action
   3440            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL     `??afSetMatch::?relay`; Banked call to: afSetMatch
   3441          }
   \   000008   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3442          
   3443          /*********************************************************************
   3444           * @fn      ZDApp_NetworkInit()
   3445           *
   3446           * @brief   Used to start the network joining process
   3447           *
   3448           * @param   delay - mSec delay to wait before starting
   3449           *
   3450           * @return  none
   3451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3452          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3454            if ( delay )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6018         JZ        ??ZDApp_NetworkInit_0
   3455            {
   3456              // Wait awhile before starting the device
   3457              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV       ?V0,R2
   \   00000B   8B..         MOV       ?V1,R3
   \   00000D   E4           CLR       A
   \   00000E   F5..         MOV       ?V2,A
   \   000010   F5..         MOV       ?V3,A
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV       R2,#0x1
   \   000019   12....       LCALL     ?Subroutine17 & 0xFFFF
   3458            }
   \                     ??CrossCallReturnLabel_87:
   \   00001C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001F   8005         SJMP      ??CrossCallReturnLabel_128
   3459            else
   3460            {
   3461              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   000021                ; Setup parameters for call to function osal_set_event
   \   000021   7A01         MOV       R2,#0x1
   \   000023   12....       LCALL     ??Subroutine69_0 & 0xFFFF
   3462            }
   3463          }
   \                     ??CrossCallReturnLabel_128:
   \   000026   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   3464          
   3465          /*********************************************************************
   3466           * @fn      ZDApp_NwkStateUpdateCB()
   3467           *
   3468           * @brief   This function notifies that this device's network
   3469           *          state info has been changed.
   3470           *
   3471           * @param   none
   3472           *
   3473           * @return  none
   3474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3475          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3476          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3477            // Notify to save info into NV
   3478            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00000B   7003         JNZ       ??ZDApp_NwkStateUpdateCB_0
   3479            {
   3480              // Trigger to save info into NV
   3481              ZDApp_NVUpdate();
   \   00000D                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000D   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3482            }
   3483          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000010   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3484          
   3485          /*********************************************************************
   3486           * @fn      ZDApp_NodeProfileSync()
   3487           *
   3488           * @brief   Sync node with stack profile.
   3489           *
   3490           * @param   stackProfile - stack profile of the network to join
   3491           *
   3492           * @return  none
   3493           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3494          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3495          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3496            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   A2E1         MOV       C,0xE0 /* A   */.1
   \   00000D   501A         JNC       ??ZDApp_NodeProfileSync_0
   3497            {
   3498              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV       DPTR,#zgStackProfile
   \   000012   E0           MOVX      A,@DPTR
   \   000013   6E           XRL       A,R6
   \   000014   6013         JZ        ??ZDApp_NodeProfileSync_0
   3499              {
   3500                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   54F8         ANL       A,#0xf8
   \   00001C   4402         ORL       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
   3501                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV       A,#0xc
   \   000024   F0           MOVX      @DPTR,A
   3502                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3503              }
   3504            }
   3505          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3506          
   3507          /*********************************************************************
   3508           * @fn      ZDApp_StartJoiningCycle()
   3509           *
   3510           * @brief   Starts the joining cycle of a device.  This will only
   3511           *          continue an already started (or stopped) joining cycle.
   3512           *
   3513           * @param   none
   3514           *
   3515           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3517          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3518          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3519            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   6005         JZ        ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7011         JNZ       ??ZDApp_StartJoiningCycle_1
   3520            {
   3521              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV       DPTR,#continueJoining
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   3522              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3523          
   3524              return ( TRUE );
   \   00001E   7901         MOV       R1,#0x1
   \   000020   8002         SJMP      ??ZDApp_StartJoiningCycle_2
   3525            }
   3526            else
   3527              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV       R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3528          }
   3529          
   3530          /*********************************************************************
   3531           * @fn      ZDApp_StopJoiningCycle()
   3532           *
   3533           * @brief   Stops the joining or rejoining process of a device.
   3534           *
   3535           * @param   none
   3536           *
   3537           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3539          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3540          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3541            if ( devState == DEV_INIT || devState == DEV_NWK_DISC || devState == DEV_NWK_BACKOFF )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   600A         JZ        ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   6005         JZ        ??ZDApp_StopJoiningCycle_0
   \   000011   E0           MOVX      A,@DPTR
   \   000012   640C         XRL       A,#0xc
   \   000014   7009         JNZ       ??ZDApp_StopJoiningCycle_1
   3542            {
   3543              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000016   90....       MOV       DPTR,#continueJoining
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
   3544              return ( TRUE );
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   8002         SJMP      ??ZDApp_StopJoiningCycle_2
   3545            }
   3546            else
   3547              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001F   7900         MOV       R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   000021   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3548          }
   3549          
   3550          /*********************************************************************
   3551           * @fn      ZDApp_AnnounceNewAddress()
   3552           *
   3553           * @brief   Send Device Announce and hold all transmissions for
   3554           *          new address timeout.
   3555           *
   3556           * @param   none
   3557           *
   3558           * @return  none
   3559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3560          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3561          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3562          #if defined ( ZIGBEEPRO )
   3563            // Turn off data request hold
   3564            APSME_HoldDataRequests( 0 );
   \   00000A                ; Setup parameters for call to function APSME_HoldDataRequests
   \   00000A   7A00         MOV       R2,#0x0
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3565          #endif
   3566          
   3567            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3568                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001A   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001D                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000025   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   EE           MOV       A,R6
   \   00002B   FC           MOV       R4,A
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   000031   7401         MOV       A,#0x1
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   3569          
   3570          #if defined ( ZIGBEEPRO )
   3571            // Setup the timeout
   3572            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000036                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000036   7A00         MOV       R2,#0x0
   \   000038   7B00         MOV       R3,#0x0
   \   00003A   12....       LCALL     `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3573          #endif
   3574          
   3575            if ( ZSTACK_END_DEVICE_BUILD )
   3576            {
   3577              if ( zgChildAgingEnable == TRUE )
   \   00003D   90....       MOV       DPTR,#zgChildAgingEnable
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6401         XRL       A,#0x1
   \   000043   7027         JNZ       ??ZDApp_AnnounceNewAddress_0
   3578              {
   3579                uint8 coordExtAddr[Z_EXTADDR_LEN];
   3580          
   3581                // Send the message to parent
   3582                NLME_GetCoordExtAddr( coordExtAddr );
   \   000045                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000045   AA..         MOV       R2,?XSP + 0
   \   000047   AB..         MOV       R3,?XSP + 1
   \   000049   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   3583                NLME_SendEndDevTimeoutReq( NLME_GetCoordShortAddr(), coordExtAddr,
   3584                                           zgEndDeviceTimeoutValue,
   3585                                           zgEndDeviceConfiguration );
   \   00004C                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004C   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00004F                ; Setup parameters for call to function NLME_SendEndDevTimeoutReq
   \   00004F   90....       MOV       DPTR,#zgEndDeviceConfiguration
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V0,A
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005A   90....       MOV       DPTR,#zgEndDeviceTimeoutValue
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F9           MOV       R1,A
   \   00005F   7401         MOV       A,#0x1
   \   000061   12....       LCALL     ?XSTACK_DISP102_8
   \   000064   12....       LCALL     `??NLME_SendEndDevTimeoutReq::?relay`; Banked call to: NLME_SendEndDevTimeoutReq
   \   000067   7401         MOV       A,#0x1
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   3586              }
   3587            }
   3588          }
   \                     ??ZDApp_AnnounceNewAddress_0:
   \   00006C   7408         MOV       A,#0x8
   \   00006E   80..         SJMP      ??Subroutine71_0
   3589          
   3590          /*********************************************************************
   3591           * @fn      ZDApp_SendParentAnnce()
   3592           *
   3593           * @brief   Send Parent Announce message.
   3594           *
   3595           * @param   none
   3596           *
   3597           * @return  none
   3598           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3599          void ZDApp_SendParentAnnce( void )
   \                     ZDApp_SendParentAnnce:
   3600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3601            uint8 count;
   3602            uint8 *childInfo;
   3603          
   3604            childInfo = AssocMakeListOfRfdChild( &count );
   \   00000A                ; Setup parameters for call to function AssocMakeListOfRfdChild
   \   00000A   AA..         MOV       R2,?XSP + 0
   \   00000C   AB..         MOV       R3,?XSP + 1
   \   00000E   12....       LCALL     `??AssocMakeListOfRfdChild::?relay`; Banked call to: AssocMakeListOfRfdChild
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   3605          
   3606            if ( childInfo != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6054         JZ        ??ZDApp_SendParentAnnce_0
   3607            {
   3608              if ( count > 0 )
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6044         JZ        ??ZDApp_SendParentAnnce_1
   3609              {
   3610                zAddrType_t dstAddr;
   3611          
   3612                dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000022   7409         MOV       A,#0x9
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   740F         MOV       A,#0xf
   \   000029   F0           MOVX      @DPTR,A
   3613                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002A   7401         MOV       A,#0x1
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   74FC         MOV       A,#-0x4
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
   3614          
   3615                ZDP_ParentAnnceReq( dstAddr, count, childInfo, 0 );
   \   000036                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000036   75..00       MOV       ?V2,#0x0
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75..1F       MOV       ?V2,#0x1f
   \   000041   75..00       MOV       ?V3,#0x0
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7405         MOV       A,#0x5
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F9           MOV       R1,A
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP102_8
   \   00005A   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00005C   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00005E   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000061   7405         MOV       A,#0x5
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   3616              }
   3617          
   3618              // Free the list after the message has been sent
   3619              osal_mem_free( childInfo );
   \                     ??ZDApp_SendParentAnnce_1:
   \   000066                ; Setup parameters for call to function osal_mem_free
   \   000066   AA..         MOV       R2,?V0
   \   000068   AB..         MOV       R3,?V1
   \   00006A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3620            }
   3621          }
   \                     ??ZDApp_SendParentAnnce_0:
   \   00006D   740A         MOV       A,#0xa
   \   00006F   02....       LJMP      ??Subroutine52_0 & 0xFFFF
   3622          
   3623          /*********************************************************************
   3624           * @fn          ZDApp_NVUpdate
   3625           *
   3626           * @brief       Set the NV Update Timer.
   3627           *
   3628           * @param       none
   3629           *
   3630           * @return      none
   3631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3632          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3633          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3634          #if defined ( NV_RESTORE )
   3635            if ( (ZSTACK_END_DEVICE_BUILD)
   3636                 || (ZSTACK_ROUTER_BUILD
   3637                     && (_NIB.CapabilityFlags & CAPINFO_DEVICETYPE_FFD) == 0) )
   3638            {
   3639              // No need to wait, set the event to save the state
   3640              osal_set_event(ZDAppTaskID, ZDO_NWK_UPDATE_NV);
   \   000004                ; Setup parameters for call to function osal_set_event
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B01         MOV       R3,#0x1
   \   000008   12....       LCALL     ??Subroutine70_0 & 0xFFFF
   3641            }
   3642            else
   3643            {
   3644              // To allow for more changes to the network state before saving
   3645              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   3646            }
   3647          #endif
   3648          }
   \                     ??CrossCallReturnLabel_130:
   \   00000B   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3649          
   3650          /*********************************************************************
   3651           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3652           *
   3653           * @brief   Returns a PAN ID for the network layer to use during
   3654           *          a coordinator start and there is another network with
   3655           *          the intended PANID.
   3656           *
   3657           * @param   panid - the intended PAN ID
   3658           *
   3659           * @return  PANID to try
   3660           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3661          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3662          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3663            return ( panid + 1 );
   \   000000   EA           MOV       A,R2
   \   000001   2401         ADD       A,#0x1
   \   000003   0A           INC       R2
   \   000004   5001         JNC       ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC       R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP      ?BRET
   3664          }
   3665          
   3666          /*********************************************************************
   3667           * @fn          ZDO_SrcRtgIndCB
   3668           *
   3669           * @brief       This function notifies the ZDO available src route record received.
   3670           *
   3671           * @param       srcAddr - source address of the source route
   3672           * @param       relayCnt - number of devices in the relay list
   3673           * @param       relayList - relay list of the source route
   3674           *
   3675           * @return      none
   3676           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3677          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3678          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3679            zdoSrcRtg_t srcRtg;
   3680          
   3681            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   3682            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_137:
   \   00000D   7402         MOV       A,#0x2
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E9           MOV       A,R1
   \   000013   F0           MOVX      @DPTR,A
   3683            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV       A,#0x3
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   EC           MOV       A,R4
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   ED           MOV       A,R5
   \   00001D   F0           MOVX      @DPTR,A
   3684          
   3685            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV       DPTR,#zdoCBFunc
   \   000021   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000024   600A         JZ        ??ZDO_SrcRtgIndCB_0
   3686            {
   3687              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   AA..         MOV       R2,?XSP + 0
   \   000028   AB..         MOV       R3,?XSP + 1
   \   00002A   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   3688            }
   \                     ??CrossCallReturnLabel_91:
   \   00002D   12....       LCALL     ?CALL_IND
   3689          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000030   02....       LJMP      ?Subroutine0 & 0xFFFF
   3690          
   3691          /*********************************************************************
   3692           * @fn          ZDApp_InitZdoCBFunc
   3693           *
   3694           * @brief       Call this function to initialize zdoCBFunc[]
   3695           *
   3696           * @param       none
   3697           *
   3698           * @return      none
   3699           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3700          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3701          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3702            uint8 i;
   3703          
   3704            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV       R2,#0x0
   3705            {
   3706              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV       A,R2
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   12....       LCALL     ?Subroutine32 & 0xFFFF
   3707            }
   \                     ??CrossCallReturnLabel_34:
   \   00000C   0A           INC       R2
   \   00000D   EA           MOV       A,R2
   \   00000E   C3           CLR       C
   \   00000F   9409         SUBB      A,#0x9
   \   000011   40F3         JC        ??ZDApp_InitZdoCBFunc_0
   3708          }
   \   000013   02....       LJMP      ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#zdoCBFunc & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET
   3709          
   3710          /*********************************************************************
   3711           * @fn          ZDO_RegisterForZdoCB
   3712           *
   3713           * @brief       Call this function to register the higher layer (for
   3714           *              example, the Application layer or MT layer) with ZDO
   3715           *              callbacks to get notified of some ZDO indication like
   3716           *              existence of a concentrator or receipt of a source
   3717           *              route record.
   3718           *
   3719           * @param       indID - ZDO Indication ID
   3720           * @param       pFn   - Callback function pointer
   3721           *
   3722           * @return      ZSuccess - successful, ZInvalidParameter if not
   3723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3724          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3725          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3726            // Check the range of the indication ID
   3727            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   500C         JNC       ??ZDO_RegisterForZdoCB_0
   3728            {
   3729              zdoCBFunc[indID] = pFn;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000F   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   3730              return ZSuccess;
   \                     ??CrossCallReturnLabel_135:
   \   000012   7900         MOV       R1,#0x0
   \   000014   8002         SJMP      ??ZDO_RegisterForZdoCB_1
   3731            }
   3732          
   3733            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV       R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3734          }
   3735          
   3736          /*********************************************************************
   3737           * @fn          ZDO_DeregisterForZdoCB
   3738           *
   3739           * @brief       Call this function to de-register the higher layer (for
   3740           *              example, the Application layer or MT layer) with ZDO
   3741           *              callbacks to get notified of some ZDO indication like
   3742           *              existence of a concentrator or receipt of a source
   3743           *              route record.
   3744           *
   3745           * @param       indID - ZDO Indication ID
   3746           *
   3747           * @return      ZSuccess - successful, ZInvalidParameter if not
   3748           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3749          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3750          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3751            // Check the range of the indication ID
   3752            if ( indID < MAX_ZDO_CB_FUNC )
   \   000005   C3           CLR       C
   \   000006   9409         SUBB      A,#0x9
   \   000008   5008         JNC       ??ZDO_DeregisterForZdoCB_0
   3753            {
   3754              zdoCBFunc[indID] = NULL;
   \   00000A   E9           MOV       A,R1
   \   00000B   29           ADD       A,R1
   \   00000C   12....       LCALL     ?Subroutine32 & 0xFFFF
   3755              return ZSuccess;
   \                     ??CrossCallReturnLabel_35:
   \   00000F   F9           MOV       R1,A
   \   000010   8002         SJMP      ??ZDO_DeregisterForZdoCB_1
   3756            }
   3757          
   3758            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000012   7902         MOV       R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000014   02....       LJMP      ??Subroutine61_0 & 0xFFFF
   3759          }
   3760          
   3761          #if defined ( ZDP_BIND_VALIDATION )
   3762          #if defined ( REFLECTOR )
   3763          /*********************************************************************
   3764           * @fn          ZDApp_SetPendingBindDefault
   3765           *
   3766           * @brief       This function initializes a specific entry of pending
   3767           *              Bind Request.
   3768           *
   3769           * @param       pendBindReq - pointer to the entry in the table
   3770           *
   3771           * @return      none
   3772           */
   3773          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   3774          {
   3775            // Set it to an initial value
   3776            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   3777          
   3778            // We are checking for age 0 for aged-out records
   3779            pendBindReq->age = 0;
   3780          }
   3781          
   3782          /*********************************************************************
   3783           * @fn          ZDApp_InitPendingBind
   3784           *
   3785           * @brief       This function initializes the buffer that holds
   3786           *              pending Bind Request messages if no valid NWK address
   3787           *              exists in Address Manager and a Network Address Req
   3788           *              has been sent out.
   3789           *
   3790           * @param       none
   3791           *
   3792           * @return      none
   3793           */
   3794          void ZDApp_InitPendingBind( void )
   3795          {
   3796            if ( ZDAppPendingBindReq == NULL )
   3797            {
   3798              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   3799              {
   3800                uint8 i;
   3801          
   3802                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3803                {
   3804                  // Set to default values
   3805                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3806                }
   3807              }
   3808            }
   3809          }
   3810          
   3811          /*********************************************************************
   3812           * @fn          ZDApp_GetEmptyPendingBindReq
   3813           *
   3814           * @brief       This function looks for an empty entry.
   3815           *
   3816           * @param       none
   3817           *
   3818           * @return      Pointer to entry
   3819           */
   3820          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   3821          {
   3822            uint8 i;
   3823          
   3824            if ( ZDAppPendingBindReq != NULL )
   3825            {
   3826              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3827              {
   3828                if ( ZDAppPendingBindReq[i].age == 0 )
   3829                {
   3830                  return ( &ZDAppPendingBindReq[i] );
   3831                }
   3832              }
   3833            }
   3834          
   3835            // No empty entry was found
   3836            return NULL;
   3837          }
   3838          
   3839          /*********************************************************************
   3840           * @fn          ZDApp_ProcessPendingBindReq
   3841           *
   3842           * @brief       Process pending entry based on EXT address.
   3843           *
   3844           * @param       extAddr - of device to look up
   3845           *
   3846           * @return      none
   3847           */
   3848          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   3849          {
   3850            uint8 i;
   3851          
   3852            // Loop through all the pending entries for that Ext Address
   3853            // to create Bind Entries and send Bind Rsp
   3854            if ( ZDAppPendingBindReq != NULL )
   3855            {
   3856              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3857              {
   3858                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3859                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   3860                {
   3861                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3862          
   3863                  // Add Bind entry
   3864                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3865                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3866                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3867                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   3868                  {
   3869                    // valid entry
   3870                    bindStat = ZDP_SUCCESS;
   3871          
   3872                    // Notify to save info into NV
   3873                    ZDApp_NVUpdate();
   3874                  }
   3875          
   3876                  // Send back a response message
   3877                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3878                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3879          
   3880                  // Set the pending request entry to default values
   3881                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3882                }
   3883              }
   3884            }
   3885          }
   3886          
   3887          /*********************************************************************
   3888           * @fn          ZDApp_AgeOutPendingBindEntry
   3889           *
   3890           * @brief       Age out pending Bind Req entries.
   3891           *
   3892           * @param       none
   3893           *
   3894           * @return      none
   3895           */
   3896          void ZDApp_AgeOutPendingBindEntry( void )
   3897          {
   3898            uint8 i;
   3899            bool entryFound = FALSE;
   3900          
   3901            if ( ZDAppPendingBindReq != NULL )
   3902            {
   3903              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   3904              {
   3905                if ( ZDAppPendingBindReq[i].age > 1 )
   3906                {
   3907                  ZDAppPendingBindReq[i].age--;
   3908          
   3909                  entryFound = TRUE;
   3910                }
   3911                else if ( ZDAppPendingBindReq[i].age == 1 )
   3912                {
   3913                  // The record has aged out and has valid data
   3914                  AddrMgrEntry_t entry;
   3915                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   3916          
   3917                  entry.user = ADDRMGR_USER_BINDING;
   3918          
   3919                  // Remove the entry in address manager so we do not keep entries
   3920                  // with invalid addresses
   3921                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   3922          
   3923                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   3924                  {
   3925                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   3926                    {
   3927                      // Release the entry that contains an invalid NWK address
   3928                      AddrMgrEntryRelease( &entry );
   3929                    }
   3930                  }
   3931          
   3932                  // Send the Bind Response with failure status
   3933                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3934                               &(ZDAppPendingBindReq[i].srcAddr),
   3935                               bindStat, ZDAppPendingBindReq[i].securityUse );
   3936          
   3937                  // Clear the record and set to default values
   3938                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   3939                }
   3940              }
   3941            }
   3942          
   3943            if ( entryFound == FALSE )
   3944            {
   3945              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   3946            }
   3947            else
   3948            {
   3949              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3950                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   3951            }
   3952          }
   3953          #endif
   3954          #endif
   3955          
   3956          /*********************************************************************
   3957           * @fn          ZDO_ChangeState
   3958           *
   3959           * @brief       Chance the device state
   3960           *
   3961           * @param       state - new state
   3962           *
   3963           * @return      none
   3964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3965          void ZDApp_ChangeState( devStates_t state )
   \                     ZDApp_ChangeState:
   3966          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3967            if ( devState != state )
   \   000007   90....       MOV       DPTR,#devState
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   6E           XRL       A,R6
   \   00000C   6005         JZ        ??CrossCallReturnLabel_124
   3968            {
   3969              devState = state;
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
   3970              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000010                ; Setup parameters for call to function osal_set_event
   \   000010   12....       LCALL     ?Subroutine16 & 0xFFFF
   3971            }
   3972          }
   \                     ??CrossCallReturnLabel_124:
   \   000013   02....       LJMP      ??Subroutine49_0 & 0xFFFF
   3973          
   3974          /*********************************************************************
   3975           * @fn      ZDApp_SetRejoinScanDuration()
   3976           *
   3977           * @brief   Sets scan duration for rejoin for an end device
   3978           *
   3979           * @param   rejoinScanDuration - milliseconds
   3980           *
   3981           * @return  none
   3982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3983          void ZDApp_SetRejoinScanDuration( uint32 rejoinScanDuration )
   \                     ZDApp_SetRejoinScanDuration:
   3984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3985            zgDefaultRejoinScan = rejoinScanDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinScan
   \   000010                REQUIRE ?Subroutine8
   \   000010                ; // Fall through to label ?Subroutine8
   3986          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   78..         MOV       R0,#?V0
   \   000002   12....       LCALL     ?L_MOV_TO_X
   \   000005   02....       LJMP      ??Subroutine53_0 & 0xFFFF
   3987          
   3988          /*********************************************************************
   3989           * @fn      ZDApp_SetRejoinBackoffDuration()
   3990           *
   3991           * @brief   Sets rejoin backoff duration for rejoin for an end device
   3992           *
   3993           * @param   rejoinBackoffDuration - milliseconds
   3994           *
   3995           * @return  none
   3996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3997          void ZDApp_SetRejoinBackoffDuration( uint32 rejoinBackoffDuration )
   \                     ZDApp_SetRejoinBackoffDuration:
   3998          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3999            zgDefaultRejoinBackoff = rejoinBackoffDuration;
   \   00000D   90....       MOV       DPTR,#zgDefaultRejoinBackoff
   \   000010   80..         SJMP      ?Subroutine8
   4000          }
   4001          
   4002          /*********************************************************************
   4003           * @fn          ZDApp_SetParentAnnceTimer
   4004           *
   4005           * @brief       This function sets up the link status timer.
   4006           *
   4007           * @param       none
   4008           *
   4009           * @return      none
   4010           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4011          void ZDApp_SetParentAnnceTimer( void )
   \                     ZDApp_SetParentAnnceTimer:
   4012          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4013            // Parent Announce shall be sent no earlier than 10 seconds
   4014            uint32 timeout = 10000;
   4015          
   4016            // Add with jitter of up to 10 seconds
   4017            timeout += (osal_rand() & 0x2710);
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   4018          
   4019            // Set timer to send the message
   4020            osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, timeout );
   \   000008                ; Setup parameters for call to function osal_start_timerEx
   \   000008   EA           MOV       A,R2
   \   000009   5410         ANL       A,#0x10
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   EB           MOV       A,R3
   \   00000E   5427         ANL       A,#0x27
   \   000010   F5..         MOV       ?V1,A
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   90....       MOV       DPTR,#__Constant_2710
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?L_ADD_X
   \   00001F   78..         MOV       R0,#?V0
   \   000021   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B40         MOV       R3,#0x40
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000030   02....       LJMP      ?Subroutine5 & 0xFFFF
   4021          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for prevDevState>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   ....         DW ZDAppTaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000
   4022          
   4023          /*********************************************************************
   4024          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0      0   ZDAppCheckForHoldKey
      2     25   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     33   ZDApp_AnnounceNewAddress
        0     18   -> APSME_HoldDataRequests
        0     18   -> NLME_GetCoordExtAddr
        0     18   -> NLME_GetCoordShortAddr
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     19   -> NLME_SendEndDevTimeoutReq
        0     19   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0     35   ZDApp_ChangeState
        0      9   -> osal_set_event
      0      0   ZDApp_CoordStartPANIDConflictCB
      2      9   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     39   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     24   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2      0   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     25   ZDApp_LeaveReset
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_NwkDiscTerm
        0     10   -> NLME_SetPollRate
        0     10   -> NLME_SetQueuedPollRate
        0     10   -> NLME_SetResponseRate
        0     10   -> ZDApp_LeaveCtrlSet
        0     10   -> ZDApp_NetworkInit
        0     10   -> ZDApp_ResetTimerStart
        0     10   -> osal_rand
        0     10   -> sAddrExtCpy
      0     43   ZDApp_LeaveUpdate
        0     24   -> AddrMgrWriteNVRequest
        0     24   -> RTG_RemoveRtgEntry
        0     24   -> ZDSecMgrAddrClear
        0     24   -> ZDSecMgrDeviceRemoveByExtAddr
        0     24   -> nwkNeighborRemove
        0     27   -> osal_memcpy
      2     16   ZDApp_NVUpdate
        2      0   -> osal_set_event
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     41   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2      0   ZDApp_NetworkStartEvt
        2      0   -> AddrMgrWriteNVRequest
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> ZDApp_ChangeState
        2      0   -> ZDApp_SetParentAnnceTimer
        2      0   -> ZDApp_StoreNwkSecMaterial
        2      0   -> bdb_nwkFormationAttempt
        2      0   -> bdb_reportCommissioningState
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     21   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     14   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_desc_list_free
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     41   ZDApp_ProcessMsgCBs
        0     31   -> ZDO_ParseAddrRsp
        0     31   -> ZDO_ParseBindUnbindReq
        0     31   -> ZDO_ProcessBindUnbindReq
        0     31   -> ZDO_UpdateAddrManager
        0     31   -> osal_mem_free
      0     22   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_ChangeState
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetNwkKey
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> bdb_nwkAssocAttemt
        0     12   -> bdb_reportCommissioningState
        0     12   -> bdb_setNodeIsOnANetwork
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_pwrmgr_device
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> osal_stop_timerEx
      0     24   ZDApp_ProcessOSALMsg
        0     10   -> ZDApp_ProcessMsgCBs
        0     10   -> ZDApp_ProcessNetworkJoin
        0     10   -> ZDApp_ProcessSecMsg
        0     10   -> ZDP_IncomingData
        0     10   -> bdb_isDeviceNonFactoryNew
        0     10   -> bdb_nwkDiscoveryAttempt
        0     10   -> bdb_parentLost
        0     10   -> bdb_rejoinNwk
        0     10   -> bdb_reportCommissioningState
        0     10   -> nwk_getNwkDescList
      0     23   ZDApp_ProcessSecEvent
        0      9   -> ZDApp_DeviceAuthEvt
        0      9   -> ZDApp_SaveNwkKey
        0      9   -> ZDApp_StoreNwkSecMaterial
        0      9   -> ZDSecMgrSaveApsLinkKey
        0      9   -> ZDSecMgrSaveTCLinkKey
        0      9   -> bdb_reportCommissioningState
        0      9   -> bdb_setNodeIsOnANetwork
      2     10   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
      0     34   ZDApp_ReadNetworkRestoreState
        0      9   -> bdb_setNodeIsOnANetwork
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     47   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     34   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> sAddrExtCpy
      0     64   ZDApp_RestoreNwkKey
        0     48   -> ZDApp_RestoreNwkSecMaterial
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
      0     79   ZDApp_RestoreNwkSecMaterial
        0     30   -> osal_memcmp
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     61   ZDApp_SaveNwkKey
        0     48   -> SSP_ReadNwkActiveKey
        0     51   -> osal_memcmp
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     52   -> osal_nv_write
      0     50   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     39   ZDApp_SendMsg
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      0     27   ZDApp_SendParentAnnce
        0     22   -> AssocMakeListOfRfdChild
        0     27   -> ZDP_ParentAnnce
        0     22   -> osal_mem_free
      0     16   ZDApp_SetParentAnnceTimer
        0     12   -> osal_rand
        0     16   -> osal_start_timerEx
      0     12   ZDApp_SetRejoinBackoffDuration
      0     12   ZDApp_SetRejoinScanDuration
      2     14   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2     14   ZDApp_StopJoiningCycle
      0     40   ZDApp_StoreNwkSecMaterial
        0     27   -> osal_isbufset
        0     30   -> osal_memcmp
        0     30   -> osal_memcpy
        0     31   -> osal_nv_read
        0     31   -> osal_nv_write
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_ChangeState
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDApp_StartJoiningCycle
        0     14   -> ZDApp_StopJoiningCycle
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> ZDSecMgrFallbackNwkKey
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     29   ZDOInitDeviceEx
        0     25   -> NLME_InitNV
        0     25   -> NLME_SetBroadcastFilter
        0     25   -> NLME_SetDefaultNV
        0     25   -> NLME_SetUpdateID
        0     25   -> ZDAppDetermineDeviceType
        0     25   -> ZDApp_LeaveCtrlInit
        0     25   -> ZDApp_NetworkInit
        0     25   -> ZDApp_ReadNetworkRestoreState
        0     25   -> ZDApp_RestoreNetworkState
        0     25   -> ZDApp_SecInit
        0     25   -> ZDConfig_InitDescriptors
        0     25   -> ZDSecMgrClearNVKeyValues
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> ZMacSetReq
        0     25   -> osal_memset
        0     29   -> osal_nv_write
        0     25   -> osal_rand
        0     25   -> zgInitItems
        0     25   -> zgWriteStartupOptions
      0     14   ZDO_AddrChangeIndicationCB
        0     14   -> ZDApp_AnnounceNewAddress
        0     14   -> ZDApp_NVUpdate
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
        0     14   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> ZDApp_ChangeState
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> sAddrExtCmp
      0     16   ZDO_LeaveInd
        0     15   -> NLME_GetCoordShortAddr
        0     15   -> NLME_LeaveRsp
        0     15   -> NLME_SetPollRate
        0     15   -> NLME_SetQueuedPollRate
        0     15   -> NLME_SetResponseRate
        0     15   -> ZDApp_LeaveReset
        0     16   -> ZDApp_LeaveUpdate
        0     15   -> ZMacSetReq
        0     15   -> bdb_setFN
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
        2      3   -> ZDO_FinishProcessingMgmtNwkDiscReq
      1     26   ZDO_NetworkFormationConfirmCB
        0     26   -> APSME_IsDistributedSecurity
        0     26   -> NLME_SetAssocFlags
        0     26   -> SSP_SwitchNwkKey
        0     26   -> SSP_UpdateNwkKey
        0     26   -> ZDApp_ChangeState
        0     26   -> ZDApp_RestoreNwkSecMaterial
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> ZMacSetReq
        0     26   -> bdb_nwkFormationAttempt
        0     26   -> bdb_setNodeIsOnANetwork
        0     26   -> nwk_ExtPANIDValid
        0     26   -> osal_memset
        0     26   -> osal_set_event
        0     26   -> sAddrExtCpy
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> ZDApp_ChangeState
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> bdb_isDeviceNonFactoryNew
        0      9   -> bdb_nwkAssocAttemt
        0      9   -> bdb_parentLost
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     18   ZDO_beaconNotifyIndCB
        0     18   -> bdb_isDeviceNonFactoryNew
        0     18   -> osal_mem_alloc
        0     18   -> osal_memset
        0     18   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       4  ?<Initializer for ZDApp_SavedPollRate>
       7  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for prevDevState>
       2  ??Subroutine46_0
       6  ??Subroutine47_0
       3  ??Subroutine48_0
       5  ??Subroutine49_0
       9  ??Subroutine50_0
       6  ??Subroutine51_0
       3  ??Subroutine52_0
       5  ??Subroutine53_0
       2  ??Subroutine54_0
       6  ??Subroutine55_0
       8  ??Subroutine56_0
       6  ??Subroutine57_0
      13  ??Subroutine58_0
       3  ??Subroutine59_0
       8  ??Subroutine60_0
       7  ??Subroutine61_0
       2  ??Subroutine62_0
       6  ??Subroutine63_0
       7  ??Subroutine64_0
       6  ??Subroutine65_0
       8  ??Subroutine66_0
       6  ??Subroutine67_0
       6  ??Subroutine68_0
       2  ??Subroutine69_0
       9  ??Subroutine70_0
       3  ??Subroutine71_0
       5  ??Subroutine72_0
       6  ??Subroutine73_0
       2  ?Subroutine0
       5  ?Subroutine1
      13  ?Subroutine10
      12  ?Subroutine11
       6  ?Subroutine12
       9  ?Subroutine13
      13  ?Subroutine14
       3  ?Subroutine15
       2  ?Subroutine16
       2  ?Subroutine17
       8  ?Subroutine18
      17  ?Subroutine19
       5  ?Subroutine2
       5  ?Subroutine20
       6  ?Subroutine21
       4  ?Subroutine22
       9  ?Subroutine23
       2  ?Subroutine24
      11  ?Subroutine25
       3  ?Subroutine26
       9  ?Subroutine27
       6  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
      18  ?Subroutine30
       6  ?Subroutine31
       8  ?Subroutine32
       2  ?Subroutine33
      10  ?Subroutine34
      14  ?Subroutine35
      11  ?Subroutine36
       8  ?Subroutine37
       5  ?Subroutine38
       1  ?Subroutine39
      31  ?Subroutine4
      10  ?Subroutine40
       9  ?Subroutine41
       1  ?Subroutine42
      20  ?Subroutine43
      15  ?Subroutine44
       9  ?Subroutine45
       2  ?Subroutine5
       2  ?Subroutine6
       5  ?Subroutine7
       8  ?Subroutine8
      21  ?Subroutine9
      19  AddrMgrWriteNVRequest
       1  FrameCounterUpdated
       3  ZDAppCheckForHoldKey
      82  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       1  ZDAppTaskID
     112  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      22  ZDApp_ChangeState
      10  ZDApp_CoordStartPANIDConflictCB
      61  ZDApp_DeviceAuthEvt
      77  ZDApp_DeviceConfigured
     115  ZDApp_ForceConcentratorChange
      80  ZDApp_InMsgCB
      50  ZDApp_Init
      89  ZDApp_InitUserDesc
      22  ZDApp_InitZdoCBFunc
      73  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      71  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
     123  ZDApp_LeaveReset
     122  ZDApp_LeaveUpdate
      14  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      41  ZDApp_NetworkInit
     130  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     275  ZDApp_NwkDescListProcessing
      19  ZDApp_NwkStateUpdateCB
     104  ZDApp_ProcessMsgCBs
     446  ZDApp_ProcessNetworkJoin
     140  ZDApp_ProcessOSALMsg
      92  ZDApp_ProcessSecEvent
      56  ZDApp_ProcessSecMsg
      28  ZDApp_ReadNetworkRestoreState
      31  ZDApp_RegisterCBs
      38  ZDApp_ResetNwkKey
      26  ZDApp_ResetTimerCancel
      31  ZDApp_ResetTimerStart
      74  ZDApp_RestoreNetworkState
     116  ZDApp_RestoreNwkKey
     211  ZDApp_RestoreNwkSecMaterial
      19  ZDApp_SaveNetworkStateEvt
     295  ZDApp_SaveNwkKey
       4  ZDApp_SavedPollRate
     120  ZDApp_SecInit
      15  ZDApp_SendEventMsg
      90  ZDApp_SendMsg
     114  ZDApp_SendParentAnnce
      51  ZDApp_SetParentAnnceTimer
      18  ZDApp_SetRejoinBackoffDuration
      16  ZDApp_SetRejoinScanDuration
      39  ZDApp_StartJoiningCycle
      36  ZDApp_StopJoiningCycle
     217  ZDApp_StoreNwkSecMaterial
       7  ZDApp_epDesc
     267  ZDApp_event_loop
     366  ZDOInitDeviceEx
     100  ZDO_AddrChangeIndicationCB
      48  ZDO_ConcentratorIndicationCB
      23  ZDO_DeregisterForZdoCB
     212  ZDO_JoinConfirmCB
     196  ZDO_JoinIndicationCB
      60  ZDO_LeaveCnf
     219  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      72  ZDO_NetworkDiscoveryConfirmCB
     252  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
      37  ZDO_PermitJoinCB
       3  ZDO_PollConfirmCB
      27  ZDO_RegisterForZdoCB
      51  ZDO_SrcRtgIndCB
      31  ZDO_StartRouterConfirmCB
      40  ZDO_SyncIndicationCB
       5  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     619  ZDO_beaconNotifyIndCB
       4  __Constant_0
       4  __Constant_258
       4  __Constant_2710
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  prevDevState
       1  retryCnt
       4  runtimeChannel
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
     450  -- Other

 
 7 379 bytes in segment BANKED_CODE
   450 bytes in segment BANK_RELAYS
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
    36 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
   463 bytes of CODE     memory
    16 bytes of CONST    memory (+ 20 bytes shared)
 7 379 bytes of HUGECODE memory
    78 bytes of XDATA    memory

Errors: none
Warnings: none
