###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Mar/2020  12:48:30
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f C:\Users\monster\AppData\Local\Temp\EWFEA3.tmp ("C:\Texas
#        Instruments\Z-Stack 3.0.1\Components\osal\mcu\cc2530\OSAL_Nv.c" -D
#        NV_INIT -D NV_RESTORE -D TC_LINKKEY_JOIN -D ZBA_FALLBACK_NWKKEY -D
#        POWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_MGMT -D xZCL_EZMODE -D
#        MT_APP_CNF_FUNC -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER
#        -D ZCL_WRITE -D ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -lC
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=MAX_CHANNELS_24GHZ -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Russian_RUS.1251
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.1\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2014-12-19 13:07:30 -0800 (Fri, 19 Dec 2014) $
      4            Revision:       $Revision: 41556 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          #ifdef HAL_MCU_CC2533
     56          #include "hal_batmon.h"
     57          #endif
     58          
     59          /*********************************************************************
     60           * CONSTANTS
     61           */
     62          
     63          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     64          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     65          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     66          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     67          
     68          #define OSAL_NV_ACTIVE          0x00
     69          #define OSAL_NV_ERASED          0xFF
     70          #define OSAL_NV_ERASED_ID       0xFFFF
     71          #define OSAL_NV_ZEROED_ID       0x0000
     72          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     73          #define OSAL_NV_SOURCE_ID       0x8000
     74          
     75          // In case pages 0-1 are ever used, define a null page value.
     76          #define OSAL_NV_PAGE_NULL       0
     77          
     78          // In case item Id 0 is ever used, define a null item value.
     79          #define OSAL_NV_ITEM_NULL       0
     80          
     81          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     82          
     83          #define OSAL_NV_PAGE_HDR_OFFSET 0
     84          
     85          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     86          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     87            ZCD_NV_NWKKEY,
     88            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     89            ZCD_NV_NWK_ALTERN_KEY_INFO,
     90          };
     91          
     92          /*********************************************************************
     93           * MACROS
     94           */
     95          
     96          #if (defined HAL_MCU_CC2530 || defined HAL_MCU_CC2531)
     97          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     98          #elif defined HAL_MCU_CC2533
     99          # define  OSAL_NV_CHECK_BUS_VOLTAGE  (HalBatMonRead( HAL_BATMON_MIN_FLASH ))
    100          #else
    101          # warning No implementation of a low Vdd check.
    102          # define  OSAL_NV_CHECK_BUS_VOLTAGE
    103          #endif
    104          
    105          #define OSAL_NV_DATA_SIZE( LEN )                      \
    106            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
    107                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
    108                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
    109          
    110          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    111            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    112                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    113            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    114          
    115          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    116            /* In order to recover from a page compaction that is interrupted,\
    117             * the logic in osal_nv_init() depends upon the following order:\
    118             * 1. State of the target of compaction is changed to ePgInUse.\
    119             * 2. Compacted page is erased.\
    120             */\
    121            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    122            erasePage( (COM_PG) ); \
    123            \
    124            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    125          )
    126          
    127          /*********************************************************************
    128           * TYPEDEFS
    129           */
    130          
    131          typedef struct
    132          {
    133            uint16 id;
    134            uint16 len;   // Enforce Flash-WORD size on len.
    135            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    136            uint16 stat;  // Item status.
    137          } osalNvHdr_t;
    138          // Struct member offsets.
    139          #define OSAL_NV_HDR_ID    0
    140          #define OSAL_NV_HDR_LEN   2
    141          #define OSAL_NV_HDR_CHK   4
    142          #define OSAL_NV_HDR_STAT  6
    143          
    144          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    145          #define OSAL_NV_HDR_SIZE  8
    146          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    147          
    148          typedef struct
    149          {
    150            uint16 active;
    151            uint16 inUse;
    152            uint16 xfer;
    153            uint16 spare;
    154          } osalNvPgHdr_t;
    155          // Struct member offsets.
    156          #define OSAL_NV_PG_ACTIVE 0
    157          #define OSAL_NV_PG_INUSE  2
    158          #define OSAL_NV_PG_XFER   4
    159          #define OSAL_NV_PG_SPARE  6
    160          
    161          #define OSAL_NV_PAGE_HDR_SIZE  8
    162          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    163          
    164          typedef enum
    165          {
    166            eNvXfer,
    167            eNvZero
    168          } eNvHdrEnum;
    169          
    170          typedef enum
    171          {
    172            ePgActive,
    173            ePgInUse,
    174            ePgXfer,
    175            ePgSpare
    176          } ePgHdrEnum;
    177          
    178          /*********************************************************************
    179           * GLOBAL VARIABLES
    180           */
    181          
    182          #ifndef OAD_KEEP_NV_PAGES
    183          // When NV pages are to remain intact during OAD download,
    184          // the image itself should not include NV pages.
    185          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    186          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    187          #pragma required=_nvBuf
    188          #endif // OAD_KEEP_NV_PAGES
    189          
    190          /*********************************************************************
    191           * LOCAL VARIABLES
    192           */
    193          
    194          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    196          
    197          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    199          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    200          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    201          
    202          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          
    205          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    208          
    209          /*********************************************************************
    210           * LOCAL FUNCTIONS
    211           */
    212          
    213          static uint8  initNV( void );
    214          
    215          static void   setPageUse( uint8 pg, uint8 inUse );
    216          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    217          static void   erasePage( uint8 pg );
    218          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    219          
    220          static uint16 findItem( uint16 id );
    221          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    222          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    223          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    224          
    225          static uint16 calcChkB( uint16 len, uint8 *buf );
    226          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    227          
    228          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    229          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    230          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    231          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    232          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    233          
    234          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    235          static uint8  hotItem(uint16 id);
    236          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    237          
    238          /*********************************************************************
    239           * @fn      initNV
    240           *
    241           * @brief   Initialize the NV flash pages.
    242           *
    243           * @param   none
    244           *
    245           * @return  TRUE
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          static uint8 initNV( void )
   \                     initNV:
    248          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    249            osalNvPgHdr_t pgHdr;
    250            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV       ?V0,#0x0
    251            uint8 findDups = FALSE;
   \   00000D   7F00         MOV       R7,#0x0
    252            uint8 pg;
    253          
    254            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV       DPTR,#pgRes
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
    255          
    256            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000014   7E79         MOV       R6,#0x79
    257            {
    258              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
   \                     ??initNV_0:
   \   000016                ; Setup parameters for call to function HalFlashRead
   \   000016   75..08       MOV       ?V2,#0x8
   \   000019   8F..         MOV       ?V3,R7
   \   00001B   78..         MOV       R0,#?V2
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7402         MOV       A,#0x2
   \   000022   12....       LCALL     ?XSTACK_DISP102_8
   \   000025   7A00         MOV       R2,#0x0
   \   000027   7B00         MOV       R3,#0x0
   \   000029   EE           MOV       A,R6
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
    259          
    260              if ( pgHdr.active == OSAL_NV_ERASED_ID )
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F4           CPL       A
   \   000039   7003         JNZ       ??initNV_1
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   F4           CPL       A
   \                     ??initNV_1:
   \   00003E   7013         JNZ       ??initNV_2
    261              {
    262                if ( pgRes == OSAL_NV_PAGE_NULL )
   \   000040   90....       MOV       DPTR,#pgRes
   \   000043   E0           MOVX      A,@DPTR
   \   000044   7004         JNZ       ??initNV_3
    263                {
    264                  pgRes = pg;
   \   000046   EE           MOV       A,R6
   \   000047   F0           MOVX      @DPTR,A
   \   000048   8019         SJMP      ??initNV_4
    265                }
    266                else
    267                {
    268                  setPageUse( pg, TRUE );
   \                     ??initNV_3:
   \   00004A                ; Setup parameters for call to function setPageUse
   \   00004A   7A01         MOV       R2,#0x1
   \   00004C   EE           MOV       A,R6
   \   00004D   F9           MOV       R1,A
   \   00004E   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   000051   8010         SJMP      ??initNV_4
    269                }
    270              }
    271              // An Xfer from this page was in progress.
    272              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_2:
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F4           CPL       A
   \   00005A   7003         JNZ       ??initNV_5
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F4           CPL       A
   \                     ??initNV_5:
   \   00005F   6002         JZ        ??initNV_4
    273              {
    274                oldPg = pg;
   \   000061   8E..         MOV       ?V0,R6
    275              }
    276            }
   \                     ??initNV_4:
   \   000063   0E           INC       R6
   \   000064   EE           MOV       A,R6
   \   000065   C3           CLR       C
   \   000066   947F         SUBB      A,#0x7f
   \   000068   40AC         JC        ??initNV_0
    277          
    278            // If a page compaction was interrupted before the old page was erased.
    279            if ( oldPg != OSAL_NV_PAGE_NULL )
   \   00006A   E5..         MOV       A,?V0
   \   00006C   90....       MOV       DPTR,#pgRes
   \   00006F   6017         JZ        ??initNV_6
    280            {
    281              /* Interrupted compaction before the target of compaction was put in use;
    282               * so erase the target of compaction and start again.
    283               */
    284              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   000071   E0           MOVX      A,@DPTR
   \   000072   600F         JZ        ??initNV_7
    285              {
    286                erasePage( pgRes );
   \   000074                ; Setup parameters for call to function erasePage
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    287                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   000078                ; Setup parameters for call to function compactPage
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B00         MOV       R3,#0x0
   \   00007C   A9..         MOV       R1,?V0
   \   00007E   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   000081   800C         SJMP      ??initNV_8
    288              }
    289              /* Interrupted compaction after the target of compaction was put in use,
    290               * but before the old page was erased; so erase it now and create a new reserve page.
    291               */
    292              else
    293              {
    294                erasePage( oldPg );
   \                     ??initNV_7:
   \   000083                ; Setup parameters for call to function erasePage
   \   000083   12....       LCALL     ?Subroutine29 & 0xFFFF
    295                pgRes = oldPg;
    296              }
    297            }
   \                     ??CrossCallReturnLabel_39:
   \   000086   8007         SJMP      ??initNV_8
    298            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_6:
   \   000088   E0           MOVX      A,@DPTR
   \   000089   6004         JZ        ??initNV_8
    299            {
    300              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   00008B                ; Setup parameters for call to function erasePage
   \   00008B   F9           MOV       R1,A
   \   00008C   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    301            }
    302            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    303             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    304             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    305             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    306             * size less the page header.
    307             */
    308          
    309            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_8:
   \   00008F   7E79         MOV       R6,#0x79
    310            {
    311              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    312              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_9:
   \   000091                ; Setup parameters for call to function initPage
   \   000091   EF           MOV       A,R7
   \   000092   FC           MOV       R4,A
   \   000093   7A00         MOV       R2,#0x0
   \   000095   7B00         MOV       R3,#0x0
   \   000097   EE           MOV       A,R6
   \   000098   F9           MOV       R1,A
   \   000099   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00009C   EA           MOV       A,R2
   \   00009D   4B           ORL       A,R3
   \   00009E   6004         JZ        ??initNV_10
    313              {
    314                findDups = TRUE;
   \   0000A0   7F01         MOV       R7,#0x1
    315                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000A2   7E78         MOV       R6,#0x78
    316                continue;
    317              }
    318            }
   \                     ??initNV_10:
   \   0000A4   0E           INC       R6
   \   0000A5   EE           MOV       A,R6
   \   0000A6   C3           CLR       C
   \   0000A7   947F         SUBB      A,#0x7f
   \   0000A9   40E6         JC        ??initNV_9
    319          
    320            if (findDups)
   \   0000AB   EF           MOV       A,R7
   \   0000AC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000AE   5014         JNC       ??initNV_11
    321            {
    322              // Final pass to calculate page lost after invalidating duplicate items.
    323              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000B0   7E79         MOV       R6,#0x79
    324              {
    325                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_12:
   \   0000B2                ; Setup parameters for call to function initPage
   \   0000B2   7C00         MOV       R4,#0x0
   \   0000B4   7A00         MOV       R2,#0x0
   \   0000B6   7B00         MOV       R3,#0x0
   \   0000B8   EE           MOV       A,R6
   \   0000B9   F9           MOV       R1,A
   \   0000BA   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
    326              }
   \   0000BD   0E           INC       R6
   \   0000BE   EE           MOV       A,R6
   \   0000BF   C3           CLR       C
   \   0000C0   947F         SUBB      A,#0x7f
   \   0000C2   40EE         JC        ??initNV_12
    327            }
    328          
    329            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_11:
   \   0000C4   90....       MOV       DPTR,#pgRes
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   703C         JNZ       ??initNV_13
    330            {
    331              uint8 idx, mostLost = 0;
   \   0000CA   7E00         MOV       R6,#0x0
    332          
    333              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   0000CC   7C00         MOV       R4,#0x0
    334              {
    335                // Is this the page that was compacted?
    336                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
   \                     ??initNV_14:
   \   0000CE   EC           MOV       A,R4
   \   0000CF   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000D2   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000D5   74F8         MOV       A,#-0x8
   \   0000D7   6A           XRL       A,R2
   \   0000D8   7003         JNZ       ??initNV_15
   \   0000DA   7407         MOV       A,#0x7
   \   0000DC   6B           XRL       A,R3
   \                     ??initNV_15:
   \   0000DD   7004         JNZ       ??initNV_16
    337                {
    338                  mostLost = idx;
   \   0000DF   EC           MOV       A,R4
   \   0000E0   FE           MOV       R6,A
    339                  break;
   \   0000E1   8018         SJMP      ??initNV_17
    340                }
    341                /* This check is not expected to be necessary because the above test should always succeed
    342                 * with an early loop exit.
    343                 */
    344                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_16:
   \   0000E3   EE           MOV       A,R6
   \   0000E4   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000E7   39           ADDC      A,R1
   \   0000E8   F583         MOV       DPH,A
   \   0000EA   C3           CLR       C
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   9A           SUBB      A,R2
   \   0000ED   A3           INC       DPTR
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   9B           SUBB      A,R3
   \   0000F0   5002         JNC       ??initNV_18
    345                {
    346                  mostLost = idx;
   \   0000F2   EC           MOV       A,R4
   \   0000F3   FE           MOV       R6,A
    347                }
    348              }
   \                     ??initNV_18:
   \   0000F4   0C           INC       R4
   \   0000F5   EC           MOV       A,R4
   \   0000F6   C3           CLR       C
   \   0000F7   9406         SUBB      A,#0x6
   \   0000F9   40D3         JC        ??initNV_14
    349          
    350              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_17:
   \   0000FB   7479         MOV       A,#0x79
   \   0000FD   2E           ADD       A,R6
   \   0000FE   90....       MOV       DPTR,#pgRes
   \   000101   F0           MOVX      @DPTR,A
    351              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   000102                ; Setup parameters for call to function erasePage
   \   000102   F9           MOV       R1,A
   \   000103   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
    352            }
    353          
    354            return TRUE;
   \                     ??initNV_13:
   \   000106   7901         MOV       R1,#0x1
   \   000108   7408         MOV       A,#0x8
   \   00010A   80..         SJMP      ??Subroutine44_0
    355          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#pgLost & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A9..         MOV       R1,?V0
   \   000002   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000005   E5..         MOV       A,?V0
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    356          
    357          /*********************************************************************
    358           * @fn      setPageUse
    359           *
    360           * @brief   Set page header active/inUse state according to 'inUse'.
    361           *
    362           * @param   pg - Valid NV page to verify and init.
    363           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    364           *
    365           * @return  none
    366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    367          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    368          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    369            osalNvPgHdr_t pgHdr;
    370          
    371            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    372          
    373            if ( inUse )
   \   000014   EA           MOV       A,R2
   \   000015   6008         JZ        ??setPageUse_0
    374            {
    375              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E4           CLR       A
   \   00001D   8007         SJMP      ??setPageUse_1
    376            }
    377            else
    378            {
    379              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
    380            }
   \                     ??setPageUse_1:
   \   000026   12....       LCALL     ??Subroutine50_0 & 0xFFFF
    381          
    382            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??CrossCallReturnLabel_86:
   \   000029   7A00         MOV       R2,#0x0
   \   00002B   7B00         MOV       R3,#0x0
   \   00002D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    383          }
   \   000030   7408         MOV       A,#0x8
   \   000032                REQUIRE ?Subroutine1
   \   000032                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function writeWordH
   \   000003                ; Setup parameters for call to function writeWord
   \   000003                ; Setup parameters for call to function writeWord
   \   000003   AC..         MOV       R4,?XSP + 0
   \   000005   AD..         MOV       R5,?XSP + 1
   \   000007   22           RET
    384          
    385          /*********************************************************************
    386           * @fn      initPage
    387           *
    388           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    389           *
    390           * @param   pg - Valid NV page to verify and init.
    391           * @param   id - Valid NV item Id to use function as a "findItem".
    392           *               If set to NULL then just perform the page initialization.
    393           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    394           *                     left from a write that is interrupted by a reset/power-cycle.
    395           *                     FALSE otherwise.
    396           *
    397           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    398           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    401          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   8C..         MOV       ?V5,R4
    402            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   75..08       MOV       ?V0,#0x8
   \   000015   75..00       MOV       ?V1,#0x0
    403            uint16 sz, lost = 0;
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   75..00       MOV       ?V3,#0x0
    404            osalNvHdr_t hdr;
    405          
    406            do
    407            {
    408              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001E                ; Setup parameters for call to function HalFlashRead
   \   00001E   75..08       MOV       ?V8,#0x8
   \   000021   75..00       MOV       ?V9,#0x0
   \   000024   78..         MOV       R0,#?V8
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP102_8
   \   00002E   AA..         MOV       R2,?V0
   \   000030   AB..         MOV       R3,?V1
   \   000032   A9..         MOV       R1,?V4
   \   000034   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000037   12....       LCALL     ?DEALLOC_XSTACK8
    409          
    410              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003A   85..82       MOV       DPL,?XSP + 0
   \   00003D   85..83       MOV       DPH,?XSP + 1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F4           CPL       A
   \   000042   7003         JNZ       ??initPage_1
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F4           CPL       A
   \                     ??initPage_1:
   \   000047   7003         JNZ       $+5
   \   000049   02....       LJMP      ??initPage_2 & 0xFFFF
    411              {
    412                break;
    413              }
    414          
    415              // Get the actual size in bytes which is the ceiling(hdr.len)
    416              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000054   4006         JC        ??initPage_3
   \   000056   7EFC         MOV       R6,#-0x4
   \   000058   7FFF         MOV       R7,#-0x1
   \   00005A   8006         SJMP      ??initPage_4
   \                     ??initPage_3:
   \   00005C   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00005F   FE           MOV       R6,A
   \   000060   E9           MOV       A,R1
   \   000061   FF           MOV       R7,A
    417          
    418              // A bad 'len' write has blown away the rest of the page.
    419              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   000062   74F8         MOV       A,#-0x8
   \   000064   C3           CLR       C
   \   000065   95..         SUBB      A,?V0
   \   000067   F8           MOV       R0,A
   \   000068   7407         MOV       A,#0x7
   \   00006A   95..         SUBB      A,?V1
   \   00006C   F9           MOV       R1,A
   \   00006D   C3           CLR       C
   \   00006E   E8           MOV       A,R0
   \   00006F   9E           SUBB      A,R6
   \   000070   E9           MOV       A,R1
   \   000071   9F           SUBB      A,R7
   \   000072   5020         JNC       ??initPage_5
    420              {
    421                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   000074   E5..         MOV       A,?V2
   \   000076   2400         ADD       A,#0x0
   \   000078   E5..         MOV       A,?V3
   \   00007A   3408         ADDC      A,#0x8
   \   00007C   F5..         MOV       ?V3,A
   \   00007E   C3           CLR       C
   \   00007F   E5..         MOV       A,?V2
   \   000081   95..         SUBB      A,?V0
   \   000083   F5..         MOV       ?V2,A
   \   000085   E5..         MOV       A,?V3
   \   000087   95..         SUBB      A,?V1
   \   000089   F5..         MOV       ?V3,A
    422                offset = OSAL_NV_PAGE_SIZE;
   \   00008B   75..00       MOV       ?V0,#0x0
   \   00008E   75..08       MOV       ?V1,#0x8
    423                break;
   \   000091   02....       LJMP      ??initPage_2 & 0xFFFF
    424              }
    425          
    426              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   000094   E5..         MOV       A,?V0
   \   000096   2408         ADD       A,#0x8
   \   000098   F5..         MOV       ?V0,A
   \   00009A   E4           CLR       A
   \   00009B   35..         ADDC      A,?V1
   \   00009D   F5..         MOV       ?V1,A
    427          
    428              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   00009F   85..82       MOV       DPL,?XSP + 0
   \   0000A2   85..83       MOV       DPH,?XSP + 1
   \   0000A5   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A8   7003         JNZ       $+5
   \   0000AA   02....       LJMP      ??initPage_6 & 0xFFFF
    429              {
    430                /* This trick allows function to do double duty for findItem() without
    431                 * compromising its essential functionality at powerup initialization.
    432                 */
    433                if ( id != OSAL_NV_ITEM_NULL )
   \   0000AD   E5..         MOV       A,?V6
   \   0000AF   45..         ORL       A,?V7
   \   0000B1   6047         JZ        ??initPage_7
    434                {
    435                  /* This trick allows asking to find the old/transferred item in case
    436                   * of a successful new item write that gets interrupted before the
    437                   * old item can be zeroed out.
    438                   */
    439                  if ( (id & 0x7fff) == hdr.id )
   \   0000B3   A8..         MOV       R0,?V6
   \   0000B5   E5..         MOV       A,?V7
   \   0000B7   547F         ANL       A,#0x7f
   \   0000B9   F9           MOV       R1,A
   \   0000BA   85..82       MOV       DPL,?XSP + 0
   \   0000BD   85..83       MOV       DPH,?XSP + 1
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   68           XRL       A,R0
   \   0000C2   7003         JNZ       ??initPage_8
   \   0000C4   A3           INC       DPTR
   \   0000C5   E0           MOVX      A,@DPTR
   \   0000C6   69           XRL       A,R1
   \                     ??initPage_8:
   \   0000C7   6003         JZ        $+5
   \   0000C9   02....       LJMP      ??CrossCallReturnLabel_41 & 0xFFFF
    440                  {
    441                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    442                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   0000CC   7406         MOV       A,#0x6
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000D4   E5..         MOV       A,?V7
   \   0000D6   5480         ANL       A,#0x80
   \   0000D8   700F         JNZ       ??initPage_9
   \   0000DA   74FF         MOV       A,#-0x1
   \   0000DC   68           XRL       A,R0
   \   0000DD   7003         JNZ       ??initPage_10
   \   0000DF   74FF         MOV       A,#-0x1
   \   0000E1   69           XRL       A,R1
   \                     ??initPage_10:
   \   0000E2   6003         JZ        $+5
   \   0000E4   02....       LJMP      ??CrossCallReturnLabel_41 & 0xFFFF
   \   0000E7   800A         SJMP      ??initPage_11
   \                     ??initPage_9:
   \   0000E9   74FF         MOV       A,#-0x1
   \   0000EB   68           XRL       A,R0
   \   0000EC   7003         JNZ       ??initPage_12
   \   0000EE   74FF         MOV       A,#-0x1
   \   0000F0   69           XRL       A,R1
   \                     ??initPage_12:
   \   0000F1   6076         JZ        ??CrossCallReturnLabel_41
    443                    {
    444                      return offset;
   \                     ??initPage_11:
   \   0000F3   AA..         MOV       R2,?V0
   \   0000F5   AB..         MOV       R3,?V1
   \   0000F7   02....       LJMP      ??initPage_13 & 0xFFFF
    445                    }
    446                  }
    447                }
    448                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    449                else
    450                {
    451                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   0000FA                ; Setup parameters for call to function calcChkF
   \   0000FA   AA..         MOV       R2,?V0
   \   0000FC   AB..         MOV       R3,?V1
   \   0000FE   A9..         MOV       R1,?V4
   \   000100   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000103   7404         MOV       A,#0x4
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   68           XRL       A,R0
   \   00010A   7003         JNZ       ??initPage_14
   \   00010C   A3           INC       DPTR
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   69           XRL       A,R1
   \                     ??initPage_14:
   \   00010F   7043         JNZ       ??initPage_15
    452                  {
    453                    if ( findDups )
   \   000111   7406         MOV       A,#0x6
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000119   E5..         MOV       A,?V5
   \   00011B   6027         JZ        ??initPage_16
    454                    {
    455                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00011D   74FF         MOV       A,#-0x1
   \   00011F   68           XRL       A,R0
   \   000120   7003         JNZ       ??initPage_17
   \   000122   74FF         MOV       A,#-0x1
   \   000124   69           XRL       A,R1
   \                     ??initPage_17:
   \   000125   7042         JNZ       ??CrossCallReturnLabel_41
    456                      {
    457                        /* The trick of setting the MSB of the item Id causes the logic
    458                         * immediately above to return a valid page only if the header 'stat'
    459                         * indicates that it was the older item being transferred.
    460                         */
    461                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000127                ; Setup parameters for call to function findItem
   \   000127   85..82       MOV       DPL,?XSP + 0
   \   00012A   85..83       MOV       DPH,?XSP + 1
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   FA           MOV       R2,A
   \   00012F   A3           INC       DPTR
   \   000130   E0           MOVX      A,@DPTR
   \   000131   4480         ORL       A,#0x80
   \   000133   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    462          
    463                        if ( off != OSAL_NV_ITEM_NULL )
   \                     ??CrossCallReturnLabel_122:
   \   000136   6031         JZ        ??CrossCallReturnLabel_41
    464                        {
    465                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   000138                ; Setup parameters for call to function setItem
   \   000138   7C01         MOV       R4,#0x1
   \   00013A   90....       MOV       DPTR,#findPg
   \   00013D   E0           MOVX      A,@DPTR
   \   00013E   F9           MOV       R1,A
   \   00013F   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   000142   8025         SJMP      ??CrossCallReturnLabel_41
    466                        }
    467                      }
    468                    }
    469                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    470                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_16:
   \   000144   74FF         MOV       A,#-0x1
   \   000146   68           XRL       A,R0
   \   000147   7003         JNZ       ??initPage_18
   \   000149   74FF         MOV       A,#-0x1
   \   00014B   69           XRL       A,R1
   \                     ??initPage_18:
   \   00014C   601B         JZ        ??CrossCallReturnLabel_41
    471                    {
    472                      return OSAL_NV_ERASED_ID;
   \   00014E   7AFF         MOV       R2,#-0x1
   \   000150   7BFF         MOV       R3,#-0x1
   \   000152   8048         SJMP      ??initPage_13
    473                    }
    474                  }
    475                  else
    476                  {
    477                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_15:
   \   000154                ; Setup parameters for call to function setItem
   \   000154   7C01         MOV       R4,#0x1
   \   000156   AA..         MOV       R2,?V0
   \   000158   AB..         MOV       R3,?V1
   \   00015A   A9..         MOV       R1,?V4
   \   00015C   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    478                    lost += (OSAL_NV_HDR_SIZE + sz);
    479                  }
    480                }
    481              }
    482              else
    483              {
    484                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   00015F   EE           MOV       A,R6
   \   000160   2408         ADD       A,#0x8
   \   000162   F8           MOV       R0,A
   \   000163   E4           CLR       A
   \   000164   3F           ADDC      A,R7
   \   000165   F9           MOV       R1,A
   \   000166   12....       LCALL     ?Subroutine30 & 0xFFFF
    485              }
    486              offset += sz;
   \                     ??CrossCallReturnLabel_41:
   \   000169   E5..         MOV       A,?V0
   \   00016B   2E           ADD       A,R6
   \   00016C   F5..         MOV       ?V0,A
   \   00016E   E5..         MOV       A,?V1
   \   000170   3F           ADDC      A,R7
   \   000171   F5..         MOV       ?V1,A
    487          
    488            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   000173   C3           CLR       C
   \   000174   E5..         MOV       A,?V0
   \   000176   94F8         SUBB      A,#-0x8
   \   000178   E5..         MOV       A,?V1
   \   00017A   9407         SUBB      A,#0x7
   \   00017C   5003         JNC       $+5
   \   00017E   02....       LJMP      ??initPage_0 & 0xFFFF
    489          
    490            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   000181   A8..         MOV       R0,?V4
   \   000183   E8           MOV       A,R0
   \   000184   28           ADD       A,R0
   \   000185   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000188   E5..         MOV       A,?V0
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B   A3           INC       DPTR
   \   00018C   E5..         MOV       A,?V1
   \   00018E   12....       LCALL     ?Subroutine11 & 0xFFFF
    491            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \                     ??CrossCallReturnLabel_4:
   \   000191   E5..         MOV       A,?V2
   \   000193   F0           MOVX      @DPTR,A
   \   000194   A3           INC       DPTR
   \   000195   E5..         MOV       A,?V3
   \   000197   F0           MOVX      @DPTR,A
    492          
    493            return OSAL_NV_ITEM_NULL;
   \   000198   7A00         MOV       R2,#0x0
   \   00019A   7B00         MOV       R3,#0x0
   \                     ??initPage_13:
   \   00019C   7408         MOV       A,#0x8
   \   00019E   80..         SJMP      ??Subroutine47_0
    494          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0A         MOV       R7,#0xa
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000003   28           ADD       A,R0
   \   000004   F582         MOV       DPL,A
   \   000006   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000008   39           ADDC      A,R1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000003   8A..         MOV       ?V8,R2
   \   000005   8B..         MOV       ?V9,R3
   \   000007   A8..         MOV       R0,?V8
   \   000009   A9..         MOV       R1,?V9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EC           MOV       A,R4
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3D           ADDC      A,R5
   \   000006   F9           MOV       R1,A
   \   000007   E8           MOV       A,R0
   \   000008   54FC         ANL       A,#0xfc
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   33           RLC       A
   \   000003   F9           MOV       R1,A
   \   000004   74..         MOV       A,#(pgOff + 14) & 0xff
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   00000B   39           ADDC      A,R1
   \   00000C   F583         MOV       DPH,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000003   C3           CLR       C
   \   000004   EC           MOV       A,R4
   \   000005   94FC         SUBB      A,#-0x4
   \   000007   ED           MOV       A,R5
   \   000008   94FF         SUBB      A,#-0x1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E5..         MOV       A,?V2
   \   000002   28           ADD       A,R0
   \   000003   F5..         MOV       ?V2,A
   \   000005   E5..         MOV       A,?V3
   \   000007   39           ADDC      A,R1
   \   000008   F5..         MOV       ?V3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   22           RET
    495          
    496          /*********************************************************************
    497           * @fn      erasePage
    498           *
    499           * @brief   Erases a page in Flash.
    500           *
    501           * @param   pg - Valid NV page to erase.
    502           *
    503           * @return  none
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          static void erasePage( uint8 pg )
   \                     erasePage:
    506          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    507            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   12....       LCALL     `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    508          
    509            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000A   EE           MOV       A,R6
   \   00000B   2E           ADD       A,R6
   \   00000C   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00000F   7408         MOV       A,#0x8
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   E4           CLR       A
   \   000014   12....       LCALL     ?Subroutine11 & 0xFFFF
    510            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \                     ??CrossCallReturnLabel_5:
   \   000017   E4           CLR       A
   \   000018   F0           MOVX      @DPTR,A
   \   000019   A3           INC       DPTR
   \   00001A   F0           MOVX      @DPTR,A
    511          }
   \   00001B   02....       LJMP      ??Subroutine46_0 & 0xFFFF
    512          
    513          /*********************************************************************
    514           * @fn      compactPage
    515           *
    516           * @brief   Compacts the page specified.
    517           *
    518           * @param   srcPg - Valid NV page to erase.
    519           * @param   skipId - Item Id to not compact.
    520           *
    521           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    522           *          FALSE otherwise.
    523           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    524           *          the risk of infinitely looping on HAL flash failure.
    525           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    526           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    527           *          NV_OPER_FAILED.
    528           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    529           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    530           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    531           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    532           *          or written, the last value written with a return value of SUCCESS can continue to be
    533           *          read successfully.
    534           *          If eventually HAL flash starts working again, all of the pages marked as
    535           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    536           *          deterministically clean-up one page pending compaction per power-cycle
    537           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    538           *          through such a scenario.
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
    542            uint16 srcOff;
    543            uint8 rtrn;
    544          
    545            // To minimize code size, only check for a clean page here where it's absolutely required.
    546            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV       R6,#0x0
   \   000012   7F00         MOV       R7,#0x0
    547            {
    548              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \                     ??compactPage_0:
   \   000014                ; Setup parameters for call to function HalFlashRead
   \   000014   75..01       MOV       ?V4,#0x1
   \   000017   75..00       MOV       ?V5,#0x0
   \   00001A   78..         MOV       R0,#?V4
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP102_8
   \   000024   EE           MOV       A,R6
   \   000025   FA           MOV       R2,A
   \   000026   EF           MOV       A,R7
   \   000027   FB           MOV       R3,A
   \   000028   90....       MOV       DPTR,#pgRes
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
    549              if (rtrn != OSAL_NV_ERASED)
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F4           CPL       A
   \   00003B   6008         JZ        ??compactPage_1
    550              {
    551                erasePage(pgRes);
   \   00003D                ; Setup parameters for call to function erasePage
   \   00003D   12....       LCALL     ?Subroutine22 & 0xFFFF
    552                return FALSE;
   \                     ??CrossCallReturnLabel_80:
   \   000040   7900         MOV       R1,#0x0
   \   000042   02....       LJMP      ??compactPage_2 & 0xFFFF
    553              }
    554            }
   \                     ??compactPage_1:
   \   000045   0E           INC       R6
   \   000046   EE           MOV       A,R6
   \   000047   7001         JNZ       ??compactPage_3
   \   000049   0F           INC       R7
   \                     ??compactPage_3:
   \   00004A   C3           CLR       C
   \   00004B   EF           MOV       A,R7
   \   00004C   9408         SUBB      A,#0x8
   \   00004E   40C4         JC        ??compactPage_0
    555          
    556            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \   000050   7E08         MOV       R6,#0x8
   \   000052   7F00         MOV       R7,#0x0
    557            rtrn = TRUE;
   \   000054   7401         MOV       A,#0x1
   \   000056   F0           MOVX      @DPTR,A
    558          
    559            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    560            {
    561              osalNvHdr_t hdr;
    562              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
   \                     ??compactPage_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V6,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V7,A
    563          
    564              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000065                ; Setup parameters for call to function HalFlashRead
   \   000065   75..08       MOV       ?V4,#0x8
   \   000068   75..00       MOV       ?V5,#0x0
   \   00006B   78..         MOV       R0,#?V4
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7403         MOV       A,#0x3
   \   000072   12....       LCALL     ?XSTACK_DISP102_8
   \   000075   EE           MOV       A,R6
   \   000076   FA           MOV       R2,A
   \   000077   EF           MOV       A,R7
   \   000078   FB           MOV       R3,A
   \   000079   A9..         MOV       R1,?V0
   \   00007B   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00007E   12....       LCALL     ?DEALLOC_XSTACK8
    565          
    566              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   000081   7401         MOV       A,#0x1
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E0           MOVX      A,@DPTR
   \   000087   F4           CPL       A
   \   000088   7003         JNZ       ??compactPage_5
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   F4           CPL       A
   \                     ??compactPage_5:
   \   00008D   7003         JNZ       $+5
   \   00008F   02....       LJMP      ??compactPage_6 & 0xFFFF
    567              {
    568                break;
    569              }
    570          
    571              // Get the actual size in bytes which is the ceiling(hdr.len)
    572              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   000092   7403         MOV       A,#0x3
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00009A   4008         JC        ??compactPage_7
   \   00009C   75..FC       MOV       ?V4,#-0x4
   \   00009F   75..FF       MOV       ?V5,#-0x1
   \   0000A2   8008         SJMP      ??compactPage_8
   \                     ??compactPage_7:
   \   0000A4   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000A7   F5..         MOV       ?V4,A
   \   0000A9   E9           MOV       A,R1
   \   0000AA   F5..         MOV       ?V5,A
    573          
    574              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_8:
   \   0000AC   74F8         MOV       A,#-0x8
   \   0000AE   C3           CLR       C
   \   0000AF   9E           SUBB      A,R6
   \   0000B0   F8           MOV       R0,A
   \   0000B1   7407         MOV       A,#0x7
   \   0000B3   9F           SUBB      A,R7
   \   0000B4   F9           MOV       R1,A
   \   0000B5   C3           CLR       C
   \   0000B6   E8           MOV       A,R0
   \   0000B7   95..         SUBB      A,?V4
   \   0000B9   E9           MOV       A,R1
   \   0000BA   95..         SUBB      A,?V5
   \   0000BC   5003         JNC       $+5
   \   0000BE   02....       LJMP      ??compactPage_6 & 0xFFFF
    575              {
    576                break;
    577              }
    578          
    579              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000C1   74F8         MOV       A,#-0x8
   \   0000C3   C3           CLR       C
   \   0000C4   95..         SUBB      A,?V6
   \   0000C6   F8           MOV       R0,A
   \   0000C7   7407         MOV       A,#0x7
   \   0000C9   95..         SUBB      A,?V7
   \   0000CB   F9           MOV       R1,A
   \   0000CC   C3           CLR       C
   \   0000CD   E8           MOV       A,R0
   \   0000CE   95..         SUBB      A,?V4
   \   0000D0   E9           MOV       A,R1
   \   0000D1   95..         SUBB      A,?V5
   \   0000D3   5003         JNC       $+5
   \   0000D5   02....       LJMP      ??compactPage_9 & 0xFFFF
    580              {
    581                rtrn = FALSE;
    582                break;
    583              }
    584          
    585              srcOff += OSAL_NV_HDR_SIZE;
   \   0000D8   EE           MOV       A,R6
   \   0000D9   2408         ADD       A,#0x8
   \   0000DB   FE           MOV       R6,A
   \   0000DC   E4           CLR       A
   \   0000DD   3F           ADDC      A,R7
   \   0000DE   FF           MOV       R7,A
    586          
    587              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000DF   7401         MOV       A,#0x1
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000E7   7003         JNZ       $+5
   \   0000E9   02....       LJMP      ??compactPage_10 & 0xFFFF
   \   0000EC   7401         MOV       A,#0x1
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   65..         XRL       A,?V2
   \   0000F4   7004         JNZ       ??compactPage_11
   \   0000F6   A3           INC       DPTR
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   65..         XRL       A,?V3
   \                     ??compactPage_11:
   \   0000FA   7003         JNZ       $+5
   \   0000FC   02....       LJMP      ??compactPage_10 & 0xFFFF
    588              {
    589                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   0000FF                ; Setup parameters for call to function calcChkF
   \   0000FF   EE           MOV       A,R6
   \   000100   FA           MOV       R2,A
   \   000101   EF           MOV       A,R7
   \   000102   FB           MOV       R3,A
   \   000103   A9..         MOV       R1,?V0
   \   000105   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000108   7405         MOV       A,#0x5
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   68           XRL       A,R0
   \   00010F   7003         JNZ       ??compactPage_12
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   69           XRL       A,R1
   \                     ??compactPage_12:
   \   000114   6003         JZ        $+5
   \   000116   02....       LJMP      ??compactPage_10 & 0xFFFF
    590                {
    591                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    592                   * OSAL_Nv interruptions caused by resets.
    593                   */
    594                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000119   7407         MOV       A,#0x7
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   F4           CPL       A
   \   000120   7003         JNZ       ??compactPage_13
   \   000122   A3           INC       DPTR
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F4           CPL       A
   \                     ??compactPage_13:
   \   000125   700B         JNZ       ??compactPage_14
    595                  {
    596                    setItem( srcPg, srcOff, eNvXfer );
   \   000127                ; Setup parameters for call to function setItem
   \   000127   7C00         MOV       R4,#0x0
   \   000129   EE           MOV       A,R6
   \   00012A   FA           MOV       R2,A
   \   00012B   EF           MOV       A,R7
   \   00012C   FB           MOV       R3,A
   \   00012D   A9..         MOV       R1,?V0
   \   00012F   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
    597                  }
    598          
    599                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   000132                ; Setup parameters for call to function writeItem
   \   000132   75..00       MOV       ?V1,#0x0
   \   000135   78..         MOV       R0,#?V1
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013A   E4           CLR       A
   \   00013B   F5..         MOV       ?V8,A
   \   00013D   F5..         MOV       ?V9,A
   \   00013F   78..         MOV       R0,#?V8
   \   000141   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000144   7406         MOV       A,#0x6
   \   000146   12....       LCALL     ?XSTACK_DISP0_8
   \   000149   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00014C   7404         MOV       A,#0x4
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000154   90....       MOV       DPTR,#pgRes
   \   000157   E0           MOVX      A,@DPTR
   \   000158   F9           MOV       R1,A
   \   000159   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00015C   7403         MOV       A,#0x3
   \   00015E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000161   E9           MOV       A,R1
   \   000162   7003         JNZ       $+5
   \   000164   02....       LJMP      ??compactPage_9 & 0xFFFF
    600                  {
    601                    dstOff += OSAL_NV_HDR_SIZE;
   \   000167   E5..         MOV       A,?V6
   \   000169   2408         ADD       A,#0x8
   \   00016B   F5..         MOV       ?V6,A
   \   00016D   E4           CLR       A
   \   00016E   35..         ADDC      A,?V7
   \   000170   F5..         MOV       ?V7,A
    602                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   000172                ; Setup parameters for call to function xferBuf
   \   000172   78..         MOV       R0,#?V4
   \   000174   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000177   78..         MOV       R0,#?V6
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   90....       MOV       DPTR,#pgRes
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   FC           MOV       R4,A
   \   000181   EE           MOV       A,R6
   \   000182   FA           MOV       R2,A
   \   000183   EF           MOV       A,R7
   \   000184   FB           MOV       R3,A
   \   000185   A9..         MOV       R1,?V0
   \   000187   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   00018A   7404         MOV       A,#0x4
   \   00018C   12....       LCALL     ?DEALLOC_XSTACK8
    603                    // Calculate and write the new checksum.
    604                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   00018F                ; Setup parameters for call to function calcChkF
   \   00018F   7403         MOV       A,#0x3
   \   000191   12....       LCALL     ?XSTACK_DISP0_8
   \   000194   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000197   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   00019A   7405         MOV       A,#0x5
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0001A2   7002         JNZ       ??compactPage_15
   \   0001A4   EB           MOV       A,R3
   \   0001A5   6D           XRL       A,R5
   \                     ??compactPage_15:
   \   0001A6   704F         JNZ       ??compactPage_9
    605                    {
    606                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001A8                ; Setup parameters for call to function setChk
   \   0001A8   AA..         MOV       R2,?V6
   \   0001AA   AB..         MOV       R3,?V7
   \   0001AC   90....       MOV       DPTR,#pgRes
   \   0001AF   E0           MOVX      A,@DPTR
   \   0001B0   F9           MOV       R1,A
   \   0001B1   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   0001B4   8A..         MOV       ?V8,R2
   \   0001B6   8B..         MOV       ?V9,R3
   \   0001B8   A8..         MOV       R0,?V8
   \   0001BA   A9..         MOV       R1,?V9
   \   0001BC   7405         MOV       A,#0x5
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   E0           MOVX      A,@DPTR
   \   0001C2   68           XRL       A,R0
   \   0001C3   7003         JNZ       ??compactPage_16
   \   0001C5   A3           INC       DPTR
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   69           XRL       A,R1
   \                     ??compactPage_16:
   \   0001C8   702D         JNZ       ??compactPage_9
    607                      {
    608                        rtrn = FALSE;
    609                        break;
    610                      }
    611                      else
    612                      {
    613                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \   0001CA                ; Setup parameters for call to function hotItemUpdate
   \   0001CA   7401         MOV       A,#0x1
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ?Subroutine12 & 0xFFFF
    614                      }
    615                    }
    616                    else
    617                    {
    618                      rtrn = FALSE;
    619                      break;
    620                    }
    621                  }
   \                     ??CrossCallReturnLabel_7:
   \   0001D2   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    622                  else
    623                  {
    624                    rtrn = FALSE;
    625                    break;
    626                  }
    627                }
    628              }
    629          
    630              srcOff += sz;
   \                     ??compactPage_10:
   \   0001D5   EE           MOV       A,R6
   \   0001D6   25..         ADD       A,?V4
   \   0001D8   FE           MOV       R6,A
   \   0001D9   EF           MOV       A,R7
   \   0001DA   35..         ADDC      A,?V5
   \   0001DC   FF           MOV       R7,A
   \   0001DD   C3           CLR       C
   \   0001DE   EE           MOV       A,R6
   \   0001DF   94F8         SUBB      A,#-0x8
   \   0001E1   EF           MOV       A,R7
   \   0001E2   9407         SUBB      A,#0x7
   \   0001E4   5003         JNC       $+5
   \   0001E6   02....       LJMP      ??compactPage_4 & 0xFFFF
    631            }
    632          
    633            if (rtrn == FALSE)
   \                     ??compactPage_6:
   \   0001E9   85..82       MOV       DPL,?XSP + 0
   \   0001EC   85..83       MOV       DPH,?XSP + 1
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   700F         JNZ       ??compactPage_17
    634            {
    635              erasePage(pgRes);
   \                     ??compactPage_18:
   \   0001F2                ; Setup parameters for call to function erasePage
   \   0001F2   12....       LCALL     ?Subroutine22 & 0xFFFF
    636            }
   \                     ??CrossCallReturnLabel_81:
   \   0001F5   8016         SJMP      ??CrossCallReturnLabel_40
   \                     ??compactPage_9:
   \   0001F7   85..82       MOV       DPL,?XSP + 0
   \   0001FA   85..83       MOV       DPH,?XSP + 1
   \   0001FD   E4           CLR       A
   \   0001FE   F0           MOVX      @DPTR,A
   \   0001FF   80F1         SJMP      ??compactPage_18
    637            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_17:
   \   000201   E5..         MOV       A,?V2
   \   000203   45..         ORL       A,?V3
   \   000205   7006         JNZ       ??CrossCallReturnLabel_40
    638            {
    639              COMPACT_PAGE_CLEANUP(srcPg);
   \   000207                ; Setup parameters for call to function setPageUse
   \   000207   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00020A                ; Setup parameters for call to function erasePage
   \   00020A   12....       LCALL     ?Subroutine29 & 0xFFFF
    640            }
    641            // else invoking function must cleanup.
    642          
    643            return rtrn;
   \                     ??CrossCallReturnLabel_40:
   \   00020D   85..82       MOV       DPL,?XSP + 0
   \   000210   85..83       MOV       DPH,?XSP + 1
   \   000213   E0           MOVX      A,@DPTR
   \   000214   F9           MOV       R1,A
   \                     ??compactPage_2:
   \   000215   7409         MOV       A,#0x9
   \   000217   02....       LJMP      ??Subroutine47_0 & 0xFFFF
    644          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV       DPTR,#pgRes
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003   AA..         MOV       R2,?V6
   \   000005   AB..         MOV       R3,?V7
   \   000007   90....       MOV       DPTR,#pgRes
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   7A01         MOV       R2,#0x1
   \   000002   90....       MOV       DPTR,#pgRes
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??setPageUse::?relay`; Banked call to: setPageUse
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   EA           MOV       A,R2
   \   000004   6C           XRL       A,R4
   \   000005   22           RET
    645          
    646          /*********************************************************************
    647           * @fn      findItem
    648           *
    649           * @brief   Find an item Id in NV and return the page and offset to its data.
    650           *
    651           * @param   id - Valid NV item Id.
    652           *
    653           * @return  Offset of data corresponding to item Id, if found;
    654           *          otherwise OSAL_NV_ITEM_NULL.
    655           *
    656           *          The page containing the item, if found;
    657           *          otherwise no valid assignment made - left equal to item Id.
    658           *
    659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          static uint16 findItem( uint16 id )
   \                     findItem:
    661          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   8003         SJMP      ??findItem_0
    662            uint16 off;
    663            uint8 pg;
    664          
    665            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
    666            {
    667              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
    668              {
    669                findPg = pg;
    670                return off;
    671              }
    672            }
    673          
    674            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    675            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
    676            {
    677              return findItem( id | OSAL_NV_SOURCE_ID );
   \                     ??findItem_1:
   \   00000A   7480         MOV       A,#-0x80
   \   00000C   4F           ORL       A,R7
   \                     ??findItem_0:
   \   00000D   FF           MOV       R7,A
    678            }
   \   00000E   75..79       MOV       ?V0,#0x79
   \                     ??findItem_2:
   \   000011                ; Setup parameters for call to function initPage
   \   000011   7C00         MOV       R4,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   A9..         MOV       R1,?V0
   \   000019   12....       LCALL     `??initPage::?relay`; Banked call to: initPage
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6008         JZ        ??findItem_3
   \   000020   E5..         MOV       A,?V0
   \   000022   90....       MOV       DPTR,#findPg
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8015         SJMP      ??findItem_4
   \                     ??findItem_3:
   \   000028   05..         INC       ?V0
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C3           CLR       C
   \   00002D   947F         SUBB      A,#0x7f
   \   00002F   40E0         JC        ??findItem_2
   \   000031   EF           MOV       A,R7
   \   000032   5480         ANL       A,#0x80
   \   000034   60D4         JZ        ??findItem_1
    679            else
    680            {
    681              findPg = OSAL_NV_PAGE_NULL;
   \   000036   90....       MOV       DPTR,#findPg
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    682              return OSAL_NV_ITEM_NULL;
   \   00003B   FA           MOV       R2,A
   \   00003C   FB           MOV       R3,A
    683            }
   \                     ??findItem_4:
   \   00003D   02....       LJMP      ??Subroutine45_0 & 0xFFFF
    684          }
    685          
    686          /*********************************************************************
    687           * @fn      initItem
    688           *
    689           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    690           *
    691           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    692           *                 (i.e. if invoked from osal_nv_item_init() ).
    693           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    694           *                 is ok to use as a return value of the page number to be cleaned with
    695           *                 COMPACT_PAGE_CLEANUP().
    696           *                 (i.e. if invoked from osal_nv_write() ).
    697           * @param   id  - Valid NV item Id.
    698           * @param   len - Item data length.
    699           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    700           *
    701           * @return  The OSAL Nv page number if item write and read back checksums ok;
    702           *          OSAL_NV_PAGE_NULL otherwise.
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
    706            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR       C
   \   000015   EC           MOV       A,R4
   \   000016   94F4         SUBB      A,#-0xc
   \   000018   ED           MOV       A,R5
   \   000019   94FF         SUBB      A,#-0x1
   \   00001B   400E         JC        ??initItem_0
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   74FC         MOV       A,#-0x4
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   74FF         MOV       A,#-0x1
   \   000029   8019         SJMP      ??initItem_1
   \                     ??initItem_0:
   \   00002B   EC           MOV       A,R4
   \   00002C   2403         ADD       A,#0x3
   \   00002E   F8           MOV       R0,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V1
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   54FC         ANL       A,#0xfc
   \   000036   2408         ADD       A,#0x8
   \   000038   5001         JNC       ??initItem_2
   \   00003A   09           INC       R1
   \                     ??initItem_2:
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   E9           MOV       A,R1
   \                     ??initItem_1:
   \   000044   F0           MOVX      @DPTR,A
    707            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \   000045   7F00         MOV       R7,#0x0
    708            uint8 cnt = OSAL_NV_PAGES_USED;
   \   000047   7C06         MOV       R4,#0x6
    709            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000049   90....       MOV       DPTR,#pgRes
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   04           INC       A
   \   00004E   FE           MOV       R6,A
    710          
    711            do {
    712              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_3:
   \   00004F   EE           MOV       A,R6
   \   000050   C3           CLR       C
   \   000051   947F         SUBB      A,#0x7f
   \   000053   4002         JC        ??initItem_4
    713              {
    714                pg = OSAL_NV_PAGE_BEG;
   \   000055   7E79         MOV       R6,#0x79
    715              }
    716              if ( pg != pgRes )
   \                     ??initItem_4:
   \   000057   90....       MOV       DPTR,#pgRes
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   6E           XRL       A,R6
   \   00005C   6030         JZ        ??initItem_5
    717              {
    718                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   00005E   7487         MOV       A,#-0x79
   \   000060   2E           ADD       A,R6
    719                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   000061   25E0         ADD       A,0xE0 /* A   */
   \   000063   F8           MOV       R0,A
   \   000064   E4           CLR       A
   \   000065   33           RLC       A
   \   000066   F9           MOV       R1,A
   \   000067   74..         MOV       A,#pgOff & 0xff
   \   000069   28           ADD       A,R0
   \   00006A   F582         MOV       DPL,A
   \   00006C   74..         MOV       A,#(pgOff >> 8) & 0xff
   \   00006E   12....       LCALL     ?Subroutine15 & 0xFFFF
    720                {
    721                  break;
    722                }
    723              }
   \                     ??CrossCallReturnLabel_118:
   \   000071   E4           CLR       A
   \   000072   C3           CLR       C
   \   000073   9A           SUBB      A,R2
   \   000074   FA           MOV       R2,A
   \   000075   7408         MOV       A,#0x8
   \   000077   9B           SUBB      A,R3
   \   000078   FB           MOV       R3,A
   \   000079   74..         MOV       A,#pgLost & 0xff
   \   00007B   28           ADD       A,R0
   \   00007C   F582         MOV       DPL,A
   \   00007E   74..         MOV       A,#(pgLost >> 8) & 0xff
   \   000080   39           ADDC      A,R1
   \   000081   F583         MOV       DPH,A
   \   000083   E0           MOVX      A,@DPTR
   \   000084   2A           ADD       A,R2
   \   000085   FA           MOV       R2,A
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   3B           ADDC      A,R3
   \   000089   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00008C   5008         JNC       ??initItem_6
    724              pg++;
   \                     ??initItem_5:
   \   00008E   0E           INC       R6
    725            } while (--cnt);
   \   00008F   1C           DEC       R4
   \   000090   EC           MOV       A,R4
   \   000091   70BC         JNZ       ??initItem_3
   \   000093   02....       LJMP      ??initItem_7 & 0xFFFF
    726          
    727            if (cnt)
   \                     ??initItem_6:
   \   000096   EC           MOV       A,R4
   \   000097   7003         JNZ       $+5
   \   000099   02....       LJMP      ??initItem_7 & 0xFFFF
   \   00009C   741C         MOV       A,#0x1c
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   F5..         MOV       ?V6,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F5..         MOV       ?V7,A
    728            {
    729              // Item fits if an old page is compacted.
    730              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   0000A8   EE           MOV       A,R6
   \   0000A9   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000AC   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000AF   FA           MOV       R2,A
   \   0000B0   7408         MOV       A,#0x8
   \   0000B2   99           SUBB      A,R1
   \   0000B3   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000B6   4003         JC        $+5
   \   0000B8   02....       LJMP      ??initItem_8 & 0xFFFF
    731              {
    732                osalNvPgHdr_t pgHdr;
    733          
    734                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    735                 * OSAL_Nv interruptions caused by resets.
    736                 */
    737                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   0000BB                ; Setup parameters for call to function HalFlashRead
   \   0000BB   75..08       MOV       ?V8,#0x8
   \   0000BE   8F..         MOV       ?V9,R7
   \   0000C0   78..         MOV       R0,#?V8
   \   0000C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C5   7404         MOV       A,#0x4
   \   0000C7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CA   7A00         MOV       R2,#0x0
   \   0000CC   7B00         MOV       R3,#0x0
   \   0000CE   EE           MOV       A,R6
   \   0000CF   F9           MOV       R1,A
   \   0000D0   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
    738                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   0000D6   7406         MOV       A,#0x6
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   F4           CPL       A
   \   0000DD   7003         JNZ       ??initItem_9
   \   0000DF   A3           INC       DPTR
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   F4           CPL       A
   \                     ??initItem_9:
   \   0000E2   700B         JNZ       ??initItem_10
    739                {
    740                  // Mark the old page as being in process of compaction.
    741                  sz = OSAL_NV_ZEROED_ID;
   \   0000E4   12....       LCALL     ?Subroutine10 & 0xFFFF
    742                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
    743                }
   \                     ??CrossCallReturnLabel_84:
   \   0000E7   7A04         MOV       R2,#0x4
   \   0000E9   FB           MOV       R3,A
   \   0000EA   EE           MOV       A,R6
   \   0000EB   F9           MOV       R1,A
   \   0000EC   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    744          
    745                /* First the old page is compacted, then the new item will be the last one written to what
    746                 * had been the reserved page.
    747                 */
    748                if (compactPage( pg, id ))
   \                     ??initItem_10:
   \   0000EF                ; Setup parameters for call to function compactPage
   \   0000EF   AA..         MOV       R2,?V4
   \   0000F1   AB..         MOV       R3,?V5
   \   0000F3   EE           MOV       A,R6
   \   0000F4   F9           MOV       R1,A
   \   0000F5   12....       LCALL     `??compactPage::?relay`; Banked call to: compactPage
   \   0000F8   E9           MOV       A,R1
   \   0000F9   606A         JZ        ??initItem_7
    749                {
    750                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0000FB                ; Setup parameters for call to function writeItem
   \   0000FB   E5..         MOV       A,?V2
   \   0000FD   F5..         MOV       ?V3,A
   \   0000FF   78..         MOV       R0,#?V3
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000104   78..         MOV       R0,#?V6
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000109   AC..         MOV       R4,?V0
   \   00010B   AD..         MOV       R5,?V1
   \   00010D   AA..         MOV       R2,?V4
   \   00010F   AB..         MOV       R3,?V5
   \   000111   90....       MOV       DPTR,#pgRes
   \   000114   E0           MOVX      A,@DPTR
   \   000115   F9           MOV       R1,A
   \   000116   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   000119   7403         MOV       A,#0x3
   \   00011B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011E   E9           MOV       A,R1
   \   00011F   6005         JZ        ??initItem_11
    751                  {
    752                    rtrn = pgRes;
   \   000121   90....       MOV       DPTR,#pgRes
   \   000124   E0           MOVX      A,@DPTR
   \   000125   FF           MOV       R7,A
    753                  }
    754          
    755                  if ( flag == FALSE )
   \                     ??initItem_11:
   \   000126   E5..         MOV       A,?V2
   \   000128   7009         JNZ       ??initItem_12
    756                  {
    757                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    758                     * the old page to be cleaned up.
    759                     */
    760                    *(uint8 *)buf = pg;
   \   00012A   EE           MOV       A,R6
   \   00012B   85..82       MOV       DPL,?V6
   \   00012E   85..83       MOV       DPH,?V7
   \   000131   800C         SJMP      ??initItem_13
    761                  }
    762                  else
    763                  {
    764                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    765                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    766                     */
    767                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_12:
   \   000133                ; Setup parameters for call to function setPageUse
   \   000133   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000136                ; Setup parameters for call to function erasePage
   \   000136   EE           MOV       A,R6
   \   000137   F9           MOV       R1,A
   \   000138   12....       LCALL     `??erasePage::?relay`; Banked call to: erasePage
   \   00013B   EE           MOV       A,R6
   \   00013C   90....       MOV       DPTR,#pgRes
   \                     ??initItem_13:
   \   00013F   F0           MOVX      @DPTR,A
   \   000140   8023         SJMP      ??initItem_7
    768                  }
    769                }
    770              }
    771              else
    772              {
    773                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_8:
   \   000142                ; Setup parameters for call to function writeItem
   \   000142   E5..         MOV       A,?V2
   \   000144   F5..         MOV       ?V3,A
   \   000146   78..         MOV       R0,#?V3
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014B   78..         MOV       R0,#?V6
   \   00014D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000150   AC..         MOV       R4,?V0
   \   000152   AA..         MOV       R2,?V4
   \   000154   AB..         MOV       R3,?V5
   \   000156   EE           MOV       A,R6
   \   000157   F9           MOV       R1,A
   \   000158   12....       LCALL     `??writeItem::?relay`; Banked call to: writeItem
   \   00015B   7403         MOV       A,#0x3
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   E9           MOV       A,R1
   \   000161   6002         JZ        ??initItem_7
    774                {
    775                  rtrn = pg;
   \   000163   EE           MOV       A,R6
   \   000164   FF           MOV       R7,A
    776                }
    777              }
    778            }
    779          
    780            return rtrn;
   \                     ??initItem_7:
   \   000165   EF           MOV       A,R7
   \   000166   F9           MOV       R1,A
   \   000167   740A         MOV       A,#0xa
   \   000169   02....       LJMP      ??Subroutine47_0 & 0xFFFF
    781          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   FB           MOV       R3,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00000A   C3           CLR       C
   \   00000B   EA           MOV       A,R2
   \   00000C   98           SUBB      A,R0
   \   00000D   EB           MOV       A,R3
   \   00000E   99           SUBB      A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine50_0
   \   000007                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   E4           CLR       A
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
    782          
    783          /*********************************************************************
    784           * @fn      setItem
    785           *
    786           * @brief   Set an item Id or status to mark its state.
    787           *
    788           * @param   pg - Valid NV page.
    789           * @param   offset - Valid offset into the page of the item data - the header
    790           *                   offset is calculated from this.
    791           * @param   stat - Valid enum value for the item status.
    792           *
    793           * @return  none
    794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    795          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    796          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   8C..         MOV       ?V0,R4
    797            osalNvHdr_t hdr;
    798          
    799            offset -= OSAL_NV_HDR_SIZE;
   \   00000E   EA           MOV       A,R2
   \   00000F   24F8         ADD       A,#-0x8
   \   000011   F5..         MOV       ?V2,A
   \   000013   EB           MOV       A,R3
   \   000014   34FF         ADDC      A,#-0x1
   \   000016   F5..         MOV       ?V3,A
    800            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000018                ; Setup parameters for call to function HalFlashRead
   \   000018   75..08       MOV       ?V4,#0x8
   \   00001B   75..00       MOV       ?V5,#0x0
   \   00001E   78..         MOV       R0,#?V4
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP102_8
   \   000028   AA..         MOV       R2,?V2
   \   00002A   AB..         MOV       R3,?V3
   \   00002C   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    801          
    802            if ( stat == eNvXfer )
   \   000032   E5..         MOV       A,?V0
   \   000034   7022         JNZ       ??setItem_0
    803            {
    804              hdr.stat = OSAL_NV_ACTIVE;
   \   000036   7406         MOV       A,#0x6
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   E4           CLR       A
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
    805              /* Write status to flash. Total of 4 bytes written to Flash 
    806               * ( 2 bytes of checksum and 2 bytes of status) 
    807               */
    808              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   00003F                ; Setup parameters for call to function writeWord
   \   00003F   7404         MOV       A,#0x4
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   AC82         MOV       R4,DPL
   \   000046   AD83         MOV       R5,DPH
   \   000048   E5..         MOV       A,?V2
   \   00004A   2404         ADD       A,#0x4
   \   00004C   FA           MOV       R2,A
   \   00004D   E4           CLR       A
   \   00004E   35..         ADDC      A,?V3
   \   000050   FB           MOV       R3,A
   \   000051   A9..         MOV       R1,?V1
   \   000053   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   000056   8031         SJMP      ??CrossCallReturnLabel_88
    809            }
    810            else // if ( stat == eNvZero )
    811            {
    812              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    813                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   2403         ADD       A,#0x3
   \   000060   F8           MOV       R0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   3400         ADDC      A,#0x0
   \   000065   F9           MOV       R1,A
   \   000066   E8           MOV       A,R0
   \   000067   12....       LCALL     ?Subroutine33 & 0xFFFF
    814              hdr.id = 0;
   \                     ??CrossCallReturnLabel_47:
   \   00006A   12....       LCALL     ?Subroutine10 & 0xFFFF
    815              writeWord( pg, offset, (uint8 *)(&hdr) );
   \                     ??CrossCallReturnLabel_85:
   \   00006D   AA..         MOV       R2,?V2
   \   00006F   AB..         MOV       R3,?V3
   \   000071   A9..         MOV       R1,?V1
   \   000073   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    816              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   000076   A8..         MOV       R0,?V1
   \   000078   E8           MOV       A,R0
   \   000079   28           ADD       A,R0
   \   00007A   F8           MOV       R0,A
   \   00007B   E4           CLR       A
   \   00007C   33           RLC       A
   \   00007D   F9           MOV       R1,A
   \   00007E   74..         MOV       A,#(pgLost + 14) & 0xff
   \   000080   28           ADD       A,R0
   \   000081   F582         MOV       DPL,A
   \   000083   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   000085   39           ADDC      A,R1
   \   000086   12....       LCALL     ?Subroutine19 & 0xFFFF
    817            }
    818          }
   \                     ??CrossCallReturnLabel_88:
   \   000089   7408         MOV       A,#0x8
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E                REQUIRE ?Subroutine3
   \   00008E                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3F           ADDC      A,R7
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   54FC         ANL       A,#0xfc
   \   000002   2408         ADD       A,#0x8
   \   000004   FE           MOV       R6,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   FF           MOV       R7,A
   \   000008   22           RET
    819          
    820          /*********************************************************************
    821           * @fn      setChk
    822           *
    823           * @brief   Set the item header checksum given the data buffer offset.
    824           *
    825           * @param   pg - Valid NV page.
    826           * @param   offset - Valid offset into the page of the item data - the header
    827           *                   offset is calculated from this.
    828           * @param   chk - The checksum to set.
    829           *
    830           * @return  The checksum read back.
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine44_0
   \   000002                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V0,R1
    834            offset -= OSAL_NV_WORD_SIZE;
   \   000017   EA           MOV       A,R2
   \   000018   24FC         ADD       A,#-0x4
   \   00001A   FE           MOV       R6,A
   \   00001B   EB           MOV       A,R3
   \   00001C   34FF         ADDC      A,#-0x1
   \   00001E   FF           MOV       R7,A
    835            writeWordH( pg, offset, (uint8 *)&chk );
   \   00001F                ; Setup parameters for call to function writeWordH
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??writeWordH::?relay`; Banked call to: writeWordH
    836            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   00002A                ; Setup parameters for call to function HalFlashRead
   \   00002A   75..02       MOV       ?V2,#0x2
   \   00002D   75..00       MOV       ?V3,#0x0
   \   000030   78..         MOV       R0,#?V2
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7402         MOV       A,#0x2
   \   000037   12....       LCALL     ?XSTACK_DISP102_8
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   A9..         MOV       R1,?V0
   \   000040   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
    837          
    838            return chk;
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00004F   02....       LJMP      ?Subroutine0 & 0xFFFF
    839          }
    840          
    841          /*********************************************************************
    842           * @fn      calcChkB
    843           *
    844           * @brief   Calculates the data checksum over the 'buf' parameter.
    845           *
    846           * @param   len - Byte count of the data to be checksummed.
    847           * @param   buf - Data buffer to be checksummed.
    848           *
    849           * @return  Calculated checksum of the data bytes.
    850           */
    851          static uint16 calcChkB( uint16 len, uint8 *buf )
    852          {
    853            uint8 fill = len % OSAL_NV_WORD_SIZE;
    854            uint16 chk;
    855          
    856            if ( !buf )
    857            {
    858              chk = len * OSAL_NV_ERASED;
    859            }
    860            else
    861            {
    862              chk = 0;
    863              while ( len-- )
    864              {
    865                chk += *buf++;
    866              }
    867            }
    868          
    869            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    870            if ( fill )
    871            {
    872              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
    873            }
    874          
    875            return chk;
    876          }
    877          
    878          /*********************************************************************
    879           * @fn      calcChkF
    880           *
    881           * @brief   Calculates the data checksum by reading the data bytes from NV.
    882           *
    883           * @param   pg - A valid NV Flash page.
    884           * @param   offset - A valid offset into the page.
    885           * @param   len - Byte count of the data to be checksummed.
    886           *
    887           * @return  Calculated checksum of the data bytes.
    888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    889          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    890          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V2,R2
   \   00000E   8B..         MOV       ?V3,R3
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    891            uint16 chk = 0;
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   75..00       MOV       ?V1,#0x0
    892          
    893            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   000018   EC           MOV       A,R4
   \   000019   2403         ADD       A,#0x3
   \   00001B   F5..         MOV       ?V6,A
   \   00001D   E4           CLR       A
   \   00001E   3F           ADDC      A,R7
   \   00001F   F5..         MOV       ?V7,A
   \   000021   7402         MOV       A,#0x2
   \   000023   78..         MOV       R0,#?V6
   \   000025   12....       LCALL     ?US_SHR
   \   000028   AE..         MOV       R6,?V6
   \   00002A   AF..         MOV       R7,?V7
    894          
    895            while ( len-- )
   \                     ??calcChkF_0:
   \   00002C   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00002F   6050         JZ        ??calcChkF_1
    896            {
    897              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    898          
    899              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   000031                ; Setup parameters for call to function HalFlashRead
   \   000031   75..04       MOV       ?V6,#0x4
   \   000034   75..00       MOV       ?V7,#0x0
   \   000037   78..         MOV       R0,#?V6
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP102_8
   \   000041   AA..         MOV       R2,?V2
   \   000043   AB..         MOV       R3,?V3
   \   000045   A9..         MOV       R1,?V4
   \   000047   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
    900              offset += OSAL_NV_WORD_SIZE;
   \   00004D   E5..         MOV       A,?V2
   \   00004F   2404         ADD       A,#0x4
   \   000051   F5..         MOV       ?V2,A
   \   000053   E4           CLR       A
   \   000054   35..         ADDC      A,?V3
   \   000056   F5..         MOV       ?V3,A
    901          
    902              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   000058   7800         MOV       R0,#0x0
    903              {
    904                chk += tmp[cnt];
   \                     ??calcChkF_2:
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E582         MOV       A,DPL
   \   000064   2A           ADD       A,R2
   \   000065   F582         MOV       DPL,A
   \   000067   E4           CLR       A
   \   000068   3583         ADDC      A,DPH
   \   00006A   F583         MOV       DPH,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FA           MOV       R2,A
   \   00006E   E5..         MOV       A,?V0
   \   000070   2A           ADD       A,R2
   \   000071   F5..         MOV       ?V0,A
   \   000073   E4           CLR       A
   \   000074   35..         ADDC      A,?V1
   \   000076   F5..         MOV       ?V1,A
    905              }
   \   000078   08           INC       R0
   \   000079   E8           MOV       A,R0
   \   00007A   C3           CLR       C
   \   00007B   9404         SUBB      A,#0x4
   \   00007D   50AD         JNC       ??calcChkF_0
   \   00007F   80D9         SJMP      ??calcChkF_2
    906            }
    907          
    908            return chk;
   \                     ??calcChkF_1:
   \   000081   AA..         MOV       R2,?V0
   \   000083   AB..         MOV       R3,?V1
   \   000085   7404         MOV       A,#0x4
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008A                REQUIRE ?Subroutine4
   \   00008A                ; // Fall through to label ?Subroutine4
    909          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1E           DEC       R6
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FF           MOV       R7,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   22           RET
    910          
    911          /*********************************************************************
    912           * @fn      writeWord
    913           *
    914           * @brief   Writes a Flash-WORD to NV.
    915           *
    916           * @param   pg - A valid NV Flash page.
    917           * @param   offset - A valid offset into the page.
    918           * @param   buf - Pointer to source buffer.
    919           *
    920           * @return  none
    921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    922          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    923          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    924            offset = (offset / HAL_FLASH_WORD_SIZE) +
    925                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    926          
    927            HalFlashWrite(offset, buf, 1);
   \   000005                ; Setup parameters for call to function HalFlashWrite
   \   000005   75..01       MOV       ?V0,#0x1
   \   000008   75..00       MOV       ?V1,#0x0
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   7402         MOV       A,#0x2
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?US_SHR
   \   00001B   E9           MOV       A,R1
   \   00001C   F5..         MOV       ?V2,A
   \   00001E   75..00       MOV       ?V3,#0x0
   \   000021   7409         MOV       A,#0x9
   \   000023   78..         MOV       R0,#?V2
   \   000025   12....       LCALL     ?S_SHL
   \   000028   E5..         MOV       A,?V0
   \   00002A   2400         ADD       A,#0x0
   \   00002C   FA           MOV       R2,A
   \   00002D   E5..         MOV       A,?V1
   \   00002F   35..         ADDC      A,?V3
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000035   02....       LJMP      ?Subroutine0 & 0xFFFF
    928          }
    929          
    930          /*********************************************************************
    931           * @fn      writeWordM
    932           *
    933           * @brief   Writes multiple Flash-WORDs to NV.
    934           *
    935           * @param   pg - A valid NV Flash page.
    936           * @param   offset - A valid offset into the page.
    937           * @param   buf - Pointer to source buffer.
    938           * @param   cnt - Number of 4-byte blocks to write.
    939           *
    940           * @return  none
    941           */
    942          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
    943          {
    944            offset = (offset / HAL_FLASH_WORD_SIZE) +
    945                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
    946            HalFlashWrite(offset, buf, cnt);
    947          }
    948          
    949          /*********************************************************************
    950           * @fn      writeWordH
    951           *
    952           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    953           *
    954           * @param   pg - A valid NV Flash page.
    955           * @param   offset - A valid offset into the page.
    956           * @param   buf - Pointer to source buffer.
    957           *
    958           * @return  none
    959           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    960          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    961          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    962            uint8 tmp[4];
    963          
    964            tmp[0] = buf[0];
   \   00000A   8C82         MOV       DPL,R4
   \   00000C   8D83         MOV       DPH,R5
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   85..83       MOV       DPH,?XSP + 1
   \   000015   F0           MOVX      @DPTR,A
    965            tmp[1] = buf[1];
   \   000016   8C82         MOV       DPL,R4
   \   000018   8D83         MOV       DPH,R5
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
    966            tmp[2] = OSAL_NV_ERASED;
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
    967            tmp[3] = OSAL_NV_ERASED;
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   74FF         MOV       A,#-0x1
   \   000035   F0           MOVX      @DPTR,A
    968          
    969            writeWord( pg, offset, tmp );
   \   000036                ; Setup parameters for call to function writeWord
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
    970          }
   \   00003D   7404         MOV       A,#0x4
   \   00003F   02....       LJMP      ?Subroutine1 & 0xFFFF
    971          
    972          /*********************************************************************
    973           * @fn      writeBuf
    974           *
    975           * @brief   Writes a data buffer to NV.
    976           *
    977           * @param   dstPg - A valid NV Flash page.
    978           * @param   offset - A valid offset into the page.
    979           * @param   len  - Byte count of the data to write.
    980           * @param   buf  - The data to write.
    981           *
    982           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    984          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V4,R4
   \   000012   8D..         MOV       ?V5,R5
    986            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   EA           MOV       A,R2
   \   000015   5403         ANL       A,#0x3
   \   000017   F5..         MOV       ?V0,A
   \   000019   7416         MOV       A,#0x16
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V3,A
    987            uint8 tmp[OSAL_NV_WORD_SIZE];
    988          
    989            if ( rem )
   \   000025   E5..         MOV       A,?V0
   \   000027   605E         JZ        ??writeBuf_0
    990            {
    991              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000029   74FC         MOV       A,#-0x4
   \   00002B   5E           ANL       A,R6
   \   00002C   FE           MOV       R6,A
    992              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00002D                ; Setup parameters for call to function HalFlashRead
   \   00002D   75..04       MOV       ?V6,#0x4
   \   000030   75..00       MOV       ?V7,#0x0
   \   000033   78..         MOV       R0,#?V6
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7402         MOV       A,#0x2
   \   00003A   12....       LCALL     ?XSTACK_DISP102_8
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??writeBuf_1:
   \   000045   E5..         MOV       A,?V4
   \   000047   45..         ORL       A,?V5
   \   000049   6028         JZ        ??writeBuf_2
    993          
    994              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    995              {
    996                tmp[rem++] = *buf++;
   \   00004B   85..82       MOV       DPL,?V2
   \   00004E   85..83       MOV       DPH,?V3
   \   000051   E0           MOVX      A,@DPTR
   \   000052   C0E0         PUSH      A
   \   000054   A8..         MOV       R0,?V0
   \   000056   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000059   D0E0         POP       A
   \   00005B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005E   05..         INC       ?V0
    997                len--;
   \   000060   E5..         MOV       A,?V4
   \   000062   24FF         ADD       A,#-0x1
   \   000064   F5..         MOV       ?V4,A
   \   000066   E5..         MOV       A,?V5
   \   000068   34FF         ADDC      A,#-0x1
   \   00006A   F5..         MOV       ?V5,A
    998              }
   \   00006C   E5..         MOV       A,?V0
   \   00006E   C3           CLR       C
   \   00006F   9404         SUBB      A,#0x4
   \   000071   40D2         JC        ??writeBuf_1
    999          
   1000              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_2:
   \   000073                ; Setup parameters for call to function writeWord
   \   000073   AC..         MOV       R4,?XSP + 0
   \   000075   AD..         MOV       R5,?XSP + 1
   \   000077   EE           MOV       A,R6
   \   000078   FA           MOV       R2,A
   \   000079   EF           MOV       A,R7
   \   00007A   FB           MOV       R3,A
   \   00007B   A9..         MOV       R1,?V1
   \   00007D   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1001              dstOff += OSAL_NV_WORD_SIZE;
   \   000080   EE           MOV       A,R6
   \   000081   2404         ADD       A,#0x4
   \   000083   FE           MOV       R6,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   FF           MOV       R7,A
   1002            }
   1003          
   1004            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   000087   E5..         MOV       A,?V4
   \   000089   5403         ANL       A,#0x3
   \   00008B   F5..         MOV       ?V0,A
   1005            len /= OSAL_NV_WORD_SIZE;
   \   00008D   85....       MOV       ?V6,?V4
   \   000090   85....       MOV       ?V7,?V5
   \   000093   7402         MOV       A,#0x2
   \   000095   78..         MOV       R0,#?V6
   \   000097   12....       LCALL     ?US_SHR
   \   00009A   85....       MOV       ?V4,?V6
   \   00009D   85....       MOV       ?V5,?V7
   1006          
   1007            if ( len )
   \   0000A0   E5..         MOV       A,?V4
   \   0000A2   45..         ORL       A,?V5
   \   0000A4   6048         JZ        ??CrossCallReturnLabel_42
   1008            {
   1009              writeWordM( dstPg, dstOff, buf, len );
   \   0000A6                ; Setup parameters for call to function HalFlashWrite
   \   0000A6   78..         MOV       R0,#?V4
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AB   AC..         MOV       R4,?V2
   \   0000AD   AD..         MOV       R5,?V3
   \   0000AF   8E..         MOV       ?V6,R6
   \   0000B1   8F..         MOV       ?V7,R7
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   78..         MOV       R0,#?V6
   \   0000B7   12....       LCALL     ?US_SHR
   \   0000BA   E5..         MOV       A,?V1
   \   0000BC   F5..         MOV       ?V8,A
   \   0000BE   75..00       MOV       ?V9,#0x0
   \   0000C1   7409         MOV       A,#0x9
   \   0000C3   78..         MOV       R0,#?V8
   \   0000C5   12....       LCALL     ?S_SHL
   \   0000C8   E5..         MOV       A,?V6
   \   0000CA   2400         ADD       A,#0x0
   \   0000CC   FA           MOV       R2,A
   \   0000CD   E5..         MOV       A,?V7
   \   0000CF   35..         ADDC      A,?V9
   \   0000D1   FB           MOV       R3,A
   \   0000D2   12....       LCALL     `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   1010              dstOff += OSAL_NV_WORD_SIZE * len;
   \   0000DA   7402         MOV       A,#0x2
   \   0000DC   78..         MOV       R0,#?V4
   \   0000DE   12....       LCALL     ?S_SHL
   \   0000E1   A8..         MOV       R0,?V4
   \   0000E3   A9..         MOV       R1,?V5
   \   0000E5   EE           MOV       A,R6
   \   0000E6   28           ADD       A,R0
   \   0000E7   FE           MOV       R6,A
   \   0000E8   EF           MOV       A,R7
   \   0000E9   39           ADDC      A,R1
   \   0000EA   FF           MOV       R7,A
   1011              buf += OSAL_NV_WORD_SIZE * len;
   \   0000EB   12....       LCALL     ?Subroutine30 & 0xFFFF
   1012            }
   1013          
   1014            if ( rem )
   \                     ??CrossCallReturnLabel_42:
   \   0000EE   E5..         MOV       A,?V0
   \   0000F0   604F         JZ        ??writeBuf_3
   1015            {
   1016              uint8 idx = 0;
   \   0000F2   75..00       MOV       ?V4,#0x0
   1017              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000F5                ; Setup parameters for call to function HalFlashRead
   \   0000F5   75..04       MOV       ?V6,#0x4
   \   0000F8   75..00       MOV       ?V7,#0x0
   \   0000FB   78..         MOV       R0,#?V6
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?XSTACK_DISP102_8
   \   000105   EE           MOV       A,R6
   \   000106   FA           MOV       R2,A
   \   000107   EF           MOV       A,R7
   \   000108   FB           MOV       R3,A
   \   000109   A9..         MOV       R1,?V1
   \   00010B   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00010E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000111   8015         SJMP      ??writeBuf_4
   1018              while ( rem-- )
   1019              {
   1020                tmp[idx++] = *buf++;
   \                     ??writeBuf_5:
   \   000113   85..82       MOV       DPL,?V2
   \   000116   85..83       MOV       DPH,?V3
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   C0E0         PUSH      A
   \   00011C   A8..         MOV       R0,?V4
   \   00011E   12....       LCALL     ?Subroutine31 & 0xFFFF
   1021              }
   \                     ??CrossCallReturnLabel_44:
   \   000121   D0E0         POP       A
   \   000123   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000126   05..         INC       ?V4
   \                     ??writeBuf_4:
   \   000128   85....       MOV       ?V5,?V0
   \   00012B   74FF         MOV       A,#-0x1
   \   00012D   25..         ADD       A,?V5
   \   00012F   F5..         MOV       ?V0,A
   \   000131   04           INC       A
   \   000132   70DF         JNZ       ??writeBuf_5
   1022              writeWord( dstPg, dstOff, tmp );
   \   000134                ; Setup parameters for call to function writeWord
   \   000134   AC..         MOV       R4,?XSP + 0
   \   000136   AD..         MOV       R5,?XSP + 1
   \   000138   EE           MOV       A,R6
   \   000139   FA           MOV       R2,A
   \   00013A   EF           MOV       A,R7
   \   00013B   FB           MOV       R3,A
   \   00013C   A9..         MOV       R1,?V1
   \   00013E   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1023            }
   1024          }
   \                     ??writeBuf_3:
   \   000141   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E582         MOV       A,DPL
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3583         ADDC      A,DPH
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   8582..       MOV       ?V2,DPL
   \   00000B   8583..       MOV       ?V3,DPH
   \   00000E   22           RET
   1025          
   1026          /*********************************************************************
   1027           * @fn      xferBuf
   1028           *
   1029           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1030           *
   1031           * @return  none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FD           MOV       R5,A
   \   000008                REQUIRE ??Subroutine52_0
   \   000008                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   AA..         MOV       R2,?V4
   \   000002   AB..         MOV       R3,?V5
   \   000004   A9..         MOV       R1,?V6
   \   000006                REQUIRE ??Subroutine53_0
   \   000006                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V6,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   8C..         MOV       ?V3,R4
   \   000012   7416         MOV       A,#0x16
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine20 & 0xFFFF
   1035            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_20:
   \   00001A   E5..         MOV       A,?V0
   \   00001C   5403         ANL       A,#0x3
   \   00001E   F5..         MOV       ?V2,A
   \   000020   7418         MOV       A,#0x18
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   FE           MOV       R6,A
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   FF           MOV       R7,A
   1036            uint8 tmp[OSAL_NV_WORD_SIZE];
   1037          
   1038            if ( rem )
   \   00002A   E5..         MOV       A,?V2
   \   00002C   605E         JZ        ??CrossCallReturnLabel_45
   1039            {
   1040              dstOff -= rem;
   \   00002E   F8           MOV       R0,A
   \   00002F   C3           CLR       C
   \   000030   E5..         MOV       A,?V0
   \   000032   98           SUBB      A,R0
   \   000033   F5..         MOV       ?V0,A
   \   000035   E5..         MOV       A,?V1
   \   000037   9400         SUBB      A,#0x0
   \   000039   F5..         MOV       ?V1,A
   1041              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00003B                ; Setup parameters for call to function HalFlashRead
   \   00003B   75..04       MOV       ?V8,#0x4
   \   00003E   75..00       MOV       ?V9,#0x0
   \   000041   78..         MOV       R0,#?V8
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   AA..         MOV       R2,?V0
   \   00004D   AB..         MOV       R3,?V1
   \   00004F   A9..         MOV       R1,?V3
   \   000051   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??xferBuf_0:
   \   000057   EE           MOV       A,R6
   \   000058   4F           ORL       A,R7
   \   000059   602E         JZ        ??xferBuf_1
   1042          
   1043              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1044              {
   1045                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \   00005B                ; Setup parameters for call to function HalFlashRead
   \   00005B   75..01       MOV       ?V8,#0x1
   \   00005E   78..         MOV       R0,#?V8
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   A8..         MOV       R0,?V2
   \   000065   7402         MOV       A,#0x2
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   1046                srcOff++;
   \   000070   05..         INC       ?V4
   \   000072   E5..         MOV       A,?V4
   \   000074   7002         JNZ       ??xferBuf_2
   \   000076   05..         INC       ?V5
   1047                rem++;
   \                     ??xferBuf_2:
   \   000078   05..         INC       ?V2
   1048                len--;
   \   00007A   EE           MOV       A,R6
   \   00007B   24FF         ADD       A,#-0x1
   \   00007D   1E           DEC       R6
   \   00007E   EF           MOV       A,R7
   \   00007F   34FF         ADDC      A,#-0x1
   \   000081   FF           MOV       R7,A
   1049              }
   \   000082   E5..         MOV       A,?V2
   \   000084   C3           CLR       C
   \   000085   9404         SUBB      A,#0x4
   \   000087   40CE         JC        ??xferBuf_0
   1050          
   1051              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_1:
   \   000089                ; Setup parameters for call to function writeWord
   \   000089   12....       LCALL     ?Subroutine32 & 0xFFFF
   1052              dstOff += OSAL_NV_WORD_SIZE;
   1053            }
   1054          
   1055            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??CrossCallReturnLabel_45:
   \   00008C   EE           MOV       A,R6
   \   00008D   5403         ANL       A,#0x3
   \   00008F   F5..         MOV       ?V2,A
   1056            len /= OSAL_NV_WORD_SIZE;
   \   000091   8E..         MOV       ?V8,R6
   \   000093   8F..         MOV       ?V9,R7
   \   000095   7402         MOV       A,#0x2
   \   000097   78..         MOV       R0,#?V8
   \   000099   12....       LCALL     ?US_SHR
   \   00009C   AE..         MOV       R6,?V8
   \   00009E   AF..         MOV       R7,?V9
   \   0000A0   8024         SJMP      ??CrossCallReturnLabel_46
   1057          
   1058            while ( len-- )
   1059            {
   1060              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_3:
   \   0000A2                ; Setup parameters for call to function HalFlashRead
   \   0000A2   75..04       MOV       ?V8,#0x4
   \   0000A5   75..00       MOV       ?V9,#0x0
   \   0000A8   78..         MOV       R0,#?V8
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   7402         MOV       A,#0x2
   \   0000AF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B2   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000B5   12....       LCALL     ?DEALLOC_XSTACK8
   1061              srcOff += OSAL_NV_WORD_SIZE;
   \   0000B8   E5..         MOV       A,?V4
   \   0000BA   2404         ADD       A,#0x4
   \   0000BC   F5..         MOV       ?V4,A
   \   0000BE   E4           CLR       A
   \   0000BF   35..         ADDC      A,?V5
   \   0000C1   F5..         MOV       ?V5,A
   1062              writeWord( dstPg, dstOff, tmp );
   \   0000C3                ; Setup parameters for call to function writeWord
   \   0000C3   12....       LCALL     ?Subroutine32 & 0xFFFF
   1063              dstOff += OSAL_NV_WORD_SIZE;
   1064            }
   \                     ??CrossCallReturnLabel_46:
   \   0000C6   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   0000C9   70D7         JNZ       ??xferBuf_3
   1065          
   1066            if ( rem )
   \   0000CB   E5..         MOV       A,?V2
   \   0000CD   6054         JZ        ??xferBuf_4
   1067            {
   1068              uint8 idx = 0;
   \   0000CF   7E00         MOV       R6,#0x0
   1069              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   0000D1                ; Setup parameters for call to function HalFlashRead
   \   0000D1   75..04       MOV       ?V8,#0x4
   \   0000D4   8E..         MOV       ?V9,R6
   \   0000D6   78..         MOV       R0,#?V8
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DB   7402         MOV       A,#0x2
   \   0000DD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000E0   AA..         MOV       R2,?V0
   \   0000E2   AB..         MOV       R3,?V1
   \   0000E4   A9..         MOV       R1,?V3
   \   0000E6   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0000E9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EC   801E         SJMP      ??xferBuf_5
   1070              while ( rem-- )
   1071              {
   1072                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_6:
   \   0000EE                ; Setup parameters for call to function HalFlashRead
   \   0000EE   75..01       MOV       ?V8,#0x1
   \   0000F1   78..         MOV       R0,#?V8
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F6   EE           MOV       A,R6
   \   0000F7   F8           MOV       R0,A
   \   0000F8   7402         MOV       A,#0x2
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   1073                srcOff++;
   \   000103   05..         INC       ?V4
   \   000105   E5..         MOV       A,?V4
   \   000107   7002         JNZ       ??xferBuf_7
   \   000109   05..         INC       ?V5
   1074                idx++;
   \                     ??xferBuf_7:
   \   00010B   0E           INC       R6
   1075              }
   \                     ??xferBuf_5:
   \   00010C   AF..         MOV       R7,?V2
   \   00010E   74FF         MOV       A,#-0x1
   \   000110   2F           ADD       A,R7
   \   000111   F5..         MOV       ?V2,A
   \   000113   04           INC       A
   \   000114   70D8         JNZ       ??xferBuf_6
   1076              writeWord( dstPg, dstOff, tmp );
   \   000116                ; Setup parameters for call to function writeWord
   \   000116   AC..         MOV       R4,?XSP + 0
   \   000118   AD..         MOV       R5,?XSP + 1
   \   00011A   AA..         MOV       R2,?V0
   \   00011C   AB..         MOV       R3,?V1
   \   00011E   A9..         MOV       R1,?V3
   \   000120   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1077            }
   1078          }
   \                     ??xferBuf_4:
   \   000123   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   AC..         MOV       R4,?XSP + 0
   \   000002   AD..         MOV       R5,?XSP + 1
   \   000004   AA..         MOV       R2,?V0
   \   000006   AB..         MOV       R3,?V1
   \   000008   A9..         MOV       R1,?V3
   \   00000A   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   \   00000D   E5..         MOV       A,?V0
   \   00000F   2404         ADD       A,#0x4
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   35..         ADDC      A,?V1
   \   000016   F5..         MOV       ?V1,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
   1079          
   1080          /*********************************************************************
   1081           * @fn      writeItem
   1082           *
   1083           * @brief   Writes an item header/data combo to the specified NV page.
   1084           *
   1085           * @param   pg - Valid NV Flash page.
   1086           * @param   id - Valid NV item Id.
   1087           * @param   len  - Byte count of the data to write.
   1088           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1089           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1090           *
   1091           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1092           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1093          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1094          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V4,R1
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   1095            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000014   E9           MOV       A,R1
   \   000015   29           ADD       A,R1
   \   000016   F5..         MOV       ?V0,A
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   F5..         MOV       ?V1,A
   \   00001C   74..         MOV       A,#(pgOff + 14) & 0xff
   \   00001E   25..         ADD       A,?V0
   \   000020   F5..         MOV       ?V8,A
   \   000022   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   000024   35..         ADDC      A,?V1
   \   000026   F5..         MOV       ?V9,A
   \   000028   85..82       MOV       DPL,?V8
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
   1096            uint8 rtrn = FALSE;
   \   000034   75..00       MOV       ?V5,#0x0
   1097            osalNvHdr_t hdr;
   1098          
   1099            hdr.id = id;
   \   000037   85..82       MOV       DPL,?XSP + 0
   \   00003A   85..83       MOV       DPH,?XSP + 1
   \   00003D   EA           MOV       A,R2
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   EB           MOV       A,R3
   \   000041   F0           MOVX      @DPTR,A
   1100            hdr.len = len;
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   EC           MOV       A,R4
   \   000048   F0           MOVX      @DPTR,A
   \   000049   A3           INC       DPTR
   \   00004A   ED           MOV       A,R5
   \   00004B   F0           MOVX      @DPTR,A
   1101          
   1102            writeWord( pg, offset, (uint8 *)&hdr );
   \   00004C                ; Setup parameters for call to function writeWord
   \   00004C   AC..         MOV       R4,?XSP + 0
   \   00004E   AD..         MOV       R5,?XSP + 1
   \   000050   AA..         MOV       R2,?V2
   \   000052   AB..         MOV       R3,?V3
   \   000054   12....       LCALL     `??writeWord::?relay`; Banked call to: writeWord
   1103            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000057                ; Setup parameters for call to function HalFlashRead
   \   000057   75..08       MOV       ?V10,#0x8
   \   00005A   75..00       MOV       ?V11,#0x0
   \   00005D   78..         MOV       R0,#?V10
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?XSTACK_DISP102_8
   \   000067   AA..         MOV       R2,?V2
   \   000069   AB..         MOV       R3,?V3
   \   00006B   A9..         MOV       R1,?V4
   \   00006D   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   1104          
   1105            if ( (hdr.id == id) && (hdr.len == len) )
   \   000073   7402         MOV       A,#0x2
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00007B   85..82       MOV       DPL,?XSP + 0
   \   00007E   85..83       MOV       DPH,?XSP + 1
   \   000081   E0           MOVX      A,@DPTR
   \   000082   65..         XRL       A,?V6
   \   000084   7004         JNZ       ??writeItem_0
   \   000086   A3           INC       DPTR
   \   000087   E0           MOVX      A,@DPTR
   \   000088   65..         XRL       A,?V7
   \                     ??writeItem_0:
   \   00008A   6003         JZ        $+5
   \   00008C   02....       LJMP      ??writeItem_1 & 0xFFFF
   \   00008F   EE           MOV       A,R6
   \   000090   68           XRL       A,R0
   \   000091   7002         JNZ       ??writeItem_2
   \   000093   EF           MOV       A,R7
   \   000094   69           XRL       A,R1
   \                     ??writeItem_2:
   \   000095   6003         JZ        $+5
   \   000097   02....       LJMP      ??writeItem_1 & 0xFFFF
   1106            {
   1107              if ( flag )
   \   00009A   741E         MOV       A,#0x1e
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   7003         JNZ       $+5
   \   0000A2   02....       LJMP      ??writeItem_3 & 0xFFFF
   \   0000A5   741C         MOV       A,#0x1c
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ?Subroutine20 & 0xFFFF
   1108              {
   1109                hdr.chk = calcChkB( len, buf );
   \                     ??CrossCallReturnLabel_21:
   \   0000AD   85..82       MOV       DPL,?V0
   \   0000B0   F583         MOV       DPH,A
   \   0000B2   EE           MOV       A,R6
   \   0000B3   F8           MOV       R0,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   F9           MOV       R1,A
   \   0000B6   EE           MOV       A,R6
   \   0000B7   5403         ANL       A,#0x3
   \   0000B9   F5..         MOV       ?V6,A
   \   0000BB   E582         MOV       A,DPL
   \   0000BD   4583         ORL       A,DPH
   \   0000BF   7015         JNZ       ??writeItem_4
   \   0000C1   EE           MOV       A,R6
   \   0000C2   75F0FF       MOV       B,#-0x1
   \   0000C5   A4           MUL       AB
   \   0000C6   F8           MOV       R0,A
   \   0000C7   AAF0         MOV       R2,B
   \   0000C9   75F0FF       MOV       B,#-0x1
   \   0000CC   EF           MOV       A,R7
   \   0000CD   A4           MUL       AB
   \   0000CE   2A           ADD       A,R2
   \   0000CF   F9           MOV       R1,A
   \   0000D0   E8           MOV       A,R0
   \   0000D1   FA           MOV       R2,A
   \   0000D2   E9           MOV       A,R1
   \   0000D3   FB           MOV       R3,A
   \   0000D4   801F         SJMP      ??writeItem_5
   \                     ??writeItem_4:
   \   0000D6   7A00         MOV       R2,#0x0
   \   0000D8   7B00         MOV       R3,#0x0
   \   0000DA   8009         SJMP      ??writeItem_6
   \                     ??writeItem_7:
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FC           MOV       R4,A
   \   0000DE   EA           MOV       A,R2
   \   0000DF   2C           ADD       A,R4
   \   0000E0   FA           MOV       R2,A
   \   0000E1   E4           CLR       A
   \   0000E2   3B           ADDC      A,R3
   \   0000E3   FB           MOV       R3,A
   \   0000E4   A3           INC       DPTR
   \                     ??writeItem_6:
   \   0000E5   E8           MOV       A,R0
   \   0000E6   FC           MOV       R4,A
   \   0000E7   E9           MOV       A,R1
   \   0000E8   FD           MOV       R5,A
   \   0000E9   EC           MOV       A,R4
   \   0000EA   24FF         ADD       A,#-0x1
   \   0000EC   18           DEC       R0
   \   0000ED   ED           MOV       A,R5
   \   0000EE   34FF         ADDC      A,#-0x1
   \   0000F0   F9           MOV       R1,A
   \   0000F1   EC           MOV       A,R4
   \   0000F2   4D           ORL       A,R5
   \   0000F3   70E7         JNZ       ??writeItem_7
   \                     ??writeItem_5:
   \   0000F5   E5..         MOV       A,?V6
   \   0000F7   601E         JZ        ??writeItem_8
   \   0000F9   F8           MOV       R0,A
   \   0000FA   7404         MOV       A,#0x4
   \   0000FC   C3           CLR       C
   \   0000FD   98           SUBB      A,R0
   \   0000FE   F8           MOV       R0,A
   \   0000FF   95E0         SUBB      A,0xE0 /* A   */
   \   000101   F9           MOV       R1,A
   \   000102   E8           MOV       A,R0
   \   000103   75F0FF       MOV       B,#-0x1
   \   000106   A4           MUL       AB
   \   000107   F8           MOV       R0,A
   \   000108   ACF0         MOV       R4,B
   \   00010A   75F0FF       MOV       B,#-0x1
   \   00010D   E9           MOV       A,R1
   \   00010E   A4           MUL       AB
   \   00010F   2C           ADD       A,R4
   \   000110   F9           MOV       R1,A
   \   000111   EA           MOV       A,R2
   \   000112   28           ADD       A,R0
   \   000113   FA           MOV       R2,A
   \   000114   EB           MOV       A,R3
   \   000115   39           ADDC      A,R1
   \   000116   FB           MOV       R3,A
   \                     ??writeItem_8:
   \   000117   7404         MOV       A,#0x4
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   EA           MOV       A,R2
   \   00011D   F0           MOVX      @DPTR,A
   \   00011E   A3           INC       DPTR
   \   00011F   EB           MOV       A,R3
   \   000120   F0           MOVX      @DPTR,A
   1110          
   1111                offset += OSAL_NV_HDR_SIZE;
   \   000121   E5..         MOV       A,?V2
   \   000123   2408         ADD       A,#0x8
   \   000125   F5..         MOV       ?V2,A
   \   000127   E4           CLR       A
   \   000128   35..         ADDC      A,?V3
   \   00012A   F5..         MOV       ?V3,A
   1112                if ( buf != NULL )
   \   00012C   E5..         MOV       A,?V0
   \   00012E   45..         ORL       A,?V1
   \   000130   6017         JZ        ??writeItem_9
   1113                {
   1114                  writeBuf( pg, offset, len, buf );
   \   000132                ; Setup parameters for call to function writeBuf
   \   000132   78..         MOV       R0,#?V0
   \   000134   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000137   EE           MOV       A,R6
   \   000138   FC           MOV       R4,A
   \   000139   EF           MOV       A,R7
   \   00013A   FD           MOV       R5,A
   \   00013B   AA..         MOV       R2,?V2
   \   00013D   AB..         MOV       R3,?V3
   \   00013F   A9..         MOV       R1,?V4
   \   000141   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000144   7402         MOV       A,#0x2
   \   000146   12....       LCALL     ?DEALLOC_XSTACK8
   1115                }
   1116          
   1117                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_9:
   \   000149                ; Setup parameters for call to function calcChkF
   \   000149   EE           MOV       A,R6
   \   00014A   FC           MOV       R4,A
   \   00014B   EF           MOV       A,R7
   \   00014C   FD           MOV       R5,A
   \   00014D   AA..         MOV       R2,?V2
   \   00014F   AB..         MOV       R3,?V3
   \   000151   A9..         MOV       R1,?V4
   \   000153   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000156   7404         MOV       A,#0x4
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00015E   7002         JNZ       ??writeItem_10
   \   000160   EB           MOV       A,R3
   \   000161   6D           XRL       A,R5
   \                     ??writeItem_10:
   \   000162   702A         JNZ       ??writeItem_11
   1118                {
   1119                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   000164                ; Setup parameters for call to function setChk
   \   000164   AA..         MOV       R2,?V2
   \   000166   AB..         MOV       R3,?V3
   \   000168   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00016B   7404         MOV       A,#0x4
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E0           MOVX      A,@DPTR
   \   000171   68           XRL       A,R0
   \   000172   7003         JNZ       ??writeItem_12
   \   000174   A3           INC       DPTR
   \   000175   E0           MOVX      A,@DPTR
   \   000176   69           XRL       A,R1
   \                     ??writeItem_12:
   \   000177   7015         JNZ       ??writeItem_11
   1120                  {
   1121                    hotItemUpdate(pg, offset, hdr.id);
   \   000179                ; Setup parameters for call to function hotItemUpdate
   \   000179   85..82       MOV       DPL,?XSP + 0
   \   00017C   85..83       MOV       DPH,?XSP + 1
   \   00017F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000182   AA..         MOV       R2,?V2
   \   000184   AB..         MOV       R3,?V3
   \   000186   A9..         MOV       R1,?V4
   \   000188   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1122                    rtrn = TRUE;
   1123                  }
   1124                }
   1125              }
   1126              else
   1127              {
   1128                rtrn = TRUE;
   \                     ??writeItem_3:
   \   00018B   75..01       MOV       ?V5,#0x1
   1129              }
   1130          
   1131              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_11:
   \   00018E   7402         MOV       A,#0x2
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   12....       LCALL     ?Subroutine25 & 0xFFFF
   1132            }
   \                     ??CrossCallReturnLabel_32:
   \   000196   C3           CLR       C
   \   000197   E8           MOV       A,R0
   \   000198   94F4         SUBB      A,#-0xc
   \   00019A   E9           MOV       A,R1
   \   00019B   94FF         SUBB      A,#-0x1
   \   00019D   4006         JC        ??writeItem_13
   \   00019F   7EFC         MOV       R6,#-0x4
   \   0001A1   7FFF         MOV       R7,#-0x1
   \   0001A3   8049         SJMP      ??CrossCallReturnLabel_89
   \                     ??writeItem_13:
   \   0001A5   E8           MOV       A,R0
   \   0001A6   2403         ADD       A,#0x3
   \   0001A8   5001         JNC       ??writeItem_14
   \   0001AA   09           INC       R1
   \                     ??writeItem_14:
   \   0001AB   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001AE   803E         SJMP      ??CrossCallReturnLabel_89
   1133            else
   1134            {
   1135              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001B0   C3           CLR       C
   \   0001B1   E8           MOV       A,R0
   \   0001B2   94F4         SUBB      A,#-0xc
   \   0001B4   E9           MOV       A,R1
   \   0001B5   94FF         SUBB      A,#-0x1
   \   0001B7   4006         JC        ??writeItem_15
   \   0001B9   7EFC         MOV       R6,#-0x4
   \   0001BB   7FFF         MOV       R7,#-0x1
   \   0001BD   8009         SJMP      ??CrossCallReturnLabel_49
   \                     ??writeItem_15:
   \   0001BF   E8           MOV       A,R0
   \   0001C0   2403         ADD       A,#0x3
   \   0001C2   5001         JNC       ??writeItem_16
   \   0001C4   09           INC       R1
   \                     ??writeItem_16:
   \   0001C5   12....       LCALL     ?Subroutine33 & 0xFFFF
   1136          
   1137              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??CrossCallReturnLabel_49:
   \   0001C8   85..82       MOV       DPL,?V8
   \   0001CB   85..83       MOV       DPH,?V9
   \   0001CE   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001D1   F8           MOV       R0,A
   \   0001D2   7408         MOV       A,#0x8
   \   0001D4   99           SUBB      A,R1
   \   0001D5   F9           MOV       R1,A
   \   0001D6   C3           CLR       C
   \   0001D7   E8           MOV       A,R0
   \   0001D8   9E           SUBB      A,R6
   \   0001D9   E9           MOV       A,R1
   \   0001DA   9F           SUBB      A,R7
   \   0001DB   5004         JNC       ??writeItem_17
   1138              {
   1139                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   0001DD   E8           MOV       A,R0
   \   0001DE   FE           MOV       R6,A
   \   0001DF   E9           MOV       A,R1
   \   0001E0   FF           MOV       R7,A
   1140              }
   1141          
   1142              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_17:
   \   0001E1   74..         MOV       A,#(pgLost + 14) & 0xff
   \   0001E3   25..         ADD       A,?V0
   \   0001E5   F582         MOV       DPL,A
   \   0001E7   74..         MOV       A,#((pgLost - 242) >> 8) & 0xff
   \   0001E9   35..         ADDC      A,?V1
   \   0001EB   12....       LCALL     ?Subroutine19 & 0xFFFF
   1143            }
   1144            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??CrossCallReturnLabel_89:
   \   0001EE   85..82       MOV       DPL,?V8
   \   0001F1   85..83       MOV       DPH,?V9
   \   0001F4   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   1145          
   1146            return rtrn;
   \                     ??CrossCallReturnLabel_87:
   \   0001F7   A9..         MOV       R1,?V5
   \   0001F9   7408         MOV       A,#0x8
   \   0001FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001FE   7F0C         MOV       R7,#0xc
   \   000200   02....       LJMP      ?BANKED_LEAVE_XDATA
   1147          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A9..         MOV       R1,?V4
   \   000002   12....       LCALL     `??setChk::?relay`; Banked call to: setChk
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   A8..         MOV       R0,?V0
   \   00000B   A9..         MOV       R1,?V1
   \   00000D   22           RET
   1148          
   1149          /*********************************************************************
   1150           * @fn      hotItem
   1151           *
   1152           * @brief   Look for the parameter 'id' in the hot items array.
   1153           *
   1154           * @param   id - A valid NV item Id.
   1155           *
   1156           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1158          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1159          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1160            uint8 hotIdx;
   1161          
   1162            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV       R1,#0x0
   1163            {
   1164              if (hotIds[hotIdx] == id)
   \                     ??hotItem_0:
   \   000006   E9           MOV       A,R1
   \   000007   25E0         ADD       A,0xE0 /* A   */
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   33           RLC       A
   \   00000C   FD           MOV       R5,A
   \   00000D   74..         MOV       A,#hotIds & 0xff
   \   00000F   2C           ADD       A,R4
   \   000010   F582         MOV       DPL,A
   \   000012   74..         MOV       A,#(hotIds >> 8) & 0xff
   \   000014   3D           ADDC      A,R5
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6A           XRL       A,R2
   \   000019   7003         JNZ       ??hotItem_1
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6B           XRL       A,R3
   \                     ??hotItem_1:
   \   00001E   6007         JZ        ??hotItem_2
   1165              {
   1166                break;
   1167              }
   1168            }
   \   000020   09           INC       R1
   \   000021   E9           MOV       A,R1
   \   000022   C3           CLR       C
   \   000023   9403         SUBB      A,#0x3
   \   000025   40DF         JC        ??hotItem_0
   1169          
   1170            return hotIdx;
   \                     ??hotItem_2:
   \   000027                REQUIRE ?Subroutine5
   \   000027                ; // Fall through to label ?Subroutine5
   1171          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
   1172          
   1173          /*********************************************************************
   1174           * @fn      hotItemUpdate
   1175           *
   1176           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1177           *
   1178           * @param   pg - The new NV page corresponding to the hot item.
   1179           * @param   off - The new NV page offset corresponding to the hot item.
   1180           * @param   id - A valid NV item Id.
   1181           *
   1182           * @return  none
   1183           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1184          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1185          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   1186            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL     ?Subroutine40 & 0xFFFF
   1187          
   1188            if (hotIdx < OSAL_NV_MAX_HOT)
   \                     ??CrossCallReturnLabel_61:
   \   000012   500E         JNC       ??hotItemUpdate_0
   1189            {
   1190              {
   1191                hotPg[hotIdx] = pg;
   \   000014   12....       LCALL     ?Subroutine39 & 0xFFFF
   1192                hotOff[hotIdx] = off;
   1193              }
   1194            }
   \                     ??CrossCallReturnLabel_59:
   \   000017   EE           MOV       A,R6
   \   000018   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00001B   E5..         MOV       A,?V0
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   E5..         MOV       A,?V1
   \   000021   F0           MOVX      @DPTR,A
   1195          }
   \                     ??hotItemUpdate_0:
   \   000022                REQUIRE ?Subroutine6
   \   000022                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000003   E9           MOV       A,R1
   \   000004   F8           MOV       R0,A
   \   000005   C3           CLR       C
   \   000006   9403         SUBB      A,#0x3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   74..         MOV       A,#hotPg & 0xff
   \   000002   29           ADD       A,R1
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E9           MOV       A,R1
   \   000001   29           ADD       A,R1
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   74..         MOV       A,#hotOff & 0xff
   \   000008   28           ADD       A,R0
   \   000009   F582         MOV       DPL,A
   \   00000B   74..         MOV       A,#(hotOff >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F583         MOV       DPH,A
   \   000010   22           RET
   1196          
   1197          /*********************************************************************
   1198           * @fn      osal_nv_init
   1199           *
   1200           * @brief   Initialize NV service.
   1201           *
   1202           * @param   p - Not used.
   1203           *
   1204           * @return  none
   1205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1206          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1207          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1208            (void)p;  // Suppress Lint warning.
   1209            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL     `??initNV::?relay`; Banked call to: initNV
   1210          }
   \   000007   80..         SJMP      ?Subroutine5
   1211          
   1212          /*********************************************************************
   1213           * @fn      osal_nv_item_init
   1214           *
   1215           * @brief   If the NV item does not already exist, it is created and
   1216           *          initialized with the data passed to the function, if any.
   1217           *          This function must be called before calling osal_nv_read() or
   1218           *          osal_nv_write().
   1219           *
   1220           * @param   id  - Valid NV item Id.
   1221           * @param   len - Item length.
   1222           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1223           *
   1224           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1225           *          SUCCESS        - Id already existed, no action taken.
   1226           *          NV_OPER_FAILED - Failure to find or create Id.
   1227           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1228          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1229          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1230            uint16 offset;
   1231          
   1232            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV       R1,#0x4e
   \   00000F   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV       A,R1
   \   000013   6036         JZ        ??osal_nv_item_init_0
   1233            {
   1234              return NV_OPER_FAILED;
   1235            }
   1236            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \   000015                ; Setup parameters for call to function findItem
   \   000015   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000018   6010         JZ        ??osal_nv_item_init_1
   1237            {
   1238              // Re-populate the NV hot item data if the corresponding items are already established.
   1239              hotItemUpdate(findPg, offset, id);
   \   00001A                ; Setup parameters for call to function hotItemUpdate
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   90....       MOV       DPTR,#findPg
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1240          
   1241              return SUCCESS;
   \   000026   7900         MOV       R1,#0x0
   \   000028   8023         SJMP      ??osal_nv_item_init_2
   1242            }
   1243            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_1:
   \   00002A                ; Setup parameters for call to function initItem
   \   00002A   740C         MOV       A,#0xc
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000032   AC..         MOV       R4,?V0
   \   000034   AD..         MOV       R5,?V1
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   7901         MOV       R1,#0x1
   \   00003C   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   00003F   7402         MOV       A,#0x2
   \   000041   12....       LCALL     ?DEALLOC_XSTACK8
   \   000044   E9           MOV       A,R1
   \   000045   6004         JZ        ??osal_nv_item_init_0
   1244            {
   1245              return NV_ITEM_UNINIT;
   \   000047   7909         MOV       R1,#0x9
   \   000049   8002         SJMP      ??osal_nv_item_init_2
   1246            }
   1247            else
   1248            {
   1249              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_0:
   \   00004B   790A         MOV       R1,#0xa
   1250            }
   \                     ??osal_nv_item_init_2:
   \   00004D   02....       LJMP      ??Subroutine45_0 & 0xFFFF
   1251          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003                REQUIRE ??Subroutine55_0
   \   000003                ; // Fall through to label ??Subroutine55_0
   1252          
   1253          /*********************************************************************
   1254           * @fn      osal_nv_item_len
   1255           *
   1256           * @brief   Get the data length of the item stored in NV memory.
   1257           *
   1258           * @param   id  - Valid NV item Id.
   1259           *
   1260           * @return  Item length, if found; zero otherwise.
   1261           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1262          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1263          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1264            osalNvHdr_t hdr;
   1265            uint16 offset;
   1266            uint8 hotIdx;
   1267          
   1268            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000011   5040         JNC       ??osal_nv_item_len_0
   1269            {
   1270              findPg = hotPg[hotIdx];
   \   000013   12....       LCALL     ?Subroutine39 & 0xFFFF
   1271              offset = hotOff[hotIdx];
   1272            }
   \                     ??CrossCallReturnLabel_60:
   \   000016   E0           MOVX      A,@DPTR
   \   000017   90....       MOV       DPTR,#findPg
   \   00001A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00001D   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   1273            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1274            {
   1275              return 0;
   1276            }
   1277          
   1278            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??CrossCallReturnLabel_112:
   \   000020                ; Setup parameters for call to function HalFlashRead
   \   000020   75..08       MOV       ?V0,#0x8
   \   000023   75..00       MOV       ?V1,#0x0
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EA           MOV       A,R2
   \   000031   24F8         ADD       A,#-0x8
   \   000033   FA           MOV       R2,A
   \   000034   EB           MOV       A,R3
   \   000035   34FF         ADDC      A,#-0x1
   \   000037   FB           MOV       R3,A
   \   000038   90....       MOV       DPTR,#findPg
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
   1279            return hdr.len;
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00004B   7408         MOV       A,#0x8
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000050   02....       LJMP      ?Subroutine6 & 0xFFFF
   \                     ??osal_nv_item_len_0:
   \   000053                ; Setup parameters for call to function findItem
   \   000053   EE           MOV       A,R6
   \   000054   FA           MOV       R2,A
   \   000055   EF           MOV       A,R7
   \   000056   FB           MOV       R3,A
   \   000057   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   00005A   8B..         MOV       ?V1,R3
   \   00005C   A9..         MOV       R1,?V1
   \   00005E   EA           MOV       A,R2
   \   00005F   49           ORL       A,R1
   \   000060   70BE         JNZ       ??CrossCallReturnLabel_112
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   80E3         SJMP      ??CrossCallReturnLabel_113
   1280          }
   1281          
   1282          /*********************************************************************
   1283           * @fn      osal_nv_write
   1284           *
   1285           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1286           *          an element of an item by indexing into the item with an offset.
   1287           *
   1288           * @param   id  - Valid NV item Id.
   1289           * @param   ndx - Index offset into item
   1290           * @param   len - Length of data to write.
   1291           * @param  *buf - Data to write.
   1292           *
   1293           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1294           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1296          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   740B         MOV       A,#0xb
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   8C..         MOV       ?V6,R4
   \   000016   8D..         MOV       ?V7,R5
   1298            uint8 rtrn = SUCCESS;
   \   000018   75..00       MOV       ?V11,#0x0
   1299          
   1300            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001B                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001B   794E         MOV       R1,#0x4e
   \   00001D   12....       LCALL     `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000020   E9           MOV       A,R1
   \   000021   607C         JZ        ??osal_nv_write_0
   \   000023   7425         MOV       A,#0x25
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F5..         MOV       ?V14,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V15,A
   1301            {
   1302              return NV_OPER_FAILED;
   1303            }
   1304            else if ( len != 0 )
   \   00002F   E5..         MOV       A,?V14
   \   000031   45..         ORL       A,?V15
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??CrossCallReturnLabel_11 & 0xFFFF
   1305            {
   1306              osalNvHdr_t hdr;
   1307              uint16 origOff, srcOff;
   1308              uint16 cnt, chk;
   1309              uint8 *ptr, srcPg;
   1310          
   1311              origOff = srcOff = findItem( id );
   \   000038                ; Setup parameters for call to function findItem
   \   000038   740B         MOV       A,#0xb
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000040   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000043   7401         MOV       A,#0x1
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   EA           MOV       A,R2
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   EB           MOV       A,R3
   \   00004C   F0           MOVX      @DPTR,A
   1312              srcPg = findPg;
   \   00004D   90....       MOV       DPTR,#findPg
   \   000050   E0           MOVX      A,@DPTR
   \   000051   F5..         MOV       ?V10,A
   1313              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000053   7401         MOV       A,#0x1
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00005B   7005         JNZ       ??osal_nv_write_1
   1314              {
   1315                return NV_ITEM_UNINIT;
   \   00005D   7909         MOV       R1,#0x9
   \   00005F   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1316              }
   1317          
   1318              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_1:
   \   000062                ; Setup parameters for call to function HalFlashRead
   \   000062   75..08       MOV       ?V0,#0x8
   \   000065   75..00       MOV       ?V1,#0x0
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   7405         MOV       A,#0x5
   \   00006F   12....       LCALL     ?XSTACK_DISP102_8
   \   000072   7403         MOV       A,#0x3
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   24F8         ADD       A,#-0x8
   \   00007A   FA           MOV       R2,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   34FF         ADDC      A,#-0x1
   \   00007F   FB           MOV       R3,A
   \   000080   A9..         MOV       R1,?V10
   \   000082   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   1319              if ( hdr.len < (ndx + len) )
   \   000088   7405         MOV       A,#0x5
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E5..         MOV       A,?V6
   \   00008F   25..         ADD       A,?V14
   \   000091   F8           MOV       R0,A
   \   000092   E5..         MOV       A,?V7
   \   000094   35..         ADDC      A,?V15
   \   000096   F9           MOV       R1,A
   \   000097   C3           CLR       C
   \   000098   E0           MOVX      A,@DPTR
   \   000099   98           SUBB      A,R0
   \   00009A   A3           INC       DPTR
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   99           SUBB      A,R1
   \   00009D   5005         JNC       ??osal_nv_write_3
   1320              {
   1321                return NV_OPER_FAILED;
   \                     ??osal_nv_write_0:
   \   00009F   790A         MOV       R1,#0xa
   \   0000A1   02....       LJMP      ??osal_nv_write_2 & 0xFFFF
   1322              }
   1323          
   1324              srcOff += ndx;
   \                     ??osal_nv_write_3:
   \   0000A4   7401         MOV       A,#0x1
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   25..         ADD       A,?V6
   \   0000AC   F5..         MOV       ?V2,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   35..         ADDC      A,?V7
   \   0000B2   F5..         MOV       ?V3,A
   \   0000B4   85....       MOV       ?V8,?V2
   \   0000B7   F5..         MOV       ?V9,A
   1325              ptr = buf;
   \   0000B9   7427         MOV       A,#0x27
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   F5..         MOV       ?V4,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   F5..         MOV       ?V5,A
   1326              cnt = len;
   \   0000C5   AE..         MOV       R6,?V14
   \   0000C7   AF..         MOV       R7,?V15
   1327              chk = 0;
   \   0000C9   75..00       MOV       ?V0,#0x0
   \   0000CC   8069         SJMP      ??osal_nv_write_4
   1328              while ( cnt-- )
   1329              {
   1330                uint8 tmp;
   1331                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_5:
   \   0000CE                ; Setup parameters for call to function HalFlashRead
   \   0000CE   75..01       MOV       ?V12,#0x1
   \   0000D1   75..00       MOV       ?V13,#0x0
   \   0000D4   78..         MOV       R0,#?V12
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   7402         MOV       A,#0x2
   \   0000DB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000DE   AA..         MOV       R2,?V8
   \   0000E0   AB..         MOV       R3,?V9
   \   0000E2   A9..         MOV       R1,?V10
   \   0000E4   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
   1332                if ( tmp != *ptr )
   \   0000EA   85..82       MOV       DPL,?XSP + 0
   \   0000ED   85..83       MOV       DPH,?XSP + 1
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F8           MOV       R0,A
   \   0000F2   85..82       MOV       DPL,?V4
   \   0000F5   85..83       MOV       DPH,?V5
   \   0000F8   E0           MOVX      A,@DPTR
   \   0000F9   68           XRL       A,R0
   \   0000FA   6026         JZ        ??osal_nv_write_6
   1333                {
   1334                  chk = 1;  // Mark that at least one byte is different.
   \   0000FC   75..01       MOV       ?V0,#0x1
   1335                  // Calculate expected checksum after transferring old data and writing new data.
   1336                  hdr.chk -= tmp;
   \   0000FF   7407         MOV       A,#0x7
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   C3           CLR       C
   \   000105   E0           MOVX      A,@DPTR
   \   000106   98           SUBB      A,R0
   \   000107   F0           MOVX      @DPTR,A
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   9400         SUBB      A,#0x0
   \   00010C   F0           MOVX      @DPTR,A
   1337                  hdr.chk += *ptr;
   \   00010D   85..82       MOV       DPL,?V4
   \   000110   85..83       MOV       DPH,?V5
   \   000113   E0           MOVX      A,@DPTR
   \   000114   F8           MOV       R0,A
   \   000115   7407         MOV       A,#0x7
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   28           ADD       A,R0
   \   00011C   F0           MOVX      @DPTR,A
   \   00011D   A3           INC       DPTR
   \   00011E   E0           MOVX      A,@DPTR
   \   00011F   3400         ADDC      A,#0x0
   \   000121   F0           MOVX      @DPTR,A
   1338                }
   1339                srcOff++;
   \                     ??osal_nv_write_6:
   \   000122   05..         INC       ?V8
   \   000124   E5..         MOV       A,?V8
   \   000126   7002         JNZ       ??osal_nv_write_7
   \   000128   05..         INC       ?V9
   1340                ptr++;
   \                     ??osal_nv_write_7:
   \   00012A   85..82       MOV       DPL,?V4
   \   00012D   85..83       MOV       DPH,?V5
   \   000130   A3           INC       DPTR
   \   000131   8582..       MOV       ?V4,DPL
   \   000134   8583..       MOV       ?V5,DPH
   1341              }
   \                     ??osal_nv_write_4:
   \   000137   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00013A   7092         JNZ       ??osal_nv_write_5
   1342          
   1343              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   00013C   E5..         MOV       A,?V0
   \   00013E   A2E0         MOV       C,0xE0 /* A   */.0
   \   000140   4003         JC        $+5
   \   000142   02....       LJMP      ??CrossCallReturnLabel_11 & 0xFFFF
   1344              {
   1345                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   000145   85..82       MOV       DPL,?XSP + 0
   \   000148   85..83       MOV       DPH,?XSP + 1
   \   00014B   E4           CLR       A
   \   00014C   F0           MOVX      @DPTR,A
   1346                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   00014D                ; Setup parameters for call to function initItem
   \   00014D   A8..         MOV       R0,?XSP + 0
   \   00014F   A9..         MOV       R1,?XSP + 1
   \   000151   88..         MOV       ?V0,R0
   \   000153   89..         MOV       ?V1,R1
   \   000155   78..         MOV       R0,#?V0
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015A   7407         MOV       A,#0x7
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000162   740D         MOV       A,#0xd
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00016A   7900         MOV       R1,#0x0
   \   00016C   12....       LCALL     `??initItem::?relay`; Banked call to: initItem
   \   00016F   7402         MOV       A,#0x2
   \   000171   12....       LCALL     ?DEALLOC_XSTACK8
   \   000174   E9           MOV       A,R1
   \   000175   F5..         MOV       ?V4,A
   1347          
   1348                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000177   7003         JNZ       $+5
   \   000179   02....       LJMP      ??osal_nv_write_8 & 0xFFFF
   1349                {
   1350                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   00017C   7405         MOV       A,#0x5
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000184   C3           CLR       C
   \   000185   E8           MOV       A,R0
   \   000186   94FC         SUBB      A,#-0x4
   \   000188   E9           MOV       A,R1
   \   000189   94FF         SUBB      A,#-0x1
   \   00018B   4008         JC        ??osal_nv_write_9
   \   00018D   75..FC       MOV       ?V0,#-0x4
   \   000190   75..FF       MOV       ?V1,#-0x1
   \   000193   800D         SJMP      ??osal_nv_write_10
   \                     ??osal_nv_write_9:
   \   000195   E8           MOV       A,R0
   \   000196   2403         ADD       A,#0x3
   \   000198   5001         JNC       ??osal_nv_write_11
   \   00019A   09           INC       R1
   \                     ??osal_nv_write_11:
   \   00019B   54FC         ANL       A,#0xfc
   \   00019D   F5..         MOV       ?V0,A
   \   00019F   E9           MOV       A,R1
   \   0001A0   F5..         MOV       ?V1,A
   1351                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_10:
   \   0001A2   A8..         MOV       R0,?V4
   \   0001A4   E8           MOV       A,R0
   \   0001A5   28           ADD       A,R0
   \   0001A6   F8           MOV       R0,A
   \   0001A7   E4           CLR       A
   \   0001A8   33           RLC       A
   \   0001A9   F9           MOV       R1,A
   \   0001AA   74..         MOV       A,#(pgOff + 14) & 0xff
   \   0001AC   28           ADD       A,R0
   \   0001AD   F5..         MOV       ?V12,A
   \   0001AF   74..         MOV       A,#((pgOff - 242) >> 8) & 0xff
   \   0001B1   39           ADDC      A,R1
   \   0001B2   F5..         MOV       ?V13,A
   \   0001B4   85..82       MOV       DPL,?V12
   \   0001B7   F583         MOV       DPH,A
   \   0001B9   12....       LCALL     ?Subroutine23 & 0xFFFF
   1352                  srcOff = origOff;
   1353          
   1354                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1355                   * OSAL_Nv interruptions caused by resets.
   1356                   */
   1357                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \                     ??CrossCallReturnLabel_25:
   \   0001BC   7409         MOV       A,#0x9
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   E0           MOVX      A,@DPTR
   \   0001C2   F4           CPL       A
   \   0001C3   7003         JNZ       ??osal_nv_write_12
   \   0001C5   A3           INC       DPTR
   \   0001C6   E0           MOVX      A,@DPTR
   \   0001C7   F4           CPL       A
   \                     ??osal_nv_write_12:
   \   0001C8   700A         JNZ       ??CrossCallReturnLabel_10
   1358                  {
   1359                    setItem( srcPg, srcOff, eNvXfer );
   \   0001CA                ; Setup parameters for call to function setItem
   \   0001CA   7C00         MOV       R4,#0x0
   \   0001CC   7401         MOV       A,#0x1
   \   0001CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D1   12....       LCALL     ?Subroutine14 & 0xFFFF
   1360                  }
   1361          
   1362                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??CrossCallReturnLabel_10:
   \   0001D4                ; Setup parameters for call to function xferBuf
   \   0001D4   78..         MOV       R0,#?V6
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D9   8E..         MOV       ?V8,R6
   \   0001DB   8F..         MOV       ?V9,R7
   \   0001DD   78..         MOV       R0,#?V8
   \   0001DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E2   AC..         MOV       R4,?V4
   \   0001E4   7405         MOV       A,#0x5
   \   0001E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E9   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001EC   A9..         MOV       R1,?V10
   \   0001EE   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   0001F1   7404         MOV       A,#0x4
   \   0001F3   12....       LCALL     ?DEALLOC_XSTACK8
   1363                  srcOff += ndx;
   1364                  dstOff += ndx;
   \   0001F6   EE           MOV       A,R6
   \   0001F7   25..         ADD       A,?V6
   \   0001F9   FE           MOV       R6,A
   \   0001FA   EF           MOV       A,R7
   \   0001FB   35..         ADDC      A,?V7
   \   0001FD   FF           MOV       R7,A
   1365          
   1366                  writeBuf( dstPg, dstOff, len, buf );
   \   0001FE                ; Setup parameters for call to function writeBuf
   \   0001FE   7427         MOV       A,#0x27
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000206   AC..         MOV       R4,?V14
   \   000208   AD..         MOV       R5,?V15
   \   00020A   EE           MOV       A,R6
   \   00020B   FA           MOV       R2,A
   \   00020C   EF           MOV       A,R7
   \   00020D   FB           MOV       R3,A
   \   00020E   A9..         MOV       R1,?V4
   \   000210   12....       LCALL     `??writeBuf::?relay`; Banked call to: writeBuf
   \   000213   7402         MOV       A,#0x2
   \   000215   12....       LCALL     ?DEALLOC_XSTACK8
   1367                  srcOff += len;
   1368                  dstOff += len;
   1369          
   1370                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   000218                ; Setup parameters for call to function xferBuf
   \   000218   7405         MOV       A,#0x5
   \   00021A   12....       LCALL     ?XSTACK_DISP0_8
   \   00021D   E0           MOVX      A,@DPTR
   \   00021E   C3           CLR       C
   \   00021F   95..         SUBB      A,?V6
   \   000221   F8           MOV       R0,A
   \   000222   A3           INC       DPTR
   \   000223   E0           MOVX      A,@DPTR
   \   000224   95..         SUBB      A,?V7
   \   000226   F9           MOV       R1,A
   \   000227   E8           MOV       A,R0
   \   000228   C3           CLR       C
   \   000229   95..         SUBB      A,?V14
   \   00022B   F5..         MOV       ?V6,A
   \   00022D   E9           MOV       A,R1
   \   00022E   95..         SUBB      A,?V15
   \   000230   F5..         MOV       ?V7,A
   \   000232   78..         MOV       R0,#?V6
   \   000234   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000237   EE           MOV       A,R6
   \   000238   25..         ADD       A,?V14
   \   00023A   F5..         MOV       ?V6,A
   \   00023C   EF           MOV       A,R7
   \   00023D   35..         ADDC      A,?V15
   \   00023F   F5..         MOV       ?V7,A
   \   000241   78..         MOV       R0,#?V6
   \   000243   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000246   AC..         MOV       R4,?V4
   \   000248   E5..         MOV       A,?V2
   \   00024A   25..         ADD       A,?V14
   \   00024C   FA           MOV       R2,A
   \   00024D   E5..         MOV       A,?V3
   \   00024F   35..         ADDC      A,?V15
   \   000251   FB           MOV       R3,A
   \   000252   A9..         MOV       R1,?V10
   \   000254   12....       LCALL     `??xferBuf::?relay`; Banked call to: xferBuf
   \   000257   7404         MOV       A,#0x4
   \   000259   12....       LCALL     ?DEALLOC_XSTACK8
   1371          
   1372                  // Calculate and write the new checksum.
   1373                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   00025C   85..82       MOV       DPL,?V12
   \   00025F   85..83       MOV       DPH,?V13
   \   000262   12....       LCALL     ?Subroutine23 & 0xFFFF
   1374          
   1375                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \                     ??CrossCallReturnLabel_26:
   \   000265                ; Setup parameters for call to function calcChkF
   \   000265   7405         MOV       A,#0x5
   \   000267   12....       LCALL     ?XSTACK_DISP0_8
   \   00026A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00026D   12....       LCALL     `??calcChkF::?relay`; Banked call to: calcChkF
   \   000270   7407         MOV       A,#0x7
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000278   7002         JNZ       ??osal_nv_write_13
   \   00027A   EB           MOV       A,R3
   \   00027B   6D           XRL       A,R5
   \                     ??osal_nv_write_13:
   \   00027C   7022         JNZ       ??osal_nv_write_8
   1376                  {
   1377                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   00027E                ; Setup parameters for call to function setChk
   \   00027E   EE           MOV       A,R6
   \   00027F   FA           MOV       R2,A
   \   000280   EF           MOV       A,R7
   \   000281   FB           MOV       R3,A
   \   000282   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000285   7407         MOV       A,#0x7
   \   000287   12....       LCALL     ?XSTACK_DISP0_8
   \   00028A   E0           MOVX      A,@DPTR
   \   00028B   68           XRL       A,R0
   \   00028C   7003         JNZ       ??osal_nv_write_14
   \   00028E   A3           INC       DPTR
   \   00028F   E0           MOVX      A,@DPTR
   \   000290   69           XRL       A,R1
   \                     ??osal_nv_write_14:
   \   000291   700D         JNZ       ??osal_nv_write_8
   1378                    {
   1379                      rtrn = NV_OPER_FAILED;
   1380                    }
   1381                    else
   1382                    {
   1383                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \   000293                ; Setup parameters for call to function hotItemUpdate
   \   000293   7403         MOV       A,#0x3
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   12....       LCALL     ?Subroutine18 & 0xFFFF
   1384                    }
   1385                  }
   1386                  else
   1387                  {
   1388                    rtrn = NV_OPER_FAILED;
   1389                  }
   1390                }
   \                     ??CrossCallReturnLabel_19:
   \   00029B   12....       LCALL     `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   00029E   8003         SJMP      ??osal_nv_write_15
   1391                else
   1392                {
   1393                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_8:
   \   0002A0   75..0A       MOV       ?V11,#0xa
   1394                }
   1395          
   1396                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_15:
   \   0002A3   85..82       MOV       DPL,?XSP + 0
   \   0002A6   85..83       MOV       DPH,?XSP + 1
   \   0002A9   E0           MOVX      A,@DPTR
   \   0002AA   6026         JZ        ??osal_nv_write_16
   1397                {
   1398                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1399                   * page and writing the new value failed, then the compaction must be aborted.
   1400                   */
   1401                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   0002AC   65..         XRL       A,?V10
   \   0002AE   700B         JNZ       ??osal_nv_write_17
   \   0002B0   740A         MOV       A,#0xa
   \   0002B2   65..         XRL       A,?V11
   \   0002B4   7005         JNZ       ??osal_nv_write_17
   1402                  {
   1403                    erasePage( pgRes );
   \   0002B6                ; Setup parameters for call to function erasePage
   \   0002B6   12....       LCALL     ?Subroutine22 & 0xFFFF
   1404                  }
   \                     ??CrossCallReturnLabel_82:
   \   0002B9   8031         SJMP      ??CrossCallReturnLabel_11
   1405                  else
   1406                  {
   1407                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_17:
   \   0002BB                ; Setup parameters for call to function setPageUse
   \   0002BB   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0002BE                ; Setup parameters for call to function erasePage
   \   0002BE   85..82       MOV       DPL,?XSP + 0
   \   0002C1   85..83       MOV       DPH,?XSP + 1
   \   0002C4   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0002C7   85..82       MOV       DPL,?XSP + 0
   \   0002CA   85..83       MOV       DPH,?XSP + 1
   \   0002CD   E0           MOVX      A,@DPTR
   \   0002CE   90....       MOV       DPTR,#pgRes
   \   0002D1   F0           MOVX      @DPTR,A
   1408                  }
   1409                }
   1410          
   1411                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1412                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1413                 */
   1414                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_16:
   \   0002D2   85..82       MOV       DPL,?XSP + 0
   \   0002D5   85..83       MOV       DPH,?XSP + 1
   \   0002D8   E0           MOVX      A,@DPTR
   \   0002D9   65..         XRL       A,?V10
   \   0002DB   600F         JZ        ??CrossCallReturnLabel_11
   \   0002DD   740A         MOV       A,#0xa
   \   0002DF   65..         XRL       A,?V11
   \   0002E1   6009         JZ        ??CrossCallReturnLabel_11
   1415                {
   1416                  setItem( srcPg, origOff, eNvZero );
   \   0002E3                ; Setup parameters for call to function setItem
   \   0002E3   7C01         MOV       R4,#0x1
   \   0002E5   EC           MOV       A,R4
   \   0002E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E9   12....       LCALL     ?Subroutine14 & 0xFFFF
   1417                }
   1418              }
   1419            }
   1420          
   1421            return rtrn;
   \                     ??CrossCallReturnLabel_11:
   \   0002EC   A9..         MOV       R1,?V11
   \                     ??osal_nv_write_2:
   \   0002EE   740D         MOV       A,#0xd
   \   0002F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002F3   7F10         MOV       R7,#0x10
   \   0002F5   02....       LJMP      ?BANKED_LEAVE_XDATA
   1422          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   C3           CLR       C
   \   000002   95..         SUBB      A,?V0
   \   000004   FE           MOV       R6,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   95..         SUBB      A,?V1
   \   000009   FF           MOV       R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   EE           MOV       A,R6
   \   000004   FA           MOV       R2,A
   \   000005   EF           MOV       A,R7
   \   000006   FB           MOV       R3,A
   \   000007   A9..         MOV       R1,?V4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   A9..         MOV       R1,?V10
   \   000007   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   \   00000A   22           RET
   1423          
   1424          /*********************************************************************
   1425           * @fn      osal_nv_read
   1426           *
   1427           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1428           *          an element of an item by indexing into the item with an offset.
   1429           *          Read data is copied into *buf.
   1430           *
   1431           * @param   id  - Valid NV item Id.
   1432           * @param   ndx - Index offset into item
   1433           * @param   len - Length of data to read.
   1434           * @param  *buf - Data is read into this buffer.
   1435           *
   1436           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1437           *          Otherwise, NV_OPER_FAILED for failure.
   1438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1439          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1440          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1441            uint16 offset;
   1442            uint8 hotIdx;
   1443          
   1444            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   12....       LCALL     `??hotItem::?relay`; Banked call to: hotItem
   \   000010   E9           MOV       A,R1
   \   000011   F8           MOV       R0,A
   \   000012   7410         MOV       A,#0x10
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F5..         MOV       ?V4,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V5,A
   \   00001E   7412         MOV       A,#0x12
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000026   E9           MOV       A,R1
   \   000027   C3           CLR       C
   \   000028   9403         SUBB      A,#0x3
   \   00002A   5023         JNC       ??osal_nv_read_0
   1445            {
   1446              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   00002C   E9           MOV       A,R1
   \   00002D   FE           MOV       R6,A
   \   00002E                ; Setup parameters for call to function HalFlashRead
   \   00002E   78..         MOV       R0,#?V4
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
   \   000037   12....       LCALL     ?Subroutine43 & 0xFFFF
   1447              return SUCCESS;
   1448            }
   \                     ??CrossCallReturnLabel_74:
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   25..         ADD       A,?V2
   \   00003D   FA           MOV       R2,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   35..         ADDC      A,?V3
   \   000042   FB           MOV       R3,A
   \   000043   74..         MOV       A,#hotPg & 0xff
   \   000045   2E           ADD       A,R6
   \   000046   F582         MOV       DPL,A
   \   000048   E4           CLR       A
   \   000049   34..         ADDC      A,#(hotPg >> 8) & 0xff
   \   00004B   F583         MOV       DPH,A
   \   00004D   801D         SJMP      ??osal_nv_read_1
   1449          
   1450            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   00004F                ; Setup parameters for call to function findItem
   \   00004F   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000052   7004         JNZ       ??osal_nv_read_2
   1451            {
   1452              return NV_OPER_FAILED;
   \   000054   790A         MOV       R1,#0xa
   \   000056   801E         SJMP      ??osal_nv_read_3
   1453            }
   1454            else
   1455            {
   1456              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   000058                ; Setup parameters for call to function HalFlashRead
   \   000058   78..         MOV       R0,#?V4
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   AC..         MOV       R4,?V0
   \   00005F   AD..         MOV       R5,?V1
   \   000061   EA           MOV       A,R2
   \   000062   25..         ADD       A,?V2
   \   000064   FA           MOV       R2,A
   \   000065   EB           MOV       A,R3
   \   000066   35..         ADDC      A,?V3
   \   000068   FB           MOV       R3,A
   \   000069   90....       MOV       DPTR,#findPg
   \                     ??osal_nv_read_1:
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000071   12....       LCALL     ?DEALLOC_XSTACK8
   1457              return SUCCESS;
   \   000074   7900         MOV       R1,#0x0
   1458            }
   \                     ??osal_nv_read_3:
   \   000076   02....       LJMP      ?Subroutine4 & 0xFFFF
   1459          }
   1460          
   1461          /*********************************************************************
   1462           * @fn      osal_nv_delete
   1463           *
   1464           * @brief   Delete item from NV. This function will fail if the length
   1465           *          parameter does not match the length of the item in NV.
   1466           *
   1467           * @param   id  - Valid NV item Id.
   1468           * @param   len - Length of item to delete.
   1469           *
   1470           * @return  SUCCESS if item was deleted,
   1471           *          NV_ITEM_UNINIT if item did not exist in NV,
   1472           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1473           *          NV_OPER_FAILED if attempted deletion failed.
   1474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1475          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   1477            uint16 length;
   1478            uint16 offset;
   1479          
   1480            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   12....       LCALL     `??findItem::?relay`; Banked call to: findItem
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   1481            if ( offset == OSAL_NV_ITEM_NULL )
   \   000014   EA           MOV       A,R2
   \   000015   4B           ORL       A,R3
   \   000016   7004         JNZ       ??osal_nv_delete_0
   1482            {
   1483              // NV item does not exist
   1484              return NV_ITEM_UNINIT;
   \   000018   7909         MOV       R1,#0x9
   \   00001A   802E         SJMP      ??osal_nv_delete_1
   1485            }
   1486          
   1487            length = osal_nv_item_len( id );
   1488            if ( length != len )
   \                     ??osal_nv_delete_0:
   \   00001C                ; Setup parameters for call to function osal_nv_item_len
   \   00001C   EE           MOV       A,R6
   \   00001D   FA           MOV       R2,A
   \   00001E   EF           MOV       A,R7
   \   00001F   FB           MOV       R3,A
   \   000020   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000023   E5..         MOV       A,?V2
   \   000025   6A           XRL       A,R2
   \   000026   7003         JNZ       ??osal_nv_delete_2
   \   000028   E5..         MOV       A,?V3
   \   00002A   6B           XRL       A,R3
   \                     ??osal_nv_delete_2:
   \   00002B   6004         JZ        ??osal_nv_delete_3
   1489            {
   1490              // NV item has different length
   1491              return NV_BAD_ITEM_LEN;
   \   00002D   790C         MOV       R1,#0xc
   \   00002F   8019         SJMP      ??osal_nv_delete_1
   1492            }
   1493          
   1494            // Set item header ID to zero to 'delete' the item
   1495            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000031                ; Setup parameters for call to function setItem
   \   000031   7C01         MOV       R4,#0x1
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   90....       MOV       DPTR,#findPg
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??setItem::?relay`; Banked call to: setItem
   1496          
   1497            // Verify that item has been removed
   1498            offset = findItem( id );
   1499            if ( offset != OSAL_NV_ITEM_NULL )
   \   00003F                ; Setup parameters for call to function findItem
   \   00003F   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000042   6004         JZ        ??osal_nv_delete_4
   1500            {
   1501              // Still there
   1502              return NV_OPER_FAILED;
   \   000044   790A         MOV       R1,#0xa
   \   000046   8002         SJMP      ??osal_nv_delete_1
   1503            }
   1504            else
   1505            {
   1506              // Yes, it's gone
   1507              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   000048   7900         MOV       R1,#0x0
   1508            }
   \                     ??osal_nv_delete_1:
   \   00004A   02....       LJMP      ?Subroutine3 & 0xFFFF
   1509          }
   1510          
   1511          /*********************************************************************
   1512           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     59   calcChkF
        0     22   -> HalFlashRead
      0     59   compactPage
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> erasePage
        0     27   -> hotItemUpdate
        0     27   -> setChk
        0     27   -> setItem
        0     27   -> setPageUse
        0     30   -> writeItem
        0     31   -> xferBuf
      0     46   erasePage
        0      9   -> HalFlashErase
      0     49   findItem
        0     12   -> initPage
      2     18   hotItem
      1     47   hotItemUpdate
        0     10   -> hotItem
      1     70   initItem
        0     30   -> HalFlashRead
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> setPageUse
        0     31   -> writeItem
        0     28   -> writeWordH
      0     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     34   osal_nv_item_len
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     22   osal_nv_read
        0     18   -> HalFlashRead
        0     16   -> findItem
        0     16   -> hotItem
      0     45   osal_nv_write
        0     37   -> HalAdcCheckVdd
        0     39   -> HalFlashRead
        0     37   -> calcChkF
        0     37   -> erasePage
        0     37   -> findItem
        0     37   -> hotItemUpdate
        0     39   -> initItem
        0     37   -> setChk
        0     37   -> setItem
        0     37   -> setPageUse
        0     39   -> writeBuf
        0     41   -> xferBuf
      0     53   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     61   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     54   setPageUse
        0     17   -> writeWord
      1     63   writeBuf
        0     24   -> HalFlashRead
        0     24   -> HalFlashWrite
        0     22   -> writeWord
      0     61   writeItem
        0     30   -> HalFlashRead
        0     28   -> calcChkF
        0     28   -> hotItemUpdate
        0     28   -> setChk
        0     30   -> writeBuf
        0     28   -> writeWord
      0     42   writeWord
        0     14   -> HalFlashWrite
      1     41   writeWordH
        0     13   -> writeWord
      0     65   xferBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ??Subroutine44_0
       5  ??Subroutine45_0
       5  ??Subroutine46_0
       8  ??Subroutine47_0
      15  ??Subroutine48_0
       6  ??Subroutine49_0
       8  ??Subroutine50_0
       8  ??Subroutine51_0
       6  ??Subroutine52_0
       6  ??Subroutine53_0
       6  ??Subroutine54_0
       7  ??Subroutine55_0
       2  ?Subroutine0
       3  ?Subroutine1
       7  ?Subroutine10
      12  ?Subroutine11
      13  ?Subroutine12
      11  ?Subroutine13
      11  ?Subroutine14
       3  ?Subroutine15
       6  ?Subroutine16
       6  ?Subroutine17
      10  ?Subroutine18
       2  ?Subroutine19
       2  ?Subroutine2
       8  ?Subroutine20
      16  ?Subroutine21
       3  ?Subroutine22
      11  ?Subroutine23
       7  ?Subroutine24
       4  ?Subroutine25
      11  ?Subroutine26
       2  ?Subroutine27
      14  ?Subroutine28
      12  ?Subroutine29
       5  ?Subroutine3
      11  ?Subroutine30
      17  ?Subroutine31
      25  ?Subroutine32
       9  ?Subroutine33
      11  ?Subroutine34
      12  ?Subroutine35
      14  ?Subroutine36
       3  ?Subroutine37
      15  ?Subroutine38
      11  ?Subroutine39
       5  ?Subroutine4
       9  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
      17  ?Subroutine43
       7  ?Subroutine5
       5  ?Subroutine6
       8  ?Subroutine7
       5  ?Subroutine8
      15  ?Subroutine9
   12288  _nvBuf
     138  calcChkF
     538  compactPage
      30  erasePage
      64  findItem
       1  findPg
       6  hotIds
      39  hotItem
      34  hotItemUpdate
       6  hotOff
       3  hotPg
     364  initItem
     268  initNV
     416  initPage
      77  osal_nv_delete
       9  osal_nv_init
      80  osal_nv_item_init
     104  osal_nv_item_len
     121  osal_nv_read
     760  osal_nv_write
      12  pgLost
      12  pgOff
       1  pgRes
      82  setChk
     142  setItem
      50  setPageUse
     324  writeBuf
     515  writeItem
      56  writeWord
      66  writeWordH
     294  xferBuf
     138  -- Other

 
  5 046 bytes in segment BANKED_CODE
    138 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
    138 bytes of CODE     memory
      6 bytes of CONST    memory
  5 046 bytes of HUGECODE memory
 12 323 bytes of XDATA    memory

Errors: none
Warnings: none
