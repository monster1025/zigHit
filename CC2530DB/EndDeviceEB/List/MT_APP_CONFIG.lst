###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Mar/2020  12:48:29
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.1\Components\mt\MT_APP_CONFIG.c
#    Command line       =  
#        -f C:\Users\monster\AppData\Local\Temp\EWFB18.tmp ("C:\Texas
#        Instruments\Z-Stack 3.0.1\Components\mt\MT_APP_CONFIG.c" -D NV_INIT -D
#        NV_RESTORE -D TC_LINKKEY_JOIN -D ZBA_FALLBACK_NWKKEY -D POWER_SAVING
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D MT_ZDO_MGMT -D xZCL_EZMODE -D MT_APP_CNF_FUNC -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D HAL_KEY=FALSE -D
#        HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -lC "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=MAX_CHANNELS_24GHZ -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Russian_RUS.1251
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\List\MT_APP_CONFIG.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\EndDeviceEB\Obj\MT_APP_CONFIG.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.1\Components\mt\MT_APP_CONFIG.c
      1          /***************************************************************************************************
      2            Filename:       MT_APP_CONFIG.c
      3            Revised:        $Date: 2016-03-31 01:06:52 -0700 (Thu, 31 Marc 2016) $
      4            Revision:       $Revision:  $
      5          
      6            Description:    MonitorTest functions for application configuration.
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43           
     44           
     45          #include "ZComDef.h"
     46          #include "MT.h"
     47          #include "MT_APP_CONFIG.h"
     48          #include "MT_UART.h"
     49          
     50          #include "bdb.h"
     51          #include "bdb_interface.h"
     52          #include "ZDApp.h"
     53           
     54          /***************************************************************************************************
     55          * LOCAL FUNCTIONs
     56          ***************************************************************************************************/
     57             
     58          #if defined (MT_APP_CNF_FUNC)
     59          
     60          static void MT_AppCnfSetNwkFrameCounter(uint8 *pBuf);   
     61          static void MT_AppCnfSetDefaultRemoteEndDeviceTimeout(uint8 *pBuf);
     62          static void MT_AppCnfSetEndDeviceTimeout(uint8 *pBuf);
     63          #if (ZG_BUILD_COORDINATOR_TYPE)
     64          static void MT_AppCnfSetAllowRejoinTCPolicy(uint8 *pBuf);
     65          #endif
     66          
     67          static void MT_AppCnfBDBSetChannel(uint8* pBuf);
     68          static void MT_AppCnfBDBStartCommissioning(uint8* pBuf);
     69          #if (ZG_BUILD_COORDINATOR_TYPE)
     70              static void MT_AppCnfBDBSetTCRequireKeyExchange(uint8 *pBuf);
     71              static void MT_AppCnfBDBAddInstallCode(uint8 *pBuf);
     72              static void MT_AppCnfBDBSetJoinUsesInstallCodeKey(uint8 *pBuf);
     73          #endif
     74          #if (ZG_BUILD_JOINING_TYPE)
     75              static void MT_AppCnfBDBSetActiveCentralizedKey(uint8* pBuf);
     76          #endif
     77          
     78          #if (ZG_BUILD_ENDDEVICE_TYPE)    
     79              static void MT_AppCnfBDBZedAttemptRecoverNwk(uint8* pBuf);
     80          #endif
     81                
     82          #endif
     83          
     84          
     85          /***************************************************************************************************
     86          * External variables
     87          ***************************************************************************************************/
     88          extern uint32 nwkFrameCounter;
     89          extern uint16 nwkFrameCounterChanges;
     90          
     91          
     92          #if defined (MT_APP_CNF_FUNC)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          uint8 MT_AppCnfCommandProcessing(uint8 *pBuf)
   \                     MT_AppCnfCommandProcessing:
     94          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
     95            uint8 status = MT_RPC_SUCCESS;
     96          
     97            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000A   EA           MOV       A,R2
   \   00000B   2404         ADD       A,#0x4
   \   00000D   E4           CLR       A
   \   00000E   3B           ADDC      A,R3
   \   00000F   FD           MOV       R5,A
   \   000010   EA           MOV       A,R2
   \   000011   2402         ADD       A,#0x2
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3B           ADDC      A,R3
   \   000016   F9           MOV       R1,A
   \   000017   8882         MOV       DPL,R0
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   FF           MOV       R7,A
   \   00001D   EA           MOV       A,R2
   \   00001E   2403         ADD       A,#0x3
   \   000020   FA           MOV       R2,A
   \   000021   5001         JNC       ??MT_AppCnfCommandProcessing_0
   \   000023   0B           INC       R3
   \                     ??MT_AppCnfCommandProcessing_0:
   \   000024   EF           MOV       A,R7
   \   000025   14           DEC       A
   \   000026   6056         JZ        ??MT_AppCnfCommandProcessing_1
   \   000028   14           DEC       A
   \   000029   7003         JNZ       $+5
   \   00002B   02....       LJMP      ??MT_AppCnfCommandProcessing_2 & 0xFFFF
   \   00002E   24FD         ADD       A,#-0x3
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??MT_AppCnfCommandProcessing_3 & 0xFFFF
   \   000035   24FE         ADD       A,#-0x2
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??MT_AppCnfCommandProcessing_4 & 0xFFFF
   \   00003C   14           DEC       A
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??MT_AppCnfCommandProcessing_5 & 0xFFFF
   \   000042   24FE         ADD       A,#-0x2
   \   000044   7003         JNZ       $+5
   \   000046   02....       LJMP      ??MT_AppCnfCommandProcessing_6 & 0xFFFF
   \   000049   240B         ADD       A,#0xb
   \   00004B   6003         JZ        $+5
   \   00004D   02....       LJMP      ??MT_AppCnfCommandProcessing_7 & 0xFFFF
     98            {
     99              case MT_APP_CNF_SET_NWK_FRAME_COUNTER:
    100                MT_AppCnfSetNwkFrameCounter(pBuf);
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   E4           CLR       A
   \   000057   F0           MOVX      @DPTR,A
   \   000058   8882         MOV       DPL,R0
   \   00005A   8983         MOV       DPH,R1
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FE           MOV       R6,A
   \   00005E                ; Setup parameters for call to function osal_build_uint32
   \   00005E   7904         MOV       R1,#0x4
   \   000060   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000063   EA           MOV       A,R2
   \   000064   F8           MOV       R0,A
   \   000065   EB           MOV       A,R3
   \   000066   F9           MOV       R1,A
   \   000067   EC           MOV       A,R4
   \   000068   FA           MOV       R2,A
   \   000069   ED           MOV       A,R5
   \   00006A   FB           MOV       R3,A
   \   00006B   90....       MOV       DPTR,#nwkFrameCounter
   \   00006E   12....       LCALL     ?XSTORE_R0123
   \   000071   90....       MOV       DPTR,#nwkFrameCounterChanges
   \   000074   E4           CLR       A
   \   000075   F0           MOVX      @DPTR,A
   \   000076   A3           INC       DPTR
   \   000077   F0           MOVX      @DPTR,A
   \   000078                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000078   12....       LCALL     `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
   \   00007B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007B   02....       LJMP      ??MT_AppCnfCommandProcessing_8 & 0xFFFF
    101              break;
    102              case MT_APP_CNF_SET_DEFAULT_REMOTE_ENDDEVICE_TIMEOUT:
    103                MT_AppCnfSetDefaultRemoteEndDeviceTimeout(pBuf);
   \                     ??MT_AppCnfCommandProcessing_1:
   \   00007E   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000081   400B         JC        ??MT_AppCnfCommandProcessing_9
   \   000083   85..82       MOV       DPL,?XSP + 0
   \   000086   85..83       MOV       DPH,?XSP + 1
   \   000089   7402         MOV       A,#0x2
   \   00008B   F0           MOVX      @DPTR,A
   \   00008C   802B         SJMP      ??MT_AppCnfCommandProcessing_10
   \                     ??MT_AppCnfCommandProcessing_9:
   \   00008E   E8           MOV       A,R0
   \   00008F   90....       MOV       DPTR,#zgNwkEndDeviceTimeoutDefault
   \   000092   F0           MOVX      @DPTR,A
   \   000093                ; Setup parameters for call to function osal_nv_write
   \   000093   75....       MOV       ?V0,#zgNwkEndDeviceTimeoutDefault & 0xff
   \   000096   75....       MOV       ?V1,#(zgNwkEndDeviceTimeoutDefault >> 8) & 0xff
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   75..01       MOV       ?V0,#0x1
   \   0000A1   75..00       MOV       ?V1,#0x0
   \   0000A4   78..         MOV       R0,#?V0
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   7C00         MOV       R4,#0x0
   \   0000AB   7D00         MOV       R5,#0x0
   \   0000AD   7A52         MOV       R2,#0x52
   \   0000AF   7B00         MOV       R3,#0x0
   \   0000B1   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B4   7404         MOV       A,#0x4
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??MT_AppCnfCommandProcessing_10:
   \   0000B9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B9   8057         SJMP      ??MT_AppCnfCommandProcessing_8
    104              break;
    105              case MT_APP_CNF_SET_ENDDEVICETIMEOUT:
    106                MT_AppCnfSetEndDeviceTimeout(pBuf);
   \                     ??MT_AppCnfCommandProcessing_2:
   \   0000BB   12....       LCALL     ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000BE   400B         JC        ??MT_AppCnfCommandProcessing_11
   \   0000C0   85..82       MOV       DPL,?XSP + 0
   \   0000C3   85..83       MOV       DPH,?XSP + 1
   \   0000C6   7402         MOV       A,#0x2
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   8047         SJMP      ??MT_AppCnfCommandProcessing_8
   \                     ??MT_AppCnfCommandProcessing_11:
   \   0000CB   E8           MOV       A,R0
   \   0000CC   90....       MOV       DPTR,#zgEndDeviceTimeoutValue
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0                ; Setup parameters for call to function osal_nv_write
   \   0000D0   75....       MOV       ?V0,#zgEndDeviceTimeoutValue & 0xff
   \   0000D3   75....       MOV       ?V1,#(zgEndDeviceTimeoutValue >> 8) & 0xff
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DB   75..01       MOV       ?V0,#0x1
   \   0000DE   75..00       MOV       ?V1,#0x0
   \   0000E1   78..         MOV       R0,#?V0
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E6   7C00         MOV       R4,#0x0
   \   0000E8   7D00         MOV       R5,#0x0
   \   0000EA   7A53         MOV       R2,#0x53
   \   0000EC   7B00         MOV       R3,#0x0
   \   0000EE   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000F1   7404         MOV       A,#0x4
   \   0000F3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F6   801A         SJMP      ??MT_AppCnfCommandProcessing_8
    107              break;
    108          #if (ZG_BUILD_COORDINATOR_TYPE)
    109              case MT_APP_CNF_SET_ALLOWREJOIN_TC_POLICY:
    110                MT_AppCnfSetAllowRejoinTCPolicy(pBuf);
    111              break;
    112          #endif
    113              
    114          
    115              case MT_APP_CNF_BDB_START_COMMISSIONING:
    116                MT_AppCnfBDBStartCommissioning(pBuf);
   \                     ??MT_AppCnfCommandProcessing_3:
   \   0000F8   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000FB   F9           MOV       R1,A
   \   0000FC   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   0000FF                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FF   8011         SJMP      ??MT_AppCnfCommandProcessing_8
    117              break;
    118              case MT_APP_CNF_BDB_SET_CHANNEL:
    119                MT_AppCnfBDBSetChannel(pBuf);
   \                     ??MT_AppCnfCommandProcessing_5:
   \   000101   12....       LCALL     ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000104   FF           MOV       R7,A
   \   000105                ; Setup parameters for call to function osal_build_uint32
   \   000105   7904         MOV       R1,#0x4
   \   000107   0A           INC       R2
   \   000108   ED           MOV       A,R5
   \   000109   FB           MOV       R3,A
   \   00010A   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00010D                ; Setup parameters for call to function bdb_setChannelAttribute
   \   00010D   EF           MOV       A,R7
   \   00010E   F9           MOV       R1,A
   \   00010F   12....       LCALL     `??bdb_setChannelAttribute::?relay`; Banked call to: bdb_setChannelAttribute
   \   000112                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_AppCnfCommandProcessing_8:
   \   000112   AC..         MOV       R4,?XSP + 0
   \   000114   AD..         MOV       R5,?XSP + 1
   \   000116   7B01         MOV       R3,#0x1
   \   000118   EE           MOV       A,R6
   \   000119   8026         SJMP      ??MT_AppCnfCommandProcessing_12
    120              break;
    121          
    122          #if (ZG_BUILD_COORDINATOR_TYPE)
    123                case MT_APP_CNF_BDB_ADD_INSTALLCODE:
    124                  MT_AppCnfBDBAddInstallCode(pBuf);
    125                break;
    126                case MT_APP_CNF_BDB_SET_TC_REQUIRE_KEY_EXCHANGE:
    127                  MT_AppCnfBDBSetTCRequireKeyExchange(pBuf);
    128                break;
    129                case MT_APP_CNF_BDB_SET_JOINUSESINSTALLCODEKEY:
    130                  MT_AppCnfBDBSetJoinUsesInstallCodeKey(pBuf);
    131                break;
    132          #endif
    133          #if (ZG_BUILD_JOINING_TYPE)
    134                case MT_APP_CNF_BDB_SET_ACTIVE_DEFAULT_CENTRALIZED_KEY:
    135                  MT_AppCnfBDBSetActiveCentralizedKey(pBuf);
   \                     ??MT_AppCnfCommandProcessing_4:
   \   00011B   8A82         MOV       DPL,R2
   \   00011D   8B83         MOV       DPH,R3
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   6008         JZ        ??MT_AppCnfCommandProcessing_13
   \   000122                ; Setup parameters for call to function bdb_setActiveCentralizedLinkKey
   \   000122   7A00         MOV       R2,#0x0
   \   000124   7B00         MOV       R3,#0x0
   \   000126   7901         MOV       R1,#0x1
   \   000128   8005         SJMP      ??MT_AppCnfCommandProcessing_14
   \                     ??MT_AppCnfCommandProcessing_13:
   \   00012A                ; Setup parameters for call to function bdb_setActiveCentralizedLinkKey
   \   00012A   0A           INC       R2
   \   00012B   ED           MOV       A,R5
   \   00012C   FB           MOV       R3,A
   \   00012D   7900         MOV       R1,#0x0
   \                     ??MT_AppCnfCommandProcessing_14:
   \   00012F   12....       LCALL     `??bdb_setActiveCentralizedLinkKey::?relay`; Banked call to: bdb_setActiveCentralizedLinkKey
   \   000132   E9           MOV       A,R1
   \   000133   85..82       MOV       DPL,?XSP + 0
   \   000136   85..83       MOV       DPH,?XSP + 1
   \   000139   F0           MOVX      @DPTR,A
   \   00013A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00013A   AC..         MOV       R4,?XSP + 0
   \   00013C   AD..         MOV       R5,?XSP + 1
   \   00013E   7B01         MOV       R3,#0x1
   \   000140   EF           MOV       A,R7
   \                     ??MT_AppCnfCommandProcessing_12:
   \   000141   FA           MOV       R2,A
   \   000142   8015         SJMP      ??MT_AppCnfCommandProcessing_15
    136                break;
    137          #endif
    138                
    139          #if (ZG_BUILD_ENDDEVICE_TYPE)        
    140                case MT_APP_CNF_BDB_ZED_ATTEMPT_RECOVER_NWK:
    141                  MT_AppCnfBDBZedAttemptRecoverNwk(pBuf);
   \                     ??MT_AppCnfCommandProcessing_6:
   \   000144   8F..         MOV       ?V0,R7
   \   000146                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000146   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
   \   000149   E9           MOV       A,R1
   \   00014A   85..82       MOV       DPL,?XSP + 0
   \   00014D   85..83       MOV       DPH,?XSP + 1
   \   000150   F0           MOVX      @DPTR,A
   \   000151                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000151   AC..         MOV       R4,?XSP + 0
   \   000153   AD..         MOV       R5,?XSP + 1
   \   000155   7B01         MOV       R3,#0x1
   \   000157   AA..         MOV       R2,?V0
   \                     ??MT_AppCnfCommandProcessing_15:
   \   000159   796F         MOV       R1,#0x6f
   \   00015B   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    142                break;
    143          #endif
    144          
    145            }
    146            return status;
   \                     ??MT_AppCnfCommandProcessing_7:
   \   00015E   7900         MOV       R1,#0x0
   \   000160   7401         MOV       A,#0x1
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   7F04         MOV       R7,#0x4
   \   000167   02....       LJMP      ?BANKED_LEAVE_XDATA
    147          }
    148          
    149          
    150          /***************************************************************************************************
    151          * @fn      MT_AppCnfCommissioningNotification
    152          *
    153          * @brief   Notify the host processor about an event in BDB
    154          *
    155          * @param   bdbCommissioningModeMsg - Commissioning notification message
    156          *
    157          * @return  void
    158          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    159          void MT_AppCnfCommissioningNotification(bdbCommissioningModeMsg_t* bdbCommissioningModeMsg)
   \                     MT_AppCnfCommissioningNotification:
    160          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV       A,#-0x3
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    161            uint8 retArray[3];
    162            
    163            retArray[0] = bdbCommissioningModeMsg->bdbCommissioningStatus;
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
    164            retArray[1] = bdbCommissioningModeMsg->bdbCommissioningMode;
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   C0E0         PUSH      A
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
    165            retArray[2] = bdbCommissioningModeMsg->bdbRemainingCommissioningModes;
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   C0E0         PUSH      A
   \   00002E   7402         MOV       A,#0x2
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   D0E0         POP       A
   \   000035   F0           MOVX      @DPTR,A
    166          
    167            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_APP_CNF), MT_APP_CNF_BDB_COMMISSIONING_NOTIFICATION, sizeof(bdbCommissioningModeMsg_t), retArray);
   \   000036                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000036   AC..         MOV       R4,?XSP + 0
   \   000038   AD..         MOV       R5,?XSP + 1
   \   00003A   7B03         MOV       R3,#0x3
   \   00003C   7A80         MOV       R2,#-0x80
   \   00003E   794F         MOV       R1,#0x4f
   \   000040   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    168          }
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
   \   000048   D083         POP       DPH
   \   00004A   D082         POP       DPL
   \   00004C   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   FE           MOV       R6,A
   \   00000E                ; Setup parameters for call to function bdb_StartCommissioning
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   F8           MOV       R0,A
   \   000004   C3           CLR       C
   \   000005   940F         SUBB      A,#0xf
   \   000007   22           RET
    169          
    170          
    171          /***************************************************************************************************
    172          * @fn      MT_AppCnfBDBStartCommissioning
    173          *
    174          * @brief   Start the commissioning process setting the commissioning mode given.
    175          *
    176          * @param   pBuf - pointer to received buffer
    177          *
    178          * @return  void
    179          ***************************************************************************************************/
    180          static void MT_AppCnfBDBStartCommissioning(uint8* pBuf)
    181          {
    182            uint8 retValue = ZSuccess;
    183            uint8 cmdId;
    184            
    185            /* parse header */
    186            cmdId = pBuf[MT_RPC_POS_CMD1];
    187            pBuf += MT_RPC_FRAME_HDR_SZ;
    188            
    189            bdb_StartCommissioning(*pBuf);
    190            
    191            /* Build and send back the response */
    192            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    193          }
    194          
    195          
    196          /***************************************************************************************************
    197          * @fn      MT_AppCnfBDBSetChannel
    198          *
    199          * @brief   Set the primary or seconday channel for discovery or formation procedure
    200          *
    201          * @param   pBuf - pointer to received buffer
    202          *
    203          * @return  void
    204          ***************************************************************************************************/
    205          static void MT_AppCnfBDBSetChannel(uint8* pBuf)
    206          {
    207            uint8 retValue = ZSuccess;
    208            uint8 cmdId;
    209            uint8 isPrimary;
    210            uint32 Channel;
    211            
    212            /* parse header */
    213            cmdId = pBuf[MT_RPC_POS_CMD1];
    214            pBuf += MT_RPC_FRAME_HDR_SZ;
    215            
    216            isPrimary = *pBuf;
    217            pBuf++;
    218            
    219            Channel = osal_build_uint32(pBuf, sizeof(uint32));
    220              
    221            bdb_setChannelAttribute(isPrimary,Channel);
    222            
    223            /* Build and send back the response */
    224            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    225          }
    226          
    227          
    228          
    229          #if (ZG_BUILD_COORDINATOR_TYPE)
    230          /*********************************************************************
    231           * @fn          MT_AppCnfBDBSetTCRequireKeyExchange
    232           *
    233           * @brief       Configure bdbTrustCenterRequireKeyExchange attribute.
    234           *
    235           * @param       Set attribute to FALSE if *pBuf == 0, FALSE otherwise
    236           *
    237           * @return      none
    238           */
    239          static void MT_AppCnfBDBSetTCRequireKeyExchange(uint8 *pBuf)
    240          {
    241            uint8 retValue = ZSuccess;
    242            uint8 cmdId;
    243            
    244            /* parse header */
    245            cmdId = pBuf[MT_RPC_POS_CMD1];
    246            pBuf += MT_RPC_FRAME_HDR_SZ;
    247            
    248            if(*pBuf)
    249            {
    250              bdb_setTCRequireKeyExchange(TRUE);
    251            }
    252            else
    253            {
    254              bdb_setTCRequireKeyExchange(FALSE);
    255            }
    256            /* Build and send back the response */
    257            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    258          }
    259          
    260           /*********************************************************************
    261           * @fn          MT_AppCnfBDBSetJoinUsesInstallCodeKey
    262           *
    263           * @brief       Configure bdbJoinUsesInstallCodeKey attribute.
    264           *
    265           * @param       Set attribute to FALSE if *pBuf == 0, FALSE otherwise
    266           *
    267           * @return      none
    268           */
    269          static void MT_AppCnfBDBSetJoinUsesInstallCodeKey(uint8 *pBuf)
    270          {
    271            uint8 retValue = ZSuccess;
    272            uint8 cmdId;
    273            
    274            /* parse header */
    275            cmdId = pBuf[MT_RPC_POS_CMD1];
    276            pBuf += MT_RPC_FRAME_HDR_SZ;
    277            
    278            if(*pBuf)
    279            {
    280              bdb_setJoinUsesInstallCodeKey(TRUE);
    281            }
    282            else
    283            {
    284              bdb_setJoinUsesInstallCodeKey(FALSE);
    285            }
    286            /* Build and send back the response */
    287            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    288          }
    289          
    290           /*********************************************************************
    291           * @fn          MT_AppCnfBDBAddInstallCode
    292           *
    293           * @brief       Add a preconfigured key used as IC derived key to TC device
    294           *              see formats allowed in BDB_INSTALL_CODE_USE.
    295           *
    296           * @param       pBuf - pointer to received buffer
    297           *
    298           * @return      none
    299           */
    300          static void MT_AppCnfBDBAddInstallCode(uint8* pBuf)
    301          {
    302            uint8 retValue = ZSuccess;
    303            uint8 cmdId;
    304            uint8 *pExtAddr;
    305            uint8 installCodeFormat;
    306            
    307            /* parse header */
    308            cmdId = pBuf[MT_RPC_POS_CMD1];
    309            pBuf += MT_RPC_FRAME_HDR_SZ;
    310            
    311            installCodeFormat = *pBuf;
    312            
    313            pBuf++;
    314            
    315            /* Extended Addr */
    316            pExtAddr = pBuf;
    317            pBuf += Z_EXTADDR_LEN;  //Point to the IC data
    318             
    319            switch(installCodeFormat)
    320            {
    321              case BDB_INSTALL_CODE_USE_IC_CRC:
    322                retValue = bdb_addInstallCode(pBuf,pExtAddr);
    323              break;
    324              case BDB_INSTALL_CODE_USE_KEY:
    325                retValue = APSME_AddTCLinkKey(pBuf,pExtAddr);
    326              break;
    327            }
    328            
    329            /* Build and send back the response */
    330            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    331          }
    332          #endif
    333          #if (ZG_BUILD_JOINING_TYPE)
    334          
    335           /*********************************************************************
    336           * @fn      MT_AppCnfBDBSetActiveCentralizedKey
    337           *
    338           * @brief   Set the active centralized key to be used, Global or IC derived.
    339           *          If IC is selected, the IC must be included in the buffer considering 
    340           *          the IC format used by the joining device, see BDB_INSTALL_CODE_USE
    341           *
    342           * @param   pBuf - pointer to received buffer
    343           *
    344           * @return  void
    345           */
    346          static void MT_AppCnfBDBSetActiveCentralizedKey(uint8* pBuf)
    347          {
    348            uint8 retValue;
    349            uint8 cmdId;
    350            
    351            /* parse header */
    352            cmdId = pBuf[MT_RPC_POS_CMD1];
    353            pBuf += MT_RPC_FRAME_HDR_SZ;
    354            
    355            if(*pBuf)
    356            {
    357              //Set Global Default Centralized key
    358              retValue = bdb_setActiveCentralizedLinkKey(TRUE,NULL);
    359            }
    360            else
    361            {
    362              pBuf++;
    363              retValue = bdb_setActiveCentralizedLinkKey(FALSE,pBuf);
    364            }
    365          
    366            /* Build and send back the response */
    367            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    368          }
    369          
    370          #endif //#if(ZG_BUILD_JOINING_TYPE)
    371          
    372          #if (ZG_BUILD_ENDDEVICE_TYPE) 
    373           /*********************************************************************
    374           * @fn      MT_AppCnfBDBZedAttemptRecoverNwk
    375           *
    376           * @brief   Instruct the ZED to try to rejoin its previews network
    377           *
    378           * @param   pBuf - pointer to received buffer
    379           *
    380           * @return  void
    381           */
    382          static void MT_AppCnfBDBZedAttemptRecoverNwk(uint8* pBuf)
    383          {
    384            uint8 retValue;
    385            uint8 cmdId;
    386            
    387            /* parse header */
    388            cmdId = pBuf[MT_RPC_POS_CMD1];
    389            pBuf += MT_RPC_FRAME_HDR_SZ;
    390            
    391            retValue = bdb_ZedAttemptRecoverNwk();
    392          
    393            /* Build and send back the response */
    394            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    395          }
    396          #endif
    397          
    398          
    399          
    400          
    401          #if (ZG_BUILD_COORDINATOR_TYPE)
    402          /***************************************************************************************************
    403          * @fn      MT_AppCnfSetAllowRejoinTCPolicy
    404          *
    405          * @brief   Set the AllowRejoin TC policy
    406          *
    407          * @param   pBuf - pointer to received buffer
    408          *
    409          * @return  void
    410          ***************************************************************************************************/
    411          static void MT_AppCnfSetAllowRejoinTCPolicy(uint8 *pBuf)
    412          {
    413            uint8 retValue = ZSuccess;
    414            uint8 cmdId;
    415          
    416            /* parse header */
    417            cmdId = pBuf[MT_RPC_POS_CMD1];
    418            pBuf += MT_RPC_FRAME_HDR_SZ;
    419           
    420            if(*pBuf)
    421            {
    422              zgAllowRejoins = TRUE;
    423            }
    424            else
    425            {
    426              zgAllowRejoins = FALSE;
    427            }
    428          
    429            /* Build and send back the response */
    430            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    431          }
    432          #endif
    433          
    434          /***************************************************************************************************
    435           * @fn      MT_AppCnfSetEndDeviceTimeout
    436           *
    437           * @brief   Set End Device Timeout
    438           *
    439           * @param   pBuf - pointer to received buffer
    440           *
    441           * @return  void
    442           ***************************************************************************************************/
    443          static void MT_AppCnfSetEndDeviceTimeout(uint8 *pBuf)
    444          {
    445            uint8 retValue = ZSuccess;
    446            uint8 cmdId;
    447            
    448            /* parse header */
    449            cmdId = pBuf[MT_RPC_POS_CMD1];
    450            pBuf += MT_RPC_FRAME_HDR_SZ;
    451          
    452            if(*pBuf > 14)
    453            {
    454              retValue = ZInvalidParameter;
    455            }
    456            else
    457            {
    458              /* Populate info */
    459              zgEndDeviceTimeoutValue = *pBuf;
    460              osal_nv_write( ZCD_NV_END_DEV_TIMEOUT_VALUE, 0, sizeof(zgEndDeviceTimeoutValue), &zgEndDeviceTimeoutValue);
    461            }
    462            /* Build and send back the response */
    463            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    464          }
    465            
    466          /***************************************************************************************************
    467           * @fn      MT_AppCnfSetDefaultRemoteEndDeviceTimeout
    468           *
    469           * @brief   Set Remote End Device Timeout
    470           *
    471           * @param   pBuf - pointer to received buffer
    472           *
    473           * @return  void
    474           ***************************************************************************************************/
    475          static void MT_AppCnfSetDefaultRemoteEndDeviceTimeout(uint8 *pBuf)
    476          {
    477            uint8 retValue = ZSuccess;
    478            uint8 cmdId;
    479            uint8  tempTimeoutIndex;
    480          
    481            /* parse header */
    482            cmdId = pBuf[MT_RPC_POS_CMD1];
    483            pBuf += MT_RPC_FRAME_HDR_SZ;
    484           
    485            /* Populate info */
    486            tempTimeoutIndex = *pBuf++;
    487            
    488            if(tempTimeoutIndex > 14)
    489            {
    490              retValue = ZInvalidParameter;
    491            }
    492            else
    493            {
    494              /* Populate info */
    495              zgNwkEndDeviceTimeoutDefault = tempTimeoutIndex;
    496              osal_nv_write( ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF, 0, sizeof(zgNwkEndDeviceTimeoutDefault), &zgNwkEndDeviceTimeoutDefault );
    497            }
    498          
    499            /* Build and send back the response */
    500            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    501          }
    502          
    503           /***************************************************************************************************
    504           * @fn      MT_AppCnfSetNwkFrameCounter
    505           *
    506           * @brief   Set the nwk frame counter to the specified value for the current network.
    507           *          THIS IS ONLY A DEBUG INTERFACE AND SHOULD NOT BE USE IN REAL APPLICATIONS
    508           *
    509           * @param   pBuf - nwk frame counter
    510           *
    511           * @return  void
    512           ***************************************************************************************************/
    513           static void MT_AppCnfSetNwkFrameCounter(uint8* pBuf)
    514          {
    515            uint8 retValue = ZSuccess;
    516            uint8 cmdId;
    517          
    518            /* parse header */
    519            cmdId = pBuf[MT_RPC_POS_CMD1];
    520            pBuf += MT_RPC_FRAME_HDR_SZ;
    521          
    522            nwkFrameCounter = osal_build_uint32(pBuf, sizeof(uint32));
    523            nwkFrameCounterChanges = 0;
    524            
    525            //Save the NwkFrameCounter
    526            ZDApp_SaveNwkKey();
    527          
    528            /* Build and send back the response */
    529            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_APP_CNF), cmdId, 1, &retValue);
    530          }
    531          
    532          #endif
    533          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     17   MT_AppCnfCommandProcessing
        0     13   -> MT_BuildAndSendZToolResponse
        0     13   -> ZDApp_SaveNwkKey
        0     13   -> bdb_StartCommissioning
        0     13   -> bdb_ZedAttemptRecoverNwk
        0     13   -> bdb_setActiveCentralizedLinkKey
        0     13   -> bdb_setChannelAttribute
        0     13   -> osal_build_uint32
        0     17   -> osal_nv_write
      3      3   MT_AppCnfCommissioningNotification
        2      3   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?Subroutine0
       4  ?Subroutine1
      20  ?Subroutine2
     362  MT_AppCnfCommandProcessing
      79  MT_AppCnfCommissioningNotification
      12  -- Other

 
 473 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
  12 bytes of CODE     memory
 473 bytes of HUGECODE memory

Errors: none
Warnings: none
