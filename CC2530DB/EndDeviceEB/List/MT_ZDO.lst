###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Mar/2020  15:19:22
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack 3.0.1\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f C:\Users\monster\AppData\Local\Temp\EW1A8C.tmp ("C:\Texas
#        Instruments\Z-Stack 3.0.1\Components\mt\MT_ZDO.c" -D NV_INIT -D
#        xNV_RESTORE -D TC_LINKKEY_JOIN -D ZBA_FALLBACK_NWKKEY -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC
#        -D MT_ZDO_FUNC -D MT_ZDO_MGMT -D xZCL_EZMODE -D MT_APP_CNF_FUNC -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF -D ZCL_GROUPS -D
#        ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D HAL_KEY=FALSE -D
#        HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -D BDB_REPORTING -lC
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=MAX_CHANNELS_24GHZ -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Russian_RUS.1251
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List\MT_ZDO.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\Obj\MT_ZDO.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.1\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
      4            Revision:       $Revision: 42371 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          **************************************************************************************************/
     38          
     39          #ifdef MT_ZDO_FUNC
     40          
     41          /**************************************************************************************************
     42           * INCLUDES
     43           **************************************************************************************************/
     44          #include "ZComDef.h"
     45          #include "OSAL.h"
     46          #include "OSAL_Nv.h"
     47          #include "MT.h"
     48          #include "MT_ZDO.h"
     49          #include "AddrMgr.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          #include "bdb_interface.h"
     58          
     59          #if defined ( MT_ZDO_EXTENSIONS )
     60            #include "rtg.h"
     61          #endif
     62          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     63            #include "ZDSecMgr.h"
     64          #endif
     65          
     66          #include "nwk_util.h"
     67          
     68          /**************************************************************************************************
     69           * CONSTANTS
     70           **************************************************************************************************/
     71          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     72          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     73          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     74          #define MT_ZDO_BEACON_IND_LEN             21
     75          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     76          #define MT_ZDO_JOIN_CNF_LEN               5
     77          
     78          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     79          // sizeof(zdoConcentratorInd_t) is not usable.
     80          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     81          
     82          #define MTZDO_RESPONSE_BUFFER_LEN   100
     83          
     84          #define MTZDO_MAX_MATCH_CLUSTERS    16
     85          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     86          
     87          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     88          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     89          
     90          #define MT_ZDO_STATUS_LEN   1
     91          
     92          #if defined ( MT_ZDO_EXTENSIONS )
     93          typedef struct
     94          {
     95            uint16            ami;
     96            uint16            keyNvId;   // index to the Link Key table in NV
     97            ZDSecMgr_Authentication_Option authenticateOption;
     98          } ZDSecMgrEntry_t;
     99          #endif  // MT_ZDO_EXTENSIONS
    100          
    101          /**************************************************************************************************
    102           * GLOBAL VARIABLES
    103           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    106          
    107          /**************************************************************************************************
    108           * LOCAL VARIABLES
    109           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          bool ignoreIndication = FALSE;
   \                     ignoreIndication:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    111          
    112          /**************************************************************************************************
    113           * LOCAL FUNCTIONS
    114           **************************************************************************************************/
    115          #if defined (MT_ZDO_FUNC)
    116          static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    117          static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    118          static void MT_ZdoNodeDescRequest(uint8 *pBuf);
    119          static void MT_ZdoPowerDescRequest(uint8 *pBuf);
    120          static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    121          static void MT_ZdoActiveEpRequest(uint8 *pBuf);
    122          static void MT_ZdoMatchDescRequest(uint8 *pBuf);
    123          static void MT_ZdoComplexDescRequest(uint8 *pBuf);
    124          static void MT_ZdoUserDescRequest(uint8 *pBuf);
    125          static void MT_ZdoEndDevAnnce(uint8 *pBuf);
    126          static void MT_ZdoUserDescSet(uint8 *pBuf);
    127          static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    128          static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    129          static void MT_ZdoBindRequest(uint8 *pBuf);
    130          static void MT_ZdoUnbindRequest(uint8 *pBuf);
    131          #if defined ( MT_SYS_KEY_MANAGEMENT )
    132          static void MT_ZdoSetLinkKey(uint8 *pBuf);
    133          static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    134          static void MT_ZdoGetLinkKey(uint8 *pBuf);
    135          #endif /* MT_SYS_KEY_MANAGEMENT */
    136          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    137          static void MT_ZdoJoinReq(uint8 *pBuf);
    138          /* Call back function */
    139          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    140          void *MT_ZdoBeaconIndCB ( void *pStr );
    141          void *MT_ZdoJoinCnfCB ( void *pStr );
    142          #if defined (MT_ZDO_MGMT)
    143          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    144          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    145          static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    146          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    147          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    148          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    149          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    150          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    151          #endif /* MT_ZDO_MGMT */
    152          static void MT_ZdoSendData( uint8 *pBuf );
    153          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    154          static void MT_ZdoStartupFromApp(uint8 *pBuf);
    155          static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    156          static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    157          static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
    158          #endif /* MT_ZDO_FUNC */
    159          
    160          #if defined (MT_ZDO_CB_FUNC)
    161          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    162          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    163          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    164          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    165          void* MT_ZdoSrcRtgCB( void *pStr );
    166          static void *MT_ZdoConcentratorIndCB(void *pStr);
    167          static void *MT_ZdoLeaveInd(void *vPtr);
    168          void *MT_ZdoTcDeviceInd( void *params );
    169          void *MT_ZdoPermitJoinInd( void *duration );
    170          #endif /* MT_ZDO_CB_FUNC */
    171          
    172          #if defined ( MT_ZDO_EXTENSIONS )
    173          #if ( ZG_BUILD_COORDINATOR_TYPE )
    174          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    175          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    176          #endif // ZDO_COORDINATOR
    177          static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    178          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    179          static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    180          static void MT_ZdoExtRouteDisc( uint8 *pBuf );
    181          static void MT_ZdoExtRouteCheck( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    183          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    184          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    185          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    186          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    187          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    188          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    189          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    190          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    191          static void MT_ZdoExtSetParams( uint8 *pBuf );
    192          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    193          #endif // MT_ZDO_EXTENSIONS
    194          
    195          #if defined (MT_ZDO_FUNC)
    196          /***************************************************************************************************
    197           * @fn      MT_ZdoInit
    198           *
    199           * @brief   MT ZDO initialization
    200           *
    201           * @param   none
    202           *
    203           * @return  none
    204           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    206          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    207          #ifdef MT_ZDO_CB_FUNC
    208            /* Register with ZDO for indication callbacks */
    209            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
    210            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
    211            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
    212            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
    213            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
    214          #endif
    215          }
   \   000000   02....       LJMP      ?BRET
    216          
    217          /***************************************************************************************************
    218           * @fn      MT_ZdoCommandProcessing
    219           *
    220           * @brief
    221           *
    222           *   Process all the ZDO commands that are issued by test tool
    223           *
    224           * @param   pBuf - pointer to the msg buffer
    225           *
    226           *          | LEN  | CMD0  | CMD1  |  DATA  |
    227           *          |  1   |   1   |   1   |  0-255 |
    228           *
    229           * @return  status
    230           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    233            uint8 status = MT_RPC_SUCCESS;
   \   00000A   75..00       MOV       ?V12,#0x0
    234          
    235            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000D   EA           MOV       A,R2
   \   00000E   2402         ADD       A,#0x2
   \   000010   F8           MOV       R0,A
   \   000011   E4           CLR       A
   \   000012   3B           ADDC      A,R3
   \   000013   F9           MOV       R1,A
   \   000014   E8           MOV       A,R0
   \   000015   FE           MOV       R6,A
   \   000016   E9           MOV       A,R1
   \   000017   FF           MOV       R7,A
   \   000018   8882         MOV       DPL,R0
   \   00001A   F583         MOV       DPH,A
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V0,A
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   A3           INC       DPTR
   \   000024   AC82         MOV       R4,DPL
   \   000026   AD83         MOV       R5,DPH
   \   000028   EA           MOV       A,R2
   \   000029   2403         ADD       A,#0x3
   \   00002B   08           INC       R0
   \   00002C   E4           CLR       A
   \   00002D   3B           ADDC      A,R3
   \   00002E   F9           MOV       R1,A
   \   00002F   E5..         MOV       A,?V0
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??MT_ZdoCommandProcessing_0 & 0xFFFF
   \   000036   14           DEC       A
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   00003C   14           DEC       A
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   000042   14           DEC       A
   \   000043   7003         JNZ       $+5
   \   000045   02....       LJMP      ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   000048   14           DEC       A
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   00004E   14           DEC       A
   \   00004F   7003         JNZ       $+5
   \   000051   02....       LJMP      ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   000054   14           DEC       A
   \   000055   7003         JNZ       $+5
   \   000057   02....       LJMP      ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   00005A   14           DEC       A
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   000060   14           DEC       A
   \   000061   7003         JNZ       $+5
   \   000063   02....       LJMP      ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   000066   24FE         ADD       A,#-0x2
   \   000068   7003         JNZ       $+5
   \   00006A   02....       LJMP      ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   00006D   14           DEC       A
   \   00006E   7003         JNZ       $+5
   \   000070   02....       LJMP      ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000073   14           DEC       A
   \   000074   7003         JNZ       $+5
   \   000076   02....       LJMP      ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   000079   24EC         ADD       A,#-0x14
   \   00007B   7003         JNZ       $+5
   \   00007D   02....       LJMP      ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   000080   14           DEC       A
   \   000081   7003         JNZ       $+5
   \   000083   02....       LJMP      ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   000086   14           DEC       A
   \   000087   7003         JNZ       $+5
   \   000089   02....       LJMP      ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   00008C   24FC         ADD       A,#-0x4
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   000093   14           DEC       A
   \   000094   7003         JNZ       $+5
   \   000096   02....       LJMP      ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   000099   14           DEC       A
   \   00009A   7003         JNZ       $+5
   \   00009C   02....       LJMP      ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   00009F   14           DEC       A
   \   0000A0   7003         JNZ       $+5
   \   0000A2   02....       LJMP      ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   0000A5   24F9         ADD       A,#-0x7
   \   0000A7   7003         JNZ       $+5
   \   0000A9   02....       LJMP      ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   0000AC   14           DEC       A
   \   0000AD   7003         JNZ       $+5
   \   0000AF   02....       LJMP      ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   0000B2   14           DEC       A
   \   0000B3   7003         JNZ       $+5
   \   0000B5   02....       LJMP      ??MT_ZdoCommandProcessing_21 & 0xFFFF
   \   0000B8   14           DEC       A
   \   0000B9   7003         JNZ       $+5
   \   0000BB   02....       LJMP      ??MT_ZdoCommandProcessing_22 & 0xFFFF
   \   0000BE   14           DEC       A
   \   0000BF   7003         JNZ       $+5
   \   0000C1   02....       LJMP      ??MT_ZdoCommandProcessing_23 & 0xFFFF
   \   0000C4   14           DEC       A
   \   0000C5   7003         JNZ       $+5
   \   0000C7   02....       LJMP      ??MT_ZdoCommandProcessing_24 & 0xFFFF
   \   0000CA   14           DEC       A
   \   0000CB   7003         JNZ       $+5
   \   0000CD   02....       LJMP      ??MT_ZdoCommandProcessing_25 & 0xFFFF
   \   0000D0   14           DEC       A
   \   0000D1   7003         JNZ       $+5
   \   0000D3   02....       LJMP      ??MT_ZdoCommandProcessing_26 & 0xFFFF
   \   0000D6   24F9         ADD       A,#-0x7
   \   0000D8   7003         JNZ       $+5
   \   0000DA   02....       LJMP      ??MT_ZdoCommandProcessing_27 & 0xFFFF
   \   0000DD   14           DEC       A
   \   0000DE   7003         JNZ       $+5
   \   0000E0   02....       LJMP      ??MT_ZdoCommandProcessing_28 & 0xFFFF
   \   0000E3   14           DEC       A
   \   0000E4   7003         JNZ       $+5
   \   0000E6   02....       LJMP      ??MT_ZdoCommandProcessing_29 & 0xFFFF
   \   0000E9   2474         ADD       A,#0x74
   \   0000EB   7003         JNZ       $+5
   \   0000ED   02....       LJMP      ??MT_ZdoCommandProcessing_30 & 0xFFFF
   \   0000F0   02....       LJMP      ??MT_ZdoCommandProcessing_31 & 0xFFFF
    236            {
    237          #if defined ( ZDO_NWKADDR_REQUEST )
    238              case MT_ZDO_NWK_ADDR_REQ:
    239                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   0000F3   7401         MOV       A,#0x1
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   E5..         MOV       A,?V0
   \   0000FA   F0           MOVX      @DPTR,A
   \   0000FB   0A           INC       R2
   \   0000FC   0A           INC       R2
   \   0000FD   0A           INC       R2
   \   0000FE   E9           MOV       A,R1
   \   0000FF   FB           MOV       R3,A
   \   000100   E8           MOV       A,R0
   \   000101   2408         ADD       A,#0x8
   \   000103   F8           MOV       R0,A
   \   000104   E4           CLR       A
   \   000105   3B           ADDC      A,R3
   \   000106   F9           MOV       R1,A
   \   000107                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000107   7D00         MOV       R5,#0x0
   \   000109   8882         MOV       DPL,R0
   \   00010B   F583         MOV       DPH,A
   \   00010D   A3           INC       DPTR
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   FC           MOV       R4,A
   \   000110   8882         MOV       DPL,R0
   \   000112   8983         MOV       DPH,R1
   \   000114   E0           MOVX      A,@DPTR
   \   000115   F9           MOV       R1,A
   \   000116   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000119   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
    240                break;
    241          #endif
    242          
    243          #if defined ( ZDO_IEEEADDR_REQUEST )
    244              case MT_ZDO_IEEE_ADDR_REQ:
    245                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   00011C   7401         MOV       A,#0x1
   \   00011E   12....       LCALL     ?XSTACK_DISP0_8
   \   000121   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000124                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000124   7D00         MOV       R5,#0x0
   \   000126   8E82         MOV       DPL,R6
   \   000128   8F83         MOV       DPH,R7
   \   00012A   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   F9           MOV       R1,A
   \   00012F   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000132   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
    246                break;
    247          #endif
    248          
    249          #if defined ( ZDO_NODEDESC_REQUEST )
    250              case MT_ZDO_NODE_DESC_REQ:
    251                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000135   7401         MOV       A,#0x1
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014C   7902         MOV       R1,#0x2
   \   00014E   02....       LJMP      ??MT_ZdoCommandProcessing_33 & 0xFFFF
    252                break;
    253          #endif
    254          
    255          #if defined ( ZDO_POWERDESC_REQUEST )
    256              case MT_ZDO_POWER_DESC_REQ:
    257                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   000151   7401         MOV       A,#0x1
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000168   7903         MOV       R1,#0x3
   \   00016A   E9           MOV       A,R1
   \   00016B   02....       LJMP      ??MT_ZdoCommandProcessing_34 & 0xFFFF
    258                break;
    259          #endif
    260          
    261          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    262              case MT_ZDO_SIMPLE_DESC_REQ:
    263                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   00016E   7401         MOV       A,#0x1
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000182   5001         JNC       ??MT_ZdoCommandProcessing_35
   \   000184   0F           INC       R7
   \                     ??MT_ZdoCommandProcessing_35:
   \   000185                ; Setup parameters for call to function osal_build_uint16
   \   000185   FA           MOV       R2,A
   \   000186   EF           MOV       A,R7
   \   000187   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018D   8E82         MOV       DPL,R6
   \   00018F   8F83         MOV       DPH,R7
   \   000191   A3           INC       DPTR
   \   000192   A3           INC       DPTR
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F9           MOV       R1,A
   \   000195   7403         MOV       A,#0x3
   \   000197   12....       LCALL     ?XSTACK_DISP101_8
   \   00019A   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00019D   02....       LJMP      ??MT_ZdoCommandProcessing_36 & 0xFFFF
    264                break;
    265          #endif
    266          
    267          #if defined ( ZDO_ACTIVEEP_REQUEST )
    268              case MT_ZDO_ACTIVE_EP_REQ:
    269                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   0001A0   7401         MOV       A,#0x1
   \   0001A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A5   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B1   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001B7   7905         MOV       R1,#0x5
   \   0001B9   803A         SJMP      ??MT_ZdoCommandProcessing_33
    270                break;
    271          #endif
    272          
    273          #if defined ( ZDO_MATCH_REQUEST )
    274              case MT_ZDO_MATCH_DESC_REQ:
    275                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   0001BB                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   0001BB   12....       LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    276                break;
   \   0001BE   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    277          #endif
    278          
    279          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    280              case MT_ZDO_COMPLEX_DESC_REQ:
    281                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   0001C1   7401         MOV       A,#0x1
   \   0001C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C6   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D8   7910         MOV       R1,#0x10
   \   0001DA   8019         SJMP      ??MT_ZdoCommandProcessing_33
    282                break;
    283          #endif
    284          
    285          #if defined ( ZDO_USERDESC_REQUEST )
    286              case MT_ZDO_USER_DESC_REQ:
    287                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   0001DC   7401         MOV       A,#0x1
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001ED   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001F3   7911         MOV       R1,#0x11
   \                     ??MT_ZdoCommandProcessing_33:
   \   0001F5   7403         MOV       A,#0x3
   \                     ??MT_ZdoCommandProcessing_34:
   \   0001F7   12....       LCALL     ?XSTACK_DISP101_8
   \   0001FA   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   0001FD   802C         SJMP      ??MT_ZdoCommandProcessing_36
    288                break;
    289          #endif
    290          
    291          #if defined ( ZDO_ENDDEVICE_ANNCE )
    292              case MT_ZDO_END_DEV_ANNCE:
    293                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   0001FF   7401         MOV       A,#0x1
   \   000201   12....       LCALL     ?XSTACK_DISP0_8
   \   000204   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000207   EE           MOV       A,R6
   \   000208   2402         ADD       A,#0x2
   \   00020A   FE           MOV       R6,A
   \   00020B   5001         JNC       ??MT_ZdoCommandProcessing_38
   \   00020D   0F           INC       R7
   \                     ??MT_ZdoCommandProcessing_38:
   \   00020E                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   00020E   75..00       MOV       ?V0,#0x0
   \   000211   78..         MOV       R0,#?V0
   \   000213   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000216   8E82         MOV       DPL,R6
   \   000218   8F83         MOV       DPH,R7
   \   00021A   A3           INC       DPTR
   \   00021B   A3           INC       DPTR
   \   00021C   A3           INC       DPTR
   \   00021D   A3           INC       DPTR
   \   00021E   A3           INC       DPTR
   \   00021F   A3           INC       DPTR
   \   000220   A3           INC       DPTR
   \   000221   A3           INC       DPTR
   \   000222   E0           MOVX      A,@DPTR
   \   000223   F9           MOV       R1,A
   \   000224   EE           MOV       A,R6
   \   000225   FC           MOV       R4,A
   \   000226   EF           MOV       A,R7
   \   000227   FD           MOV       R5,A
   \   000228   12....       LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \                     ??MT_ZdoCommandProcessing_36:
   \   00022B   7401         MOV       A,#0x1
   \   00022D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000230   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
    294                break;
    295          #endif
    296          
    297          #if defined ( ZDO_USERDESCSET_REQUEST )
    298              case MT_ZDO_USER_DESC_SET:
    299                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000233   7401         MOV       A,#0x1
   \   000235   12....       LCALL     ?XSTACK_DISP0_8
   \   000238   E5..         MOV       A,?V0
   \   00023A   F0           MOVX      @DPTR,A
   \   00023B   88..         MOV       ?V0,R0
   \   00023D   89..         MOV       ?V1,R1
   \   00023F   740A         MOV       A,#0xa
   \   000241   12....       LCALL     ?XSTACK_DISP0_8
   \   000244   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   EA           MOV       A,R2
   \   00024B   F0           MOVX      @DPTR,A
   \   00024C   A3           INC       DPTR
   \   00024D   EB           MOV       A,R3
   \   00024E   F0           MOVX      @DPTR,A
   \   00024F   E5..         MOV       A,?V0
   \   000251   2402         ADD       A,#0x2
   \   000253   F5..         MOV       ?V0,A
   \   000255   5002         JNC       ??MT_ZdoCommandProcessing_39
   \   000257   05..         INC       ?V1
   \                     ??MT_ZdoCommandProcessing_39:
   \   000259                ; Setup parameters for call to function osal_build_uint16
   \   000259   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00025C   AE..         MOV       R6,?V2
   \   00025E   85..82       MOV       DPL,?V0
   \   000261   85..83       MOV       DPH,?V1
   \   000264   A3           INC       DPTR
   \   000265   A3           INC       DPTR
   \   000266   E0           MOVX      A,@DPTR
   \   000267   C0E0         PUSH      A
   \   000269   740C         MOV       A,#0xc
   \   00026B   12....       LCALL     ?XSTACK_DISP0_8
   \   00026E   D0E0         POP       A
   \   000270   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000273   A3           INC       DPTR
   \   000274   A982         MOV       R1,DPL
   \   000276   AA83         MOV       R2,DPH
   \   000278   89..         MOV       ?V0,R1
   \   00027A   8A..         MOV       ?V1,R2
   \   00027C   75..00       MOV       ?V2,#0x0
   \   00027F   78..         MOV       R0,#?V0
   \   000281   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000284   740F         MOV       A,#0xf
   \   000286   12....       LCALL     ?XSTACK_DISP0_8
   \   000289   E0           MOVX      A,@DPTR
   \   00028A   FC           MOV       R4,A
   \   00028B   7D00         MOV       R5,#0x0
   \   00028D   7410         MOV       A,#0x10
   \   00028F   12....       LCALL     ?XSTACK_DISP0_8
   \   000292   AA82         MOV       R2,DPL
   \   000294   AB83         MOV       R3,DPH
   \   000296   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000299   7403         MOV       A,#0x3
   \   00029B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00029E                ; Setup parameters for call to function ZDP_UserDescSet
   \   00029E   740C         MOV       A,#0xc
   \   0002A0   12....       LCALL     ?XSTACK_DISP100_8
   \   0002A3   88..         MOV       ?V0,R0
   \   0002A5   89..         MOV       ?V1,R1
   \   0002A7   78..         MOV       R0,#?V0
   \   0002A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002AC   7900         MOV       R1,#0x0
   \   0002AE   EE           MOV       A,R6
   \   0002AF   FC           MOV       R4,A
   \   0002B0   AD..         MOV       R5,?V3
   \   0002B2   7404         MOV       A,#0x4
   \   0002B4   12....       LCALL     ?XSTACK_DISP101_8
   \   0002B7   12....       LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   0002BA   7402         MOV       A,#0x2
   \   0002BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002BF   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
    300                break;
    301          #endif
    302          
    303          #if defined ( ZDO_SERVERDISC_REQUEST )
    304              case MT_ZDO_SERVICE_DISC_REQ:
    305                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   0002C2   7401         MOV       A,#0x1
   \   0002C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C7   E5..         MOV       A,?V0
   \   0002C9   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0002CC                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   0002CC   7900         MOV       R1,#0x0
   \   0002CE   12....       LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   0002D1   02....       LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
    306                break;
    307          #endif
    308          
    309          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    310              case MT_ZDO_END_DEV_BIND_REQ:
    311                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   0002D4                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   0002D4   12....       LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    312                break;
   \   0002D7   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    313          #endif
    314          
    315          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    316              case MT_ZDO_BIND_REQ:
    317                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   0002DA                ; Setup parameters for call to function MT_ZdoBindRequest
   \   0002DA   12....       LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    318                break;
   \   0002DD   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    319          #endif
    320          
    321          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    322              case MT_ZDO_UNBIND_REQ:
    323                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   0002E0                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   0002E0   12....       LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    324                break;
   \   0002E3   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    325          #endif
    326          
    327          #if defined ( MT_SYS_KEY_MANAGEMENT )
    328              case MT_ZDO_SET_LINK_KEY:
    329                MT_ZdoSetLinkKey(pBuf);
    330                break;
    331          
    332              case MT_ZDO_REMOVE_LINK_KEY:
    333                MT_ZdoRemoveLinkKey(pBuf);
    334                break;
    335          
    336              case MT_ZDO_GET_LINK_KEY:
    337                MT_ZdoGetLinkKey(pBuf);
    338                break;
    339          #endif // MT_SYS_KEY_MANAGEMENT
    340          
    341          #if defined ( ZDO_MANUAL_JOIN )
    342              case MT_ZDO_NWK_DISCOVERY_REQ:
    343                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   0002E6   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0002E9                ; Setup parameters for call to function osal_build_uint32
   \   0002E9   7904         MOV       R1,#0x4
   \   0002EB   0A           INC       R2
   \   0002EC   0A           INC       R2
   \   0002ED   0A           INC       R2
   \   0002EE   FB           MOV       R3,A
   \   0002EF   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0002F2                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   0002F2   8E82         MOV       DPL,R6
   \   0002F4   8F83         MOV       DPH,R7
   \   0002F6   A3           INC       DPTR
   \   0002F7   A3           INC       DPTR
   \   0002F8   A3           INC       DPTR
   \   0002F9   A3           INC       DPTR
   \   0002FA   E0           MOVX      A,@DPTR
   \   0002FB   F9           MOV       R1,A
   \   0002FC   12....       LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   0002FF   E9           MOV       A,R1
   \   000300   85..82       MOV       DPL,?XSP + 0
   \   000303   85..83       MOV       DPH,?XSP + 1
   \   000306   F0           MOVX      @DPTR,A
   \   000307                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000307   7A..         MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   000309   7B..         MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   00030B   7902         MOV       R1,#0x2
   \   00030D   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000310                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000310   7A..         MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   000312   7B..         MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   000314   7903         MOV       R1,#0x3
   \   000316   805B         SJMP      ??MT_ZdoCommandProcessing_40
    344                break;
    345          
    346              case MT_ZDO_JOIN_REQ:
    347                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   000318   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00031B                ; Setup parameters for call to function osal_build_uint16
   \   00031B   8882         MOV       DPL,R0
   \   00031D   F583         MOV       DPH,A
   \   00031F   A3           INC       DPTR
   \   000320   AA82         MOV       R2,DPL
   \   000322   AB83         MOV       R3,DPH
   \   000324   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000327                ; Setup parameters for call to function osal_build_uint16
   \   000327   EE           MOV       A,R6
   \   000328   240B         ADD       A,#0xb
   \   00032A   FA           MOV       R2,A
   \   00032B   E4           CLR       A
   \   00032C   3F           ADDC      A,R7
   \   00032D   FB           MOV       R3,A
   \   00032E   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000331   8A..         MOV       ?V4,R2
   \   000333   8B..         MOV       ?V5,R3
   \   000335                ; Setup parameters for call to function ZDApp_JoinReq
   \   000335   EE           MOV       A,R6
   \   000336   240E         ADD       A,#0xe
   \   000338   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   00033B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00033E   EE           MOV       A,R6
   \   00033F   240D         ADD       A,#0xd
   \   000341   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000344   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000347   78..         MOV       R0,#?V4
   \   000349   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00034C   EE           MOV       A,R6
   \   00034D   2403         ADD       A,#0x3
   \   00034F   FC           MOV       R4,A
   \   000350   E4           CLR       A
   \   000351   3F           ADDC      A,R7
   \   000352   FD           MOV       R5,A
   \   000353   AA..         MOV       R2,?V2
   \   000355   AB..         MOV       R3,?V3
   \   000357   8E82         MOV       DPL,R6
   \   000359   8F83         MOV       DPH,R7
   \   00035B   E0           MOVX      A,@DPTR
   \   00035C   F9           MOV       R1,A
   \   00035D   12....       LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000360   7404         MOV       A,#0x4
   \   000362   12....       LCALL     ?DEALLOC_XSTACK8
   \   000365   E9           MOV       A,R1
   \   000366   85..82       MOV       DPL,?XSP + 0
   \   000369   85..83       MOV       DPH,?XSP + 1
   \   00036C   F0           MOVX      @DPTR,A
   \   00036D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00036D   7A..         MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   00036F   7B..         MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000371   7904         MOV       R1,#0x4
   \                     ??MT_ZdoCommandProcessing_40:
   \   000373   12....       LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   \   000376                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000376   AC..         MOV       R4,?XSP + 0
   \   000378   AD..         MOV       R5,?XSP + 1
   \   00037A   7B01         MOV       R3,#0x1
   \   00037C   AA..         MOV       R2,?V0
   \   00037E   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
    348                break;
    349          #endif
    350          
    351          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    352              case MT_ZDO_MGMT_NWKDISC_REQ:
    353                MT_ZdoMgmtNwkDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_19:
   \   000381   7401         MOV       A,#0x1
   \   000383   12....       LCALL     ?XSTACK_DISP0_8
   \   000386   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000389   12....       LCALL     ?XSTACK_DISP0_8
   \   00038C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00038F   12....       LCALL     ?XSTACK_DISP0_8
   \   000392   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000395   5001         JNC       ??MT_ZdoCommandProcessing_42
   \   000397   0F           INC       R7
   \                     ??MT_ZdoCommandProcessing_42:
   \   000398                ; Setup parameters for call to function osal_build_uint32
   \   000398   7904         MOV       R1,#0x4
   \   00039A   FA           MOV       R2,A
   \   00039B   EF           MOV       A,R7
   \   00039C   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00039F                ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
   \   00039F   78..         MOV       R0,#?V0
   \   0003A1   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0003A4   7D00         MOV       R5,#0x0
   \   0003A6   8E82         MOV       DPL,R6
   \   0003A8   8F83         MOV       DPH,R7
   \   0003AA   A3           INC       DPTR
   \   0003AB   A3           INC       DPTR
   \   0003AC   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0003AF   A3           INC       DPTR
   \   0003B0   A3           INC       DPTR
   \   0003B1   E0           MOVX      A,@DPTR
   \   0003B2   F9           MOV       R1,A
   \   0003B3   7406         MOV       A,#0x6
   \   0003B5   12....       LCALL     ?XSTACK_DISP101_8
   \   0003B8   12....       LCALL     `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
   \   0003BB   7404         MOV       A,#0x4
   \   0003BD   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??MT_ZdoCommandProcessing_32:
   \   0003C0   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0003C3   EB           MOV       A,R3
   \   0003C4   02....       LJMP      ??MT_ZdoCommandProcessing_43 & 0xFFFF
    354                break;
    355          #endif
    356          
    357          #if defined ( ZDO_MGMT_LQI_REQUEST )
    358              case MT_ZDO_MGMT_LQI_REQ:
    359                MT_ZdoMgmtLqiRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   0003C7   740B         MOV       A,#0xb
   \   0003C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0003CC   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0003CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D2   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0003D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D8   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0003DB   C0E0         PUSH      A
   \   0003DD   7401         MOV       A,#0x1
   \   0003DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E2   D0E0         POP       A
   \   0003E4   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0003E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003EA   7402         MOV       A,#0x2
   \   0003EC   12....       LCALL     ?XSTACK_DISP100_8
   \   0003EF   88..         MOV       ?V0,R0
   \   0003F1   89..         MOV       ?V1,R1
   \   0003F3   78..         MOV       R0,#?V0
   \   0003F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003F8   75..31       MOV       ?V0,#0x31
   \   0003FB   8034         SJMP      ??MT_ZdoCommandProcessing_44
    360                break;
    361          #endif
    362          
    363          #if defined ( ZDO_MGMT_RTG_REQUEST )
    364              case MT_ZDO_MGMT_RTG_REQ:
    365                MT_ZdoMgmtRtgRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   0003FD   740B         MOV       A,#0xb
   \   0003FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000402   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000405   12....       LCALL     ?XSTACK_DISP0_8
   \   000408   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00040B   12....       LCALL     ?XSTACK_DISP0_8
   \   00040E   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000411   C0E0         PUSH      A
   \   000413   7401         MOV       A,#0x1
   \   000415   12....       LCALL     ?XSTACK_DISP0_8
   \   000418   D0E0         POP       A
   \   00041A   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00041D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000420   7402         MOV       A,#0x2
   \   000422   12....       LCALL     ?XSTACK_DISP100_8
   \   000425   88..         MOV       ?V0,R0
   \   000427   89..         MOV       ?V1,R1
   \   000429   78..         MOV       R0,#?V0
   \   00042B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00042E   75..32       MOV       ?V0,#0x32
   \                     ??MT_ZdoCommandProcessing_44:
   \   000431   75..00       MOV       ?V1,#0x0
   \   000434   78..         MOV       R0,#?V0
   \   000436   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000439   7901         MOV       R1,#0x1
   \   00043B   7407         MOV       A,#0x7
   \   00043D   12....       LCALL     ?XSTACK_DISP102_8
   \   000440   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000443   12....       LCALL     ?DEALLOC_XSTACK8
   \   000446   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000449   740B         MOV       A,#0xb
   \                     ??MT_ZdoCommandProcessing_43:
   \   00044B   12....       LCALL     ?XSTACK_DISP0_8
   \   00044E   E0           MOVX      A,@DPTR
   \   00044F   02....       LJMP      ??MT_ZdoCommandProcessing_45 & 0xFFFF
    366                break;
    367          #endif
    368          
    369          #if defined ( ZDO_MGMT_BIND_REQUEST )
    370              case MT_ZDO_MGMT_BIND_REQ:
    371                MT_ZdoMgmtBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   000452   85....       MOV       ?V15,?V0
   \   000455   0E           INC       R6
   \   000456   E9           MOV       A,R1
   \   000457   FF           MOV       R7,A
   \   000458   740A         MOV       A,#0xa
   \   00045A   12....       LCALL     ?XSTACK_DISP0_8
   \   00045D   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000460   12....       LCALL     ?XSTACK_DISP0_8
   \   000463   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000466   C0E0         PUSH      A
   \   000468   7401         MOV       A,#0x1
   \   00046A   12....       LCALL     ?XSTACK_DISP0_8
   \   00046D   D0E0         POP       A
   \   00046F   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000472   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000475   7402         MOV       A,#0x2
   \   000477   12....       LCALL     ?XSTACK_DISP100_8
   \   00047A   88..         MOV       ?V0,R0
   \   00047C   89..         MOV       ?V1,R1
   \   00047E   78..         MOV       R0,#?V0
   \   000480   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000483   75..33       MOV       ?V0,#0x33
   \   000486   75..00       MOV       ?V1,#0x0
   \   000489   78..         MOV       R0,#?V0
   \   00048B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00048E   7901         MOV       R1,#0x1
   \   000490   7407         MOV       A,#0x7
   \   000492   12....       LCALL     ?XSTACK_DISP102_8
   \   000495   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000498   12....       LCALL     ?DEALLOC_XSTACK8
   \   00049B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00049E   AA..         MOV       R2,?V15
   \   0004A0   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
    372                break;
    373          #endif
    374          
    375          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    376              case MT_ZDO_MGMT_LEAVE_REQ:
    377                MT_ZdoMgmtLeaveRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_23:
   \   0004A3   85....       MOV       ?V14,?V0
   \   0004A6   0E           INC       R6
   \   0004A7   E9           MOV       A,R1
   \   0004A8   FF           MOV       R7,A
   \   0004A9   740A         MOV       A,#0xa
   \   0004AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0004AE   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0004B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B4   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0004B7   5001         JNC       ??MT_ZdoCommandProcessing_46
   \   0004B9   0F           INC       R7
   \                     ??MT_ZdoCommandProcessing_46:
   \   0004BA   2408         ADD       A,#0x8
   \   0004BC   FA           MOV       R2,A
   \   0004BD   E4           CLR       A
   \   0004BE   3F           ADDC      A,R7
   \   0004BF   FB           MOV       R3,A
   \   0004C0   8A82         MOV       DPL,R2
   \   0004C2   F583         MOV       DPH,A
   \   0004C4   E0           MOVX      A,@DPTR
   \   0004C5   A2E1         MOV       C,0xE0 /* A   */.1
   \   0004C7   5004         JNC       ??MT_ZdoCommandProcessing_47
   \   0004C9   D2F0         SETB      B.0
   \   0004CB   8002         SJMP      ??MT_ZdoCommandProcessing_48
   \                     ??MT_ZdoCommandProcessing_47:
   \   0004CD   C2F0         CLR       B.0
   \                     ??MT_ZdoCommandProcessing_48:
   \   0004CF                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   0004CF   75..00       MOV       ?V0,#0x0
   \   0004D2   78..         MOV       R0,#?V0
   \   0004D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004D7   8A82         MOV       DPL,R2
   \   0004D9   8B83         MOV       DPH,R3
   \   0004DB   E0           MOVX      A,@DPTR
   \   0004DC   A2E0         MOV       C,0xE0 /* A   */.0
   \   0004DE   E4           CLR       A
   \   0004DF   33           RLC       A
   \   0004E0   F5..         MOV       ?V0,A
   \   0004E2   78..         MOV       R0,#?V0
   \   0004E4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0004E7   A2F0         MOV       C,B.0
   \   0004E9   E4           CLR       A
   \   0004EA   33           RLC       A
   \   0004EB   F9           MOV       R1,A
   \   0004EC   EE           MOV       A,R6
   \   0004ED   FC           MOV       R4,A
   \   0004EE   EF           MOV       A,R7
   \   0004EF   FD           MOV       R5,A
   \   0004F0   7404         MOV       A,#0x4
   \   0004F2   12....       LCALL     ?XSTACK_DISP101_8
   \   0004F5   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \   0004F8   7402         MOV       A,#0x2
   \   0004FA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004FD   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000500   AA..         MOV       R2,?V14
   \   000502   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
    378                break;
    379          #endif
    380          
    381          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    382              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    383                MT_ZdoMgmtDirectJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_24:
   \   000505   85....       MOV       ?V13,?V0
   \   000508   0E           INC       R6
   \   000509   E9           MOV       A,R1
   \   00050A   FF           MOV       R7,A
   \   00050B   740A         MOV       A,#0xa
   \   00050D   12....       LCALL     ?XSTACK_DISP0_8
   \   000510   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000513   12....       LCALL     ?XSTACK_DISP0_8
   \   000516   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000519   5001         JNC       ??MT_ZdoCommandProcessing_49
   \   00051B   0F           INC       R7
   \                     ??MT_ZdoCommandProcessing_49:
   \   00051C                ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
   \   00051C   75..00       MOV       ?V0,#0x0
   \   00051F   78..         MOV       R0,#?V0
   \   000521   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000524   8E82         MOV       DPL,R6
   \   000526   8F83         MOV       DPH,R7
   \   000528   A3           INC       DPTR
   \   000529   A3           INC       DPTR
   \   00052A   A3           INC       DPTR
   \   00052B   A3           INC       DPTR
   \   00052C   A3           INC       DPTR
   \   00052D   A3           INC       DPTR
   \   00052E   A3           INC       DPTR
   \   00052F   A3           INC       DPTR
   \   000530   E0           MOVX      A,@DPTR
   \   000531   F9           MOV       R1,A
   \   000532   EE           MOV       A,R6
   \   000533   FC           MOV       R4,A
   \   000534   EF           MOV       A,R7
   \   000535   FD           MOV       R5,A
   \   000536   7403         MOV       A,#0x3
   \   000538   12....       LCALL     ?XSTACK_DISP101_8
   \   00053B   12....       LCALL     `??ZDP_MgmtDirectJoinReq::?relay`; Banked call to: ZDP_MgmtDirectJoinReq
   \   00053E   7401         MOV       A,#0x1
   \   000540   12....       LCALL     ?DEALLOC_XSTACK8
   \   000543   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000546   AA..         MOV       R2,?V13
   \   000548   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
    384                break;
    385          #endif
    386          
    387          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    388              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    389                MT_ZdoMgmtPermitJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_25:
   \   00054B   85....       MOV       ?V7,?V0
   \   00054E   0E           INC       R6
   \   00054F   E9           MOV       A,R1
   \   000550   FF           MOV       R7,A
   \   000551   8A82         MOV       DPL,R2
   \   000553   8B83         MOV       DPH,R3
   \   000555   E0           MOVX      A,@DPTR
   \   000556   6404         XRL       A,#0x4
   \   000558   700A         JNZ       ??MT_ZdoCommandProcessing_50
   \   00055A   740A         MOV       A,#0xa
   \   00055C   12....       LCALL     ?XSTACK_DISP0_8
   \   00055F   7402         MOV       A,#0x2
   \   000561   F0           MOVX      @DPTR,A
   \   000562   8015         SJMP      ??MT_ZdoCommandProcessing_51
   \                     ??MT_ZdoCommandProcessing_50:
   \   000564   8882         MOV       DPL,R0
   \   000566   8983         MOV       DPH,R1
   \   000568   E0           MOVX      A,@DPTR
   \   000569   C0E0         PUSH      A
   \   00056B   740A         MOV       A,#0xa
   \   00056D   12....       LCALL     ?XSTACK_DISP0_8
   \   000570   D0E0         POP       A
   \   000572   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000575   AE82         MOV       R6,DPL
   \   000577   AF83         MOV       R7,DPH
   \                     ??MT_ZdoCommandProcessing_51:
   \   000579                ; Setup parameters for call to function osal_build_uint16
   \   000579   EE           MOV       A,R6
   \   00057A   FA           MOV       R2,A
   \   00057B   EF           MOV       A,R7
   \   00057C   FB           MOV       R3,A
   \   00057D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000580   7402         MOV       A,#0x2
   \   000582   12....       LCALL     ?XSTACK_DISP0_8
   \   000585   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000588   F9           MOV       R1,A
   \   000589   8E82         MOV       DPL,R6
   \   00058B   8F83         MOV       DPH,R7
   \   00058D   A3           INC       DPTR
   \   00058E   A3           INC       DPTR
   \   00058F   A3           INC       DPTR
   \   000590   E0           MOVX      A,@DPTR
   \   000591   FC           MOV       R4,A
   \   000592   90....       MOV       DPTR,#ignoreIndication
   \   000595   7401         MOV       A,#0x1
   \   000597   F0           MOVX      @DPTR,A
   \   000598                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000598   7D00         MOV       R5,#0x0
   \   00059A   04           INC       A
   \   00059B   12....       LCALL     ?XSTACK_DISP101_8
   \   00059E   12....       LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   0005A1   E9           MOV       A,R1
   \   0005A2   85..82       MOV       DPL,?XSP + 0
   \   0005A5   85..83       MOV       DPH,?XSP + 1
   \   0005A8   F0           MOVX      @DPTR,A
   \   0005A9   90....       MOV       DPTR,#ignoreIndication
   \   0005AC   E4           CLR       A
   \   0005AD   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0005B0   AA..         MOV       R2,?V7
   \   0005B2   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
    390                break;
    391          #endif
    392          
    393          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    394              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    395                MT_ZdoMgmtNwkUpdateRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_26:
   \   0005B5                ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
   \   0005B5   12....       LCALL     `??MT_ZdoMgmtNwkUpdateRequest::?relay`; Banked call to: MT_ZdoMgmtNwkUpdateRequest
    396                break;
   \   0005B8   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    397          #endif
    398          
    399          #if defined ( ZDO_NETWORKSTART_REQUEST )
    400              case MT_ZDO_STARTUP_FROM_APP:
    401                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_29:
   \   0005BB   85..82       MOV       DPL,?XSP + 0
   \   0005BE   85..83       MOV       DPH,?XSP + 1
   \   0005C1   E4           CLR       A
   \   0005C2   F0           MOVX      @DPTR,A
   \   0005C3   8C82         MOV       DPL,R4
   \   0005C5   8D83         MOV       DPH,R5
   \   0005C7   E0           MOVX      A,@DPTR
   \   0005C8   F5..         MOV       ?V0,A
   \   0005CA   8E82         MOV       DPL,R6
   \   0005CC   8F83         MOV       DPH,R7
   \   0005CE   E0           MOVX      A,@DPTR
   \   0005CF   FE           MOV       R6,A
   \   0005D0   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0005D3   E0           MOVX      A,@DPTR
   \   0005D4   6401         XRL       A,#0x1
   \   0005D6   6010         JZ        ??MT_ZdoCommandProcessing_52
   \   0005D8   E0           MOVX      A,@DPTR
   \   0005D9   6402         XRL       A,#0x2
   \   0005DB   600B         JZ        ??MT_ZdoCommandProcessing_52
   \   0005DD   85..82       MOV       DPL,?XSP + 0
   \   0005E0   85..83       MOV       DPH,?XSP + 1
   \   0005E3   7401         MOV       A,#0x1
   \   0005E5   F0           MOVX      @DPTR,A
   \   0005E6   8005         SJMP      ??MT_ZdoCommandProcessing_53
   \                     ??MT_ZdoCommandProcessing_52:
   \   0005E8                ; Setup parameters for call to function bdb_StartCommissioning
   \   0005E8   7902         MOV       R1,#0x2
   \   0005EA   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \                     ??MT_ZdoCommandProcessing_53:
   \   0005ED   74E0         MOV       A,#-0x20
   \   0005EF   55..         ANL       A,?V0
   \   0005F1   6420         XRL       A,#0x20
   \   0005F3   6003         JZ        $+5
   \   0005F5   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
   \   0005F8                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0005F8   AC..         MOV       R4,?XSP + 0
   \   0005FA   AD..         MOV       R5,?XSP + 1
   \   0005FC   7B01         MOV       R3,#0x1
   \   0005FE   EE           MOV       A,R6
   \                     ??MT_ZdoCommandProcessing_45:
   \   0005FF   FA           MOV       R2,A
   \   000600   02....       LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
    402                break;
    403          #endif
    404          
    405              case MT_ZDO_SEND_DATA:
    406                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_17:
   \   000603                ; Setup parameters for call to function MT_ZdoSendData
   \   000603   12....       LCALL     `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
    407                break;
   \   000606   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    408          
    409              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    410                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   000609                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   000609   12....       LCALL     `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
    411                break;
   \   00060C   02....       LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
    412          
    413              case MT_ZDO_MSG_CB_REGISTER:
    414                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_27:
   \   00060F   E0           MOVX      A,@DPTR
   \   000610   FE           MOV       R6,A
   \   000611   85....       MOV       ?V6,?V0
   \   000614                ; Setup parameters for call to function osal_build_uint16
   \   000614   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000617   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00061A   E9           MOV       A,R1
   \   00061B   85..82       MOV       DPL,?XSP + 0
   \   00061E   85..83       MOV       DPH,?XSP + 1
   \   000621   F0           MOVX      @DPTR,A
   \   000622   74E0         MOV       A,#-0x20
   \   000624   5E           ANL       A,R6
   \   000625   6420         XRL       A,#0x20
   \   000627   706B         JNZ       ??MT_ZdoCommandProcessing_37
   \   000629                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000629   AC..         MOV       R4,?XSP + 0
   \   00062B   AD..         MOV       R5,?XSP + 1
   \   00062D   7B01         MOV       R3,#0x1
   \   00062F   AA..         MOV       R2,?V6
   \   000631   8057         SJMP      ??MT_ZdoCommandProcessing_41
    415                break;
    416          
    417              case MT_ZDO_MSG_CB_REMOVE:
    418                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_28:
   \   000633   E0           MOVX      A,@DPTR
   \   000634   FE           MOV       R6,A
   \   000635   85....       MOV       ?V5,?V0
   \   000638                ; Setup parameters for call to function osal_build_uint16
   \   000638   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   00063B   12....       LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   00063E   E9           MOV       A,R1
   \   00063F   85..82       MOV       DPL,?XSP + 0
   \   000642   85..83       MOV       DPH,?XSP + 1
   \   000645   F0           MOVX      @DPTR,A
   \   000646   74E0         MOV       A,#-0x20
   \   000648   5E           ANL       A,R6
   \   000649   6420         XRL       A,#0x20
   \   00064B   7047         JNZ       ??MT_ZdoCommandProcessing_37
   \   00064D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00064D   AC..         MOV       R4,?XSP + 0
   \   00064F   AD..         MOV       R5,?XSP + 1
   \   000651   7B01         MOV       R3,#0x1
   \   000653   AA..         MOV       R2,?V5
   \   000655   8033         SJMP      ??MT_ZdoCommandProcessing_41
    419                break;
    420          
    421              case MT_ZDO_SET_REJOIN_PARAMS:
    422                MT_ZdoSetRejoinParameters(pBuf);
   \                     ??MT_ZdoCommandProcessing_30:
   \   000657   85....       MOV       ?V4,?V0
   \   00065A   0E           INC       R6
   \   00065B   E9           MOV       A,R1
   \   00065C   FF           MOV       R7,A
   \   00065D                ; Setup parameters for call to function osal_build_uint32
   \   00065D   7904         MOV       R1,#0x4
   \   00065F   0A           INC       R2
   \   000660   0A           INC       R2
   \   000661   0A           INC       R2
   \   000662   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000665                ; Setup parameters for call to function osal_build_uint32
   \   000665   7904         MOV       R1,#0x4
   \   000667   EE           MOV       A,R6
   \   000668   29           ADD       A,R1
   \   000669   FA           MOV       R2,A
   \   00066A   E4           CLR       A
   \   00066B   3F           ADDC      A,R7
   \   00066C   FB           MOV       R3,A
   \   00066D   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000670                ; Setup parameters for call to function ZDApp_SetRejoinScanDuration
   \   000670   12....       LCALL     `??ZDApp_SetRejoinScanDuration::?relay`; Banked call to: ZDApp_SetRejoinScanDuration
   \   000673                ; Setup parameters for call to function ZDApp_SetRejoinBackoffDuration
   \   000673   AA..         MOV       R2,?V0
   \   000675   AB..         MOV       R3,?V1
   \   000677   AC..         MOV       R4,?V2
   \   000679   AD..         MOV       R5,?V3
   \   00067B   12....       LCALL     `??ZDApp_SetRejoinBackoffDuration::?relay`; Banked call to: ZDApp_SetRejoinBackoffDuration
   \   00067E   85..82       MOV       DPL,?XSP + 0
   \   000681   85..83       MOV       DPH,?XSP + 1
   \   000684   E4           CLR       A
   \   000685   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000688   AA..         MOV       R2,?V4
   \                     ??MT_ZdoCommandProcessing_41:
   \   00068A   7965         MOV       R1,#0x65
   \   00068C   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    423                break;
   \   00068F   8003         SJMP      ??MT_ZdoCommandProcessing_37
    424          
    425          #if defined ( MT_ZDO_EXTENSIONS )
    426          #if ( ZG_BUILD_COORDINATOR_TYPE )
    427              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    428                MT_ZdoSecUpdateNwkKey( pBuf );
    429                break;
    430          
    431              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    432                MT_ZdoSecSwitchNwkKey( pBuf );
    433                break;
    434          #endif // ZDO_COORDINATOR
    435              case MT_ZDO_SEC_ADD_LINK_KEY:
    436                MT_ZdoSecAddLinkKey( pBuf );
    437                break;
    438          
    439              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    440                MT_ZdoSecEntryLookupExt( pBuf );
    441                break;
    442          
    443              case MT_ZDO_SEC_DEVICE_REMOVE:
    444                 MT_ZdoSecDeviceRemove( pBuf );
    445                 break;
    446          
    447              case MT_ZDO_EXT_ROUTE_DISC:
    448                 MT_ZdoExtRouteDisc( pBuf );
    449                 break;
    450          
    451              case MT_ZDO_EXT_ROUTE_CHECK:
    452                 MT_ZdoExtRouteCheck( pBuf );
    453                 break;
    454          
    455              case MT_ZDO_EXT_REMOVE_GROUP:
    456                MT_ZdoExtRemoveGroup( pBuf );
    457                break;
    458          
    459              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    460                MT_ZdoExtRemoveAllGroup( pBuf );
    461                break;
    462          
    463              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    464                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
    465                break;
    466          
    467              case MT_ZDO_EXT_FIND_GROUP:
    468                MT_ZdoExtFindGroup( pBuf );
    469                break;
    470          
    471              case MT_ZDO_EXT_ADD_GROUP:
    472                MT_ZdoExtAddGroup( pBuf );
    473                break;
    474          
    475              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    476                MT_ZdoExtCountAllGroups( pBuf );
    477                break;
    478          
    479              case MT_ZDO_EXT_RX_IDLE:
    480                MT_ZdoExtRxIdle( pBuf );
    481                break;
    482          
    483              case MT_ZDO_EXT_NWK_INFO:
    484                MT_ZdoExtNwkInfo( pBuf );
    485                break;
    486          
    487              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    488                MT_ZdoExtSecApsRemoveReq( pBuf );
    489                break;
    490          
    491              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    492                ZDApp_ForceConcentratorChange();
    493                break;
    494          
    495              case MT_ZDO_EXT_SET_PARAMS:
    496                MT_ZdoExtSetParams( pBuf );
    497                break;
    498          #endif  // MT_ZDO_EXTENSIONS
    499          
    500              default:
    501                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_31:
   \   000691   75..02       MOV       ?V12,#0x2
    502                break;
    503            }
    504          
    505            return status;
   \                     ??MT_ZdoCommandProcessing_37:
   \   000694   A9..         MOV       R1,?V12
   \   000696   741D         MOV       A,#0x1d
   \   000698   12....       LCALL     ?DEALLOC_XSTACK8
   \   00069B   7F10         MOV       R7,#0x10
   \   00069D   02....       LJMP      ?BANKED_LEAVE_XDATA
    506          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   0A           INC       R2
   \   000001   0A           INC       R2
   \   000002   0A           INC       R2
   \   000003   E9           MOV       A,R1
   \   000004   FB           MOV       R3,A
   \   000005   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000008                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000008                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000008   90....       MOV       DPTR,#MT_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET
    507          
    508          /***************************************************************************************************
    509           * @fn      MT_ZdoNwkAddrReq
    510           *
    511           * @brief   Handle a nwk address request.
    512           *
    513           * @param   pData  - MT message data
    514           *
    515           * @return  void
    516           ***************************************************************************************************/
    517          static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
    518          {
    519            uint8 cmdId;
    520            uint8 retValue;
    521            uint8 reqType;
    522            uint8 startIndex;
    523            uint8 *pExtAddr;
    524          
    525            /* parse header */
    526            cmdId = pBuf[MT_RPC_POS_CMD1];
    527            pBuf += MT_RPC_FRAME_HDR_SZ;
    528          
    529            /* parse parameters */
    530            pExtAddr = pBuf;
    531            pBuf += Z_EXTADDR_LEN;
    532          
    533            /* Request type */
    534            reqType = *pBuf++;
    535          
    536            /* Start index */
    537            startIndex = *pBuf;
    538          
    539            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
    540          
    541            /* Build and send back the response */
    542            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    543          
    544          #if defined ( MT_ZDO_EXTENSIONS )
    545            {
    546              // Force a response message if the ext address matches a child of this device
    547              associated_devices_t *pAssoc;
    548              uint8 buf[21];
    549              uint8 *pBuf = buf;
    550          
    551              if ( (ZSTACK_ROUTER_BUILD)
    552                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    553                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    554              {
    555                uint16 nwkAddr = NLME_GetShortAddr();
    556          
    557                *pBuf++ = LO_UINT16(nwkAddr);
    558                *pBuf++ = HI_UINT16(nwkAddr);
    559                *pBuf++ = 0;
    560                *pBuf++ = LO_UINT16(NWK_addr_rsp);
    561                *pBuf++ = HI_UINT16(NWK_addr_rsp);
    562                *pBuf++ = 0;
    563                *pBuf++ = 0;
    564                *pBuf++ = LO_UINT16(nwkAddr);
    565                *pBuf++ = HI_UINT16(nwkAddr);
    566          
    567                *pBuf++ = ZSuccess;
    568          
    569                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
    570          
    571                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
    572                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
    573                *pBuf = 0;
    574          
    575                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
    576                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
    577              }
    578            }
    579          #endif
    580          }
    581          
    582          /***************************************************************************************************
    583           * @fn      MT_ZdoIEEEAddrRequest
    584           *
    585           * @brief   Handle a IEEE address request.
    586           *
    587           * @param   pData  - MT message data
    588           *
    589           * @return  void
    590           ***************************************************************************************************/
    591          static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
    592          {
    593            uint8 cmdId;
    594            uint8 retValue;
    595            uint16 shortAddr;
    596            uint8 reqType;
    597            uint8 startIndex;
    598          
    599            /* parse header */
    600            cmdId = pBuf[MT_RPC_POS_CMD1];
    601            pBuf += MT_RPC_FRAME_HDR_SZ;
    602          
    603            /* Dev address */
    604            shortAddr = osal_build_uint16( pBuf );
    605            pBuf += 2;
    606          
    607            /* request type */
    608            reqType = *pBuf++;
    609          
    610            /* start index */
    611            startIndex = *pBuf;
    612          
    613            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
    614          
    615            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    616          }
    617          
    618          /***************************************************************************************************
    619           * @fn      MT_ZdoNodeDescRequest
    620           *
    621           * @brief   Handle a Node Descriptor request.
    622           *
    623           * @param   pData  - MT message data
    624           *
    625           * @return  void
    626           ***************************************************************************************************/
    627          static void MT_ZdoNodeDescRequest (uint8 *pBuf)
    628          {
    629            uint8 cmdId;
    630            uint8 retValue;
    631            zAddrType_t destAddr;
    632            uint16 shortAddr;
    633          
    634            /* parse header */
    635            cmdId = pBuf[MT_RPC_POS_CMD1];
    636            pBuf += MT_RPC_FRAME_HDR_SZ;
    637          
    638            /* Destination address */
    639            destAddr.addrMode = Addr16Bit;
    640            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    641            pBuf += 2;
    642          
    643            /* Network address of interest */
    644            shortAddr = osal_build_uint16( pBuf );
    645          
    646            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
    647          
    648            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    649          }
    650          
    651          /***************************************************************************************************
    652           * @fn      MT_ZdoPowerDescRequest
    653           *
    654           * @brief   Handle a Power Descriptor request.
    655           *
    656           * @param   pData  - MT message data
    657           *
    658           * @return  void
    659           ***************************************************************************************************/
    660          static void MT_ZdoPowerDescRequest(uint8 *pBuf)
    661          {
    662            uint8 cmdId;
    663            uint8 retValue;
    664            zAddrType_t destAddr;
    665            uint16 shortAddr;
    666          
    667            /* parse header */
    668            cmdId = pBuf[MT_RPC_POS_CMD1];
    669            pBuf += MT_RPC_FRAME_HDR_SZ;
    670          
    671            /* Dev address */
    672            destAddr.addrMode = Addr16Bit;
    673            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    674            pBuf += 2;
    675          
    676            /* Network address of interest */
    677            shortAddr = osal_build_uint16( pBuf );
    678          
    679            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
    680          
    681            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    682          }
    683          
    684          /***************************************************************************************************
    685           * @fn      MT_ZdoSimpleDescRequest
    686           *
    687           * @brief   Handle a Simple Descriptor request.
    688           *
    689           * @param   pBuf  - MT message data
    690           *
    691           * @return  void
    692           ***************************************************************************************************/
    693          static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
    694          {
    695            uint8 cmdId;
    696            uint8 retValue;
    697            uint8 epInt;
    698            zAddrType_t destAddr;
    699            uint16 shortAddr;
    700          
    701            /* parse header */
    702            cmdId = pBuf[MT_RPC_POS_CMD1];
    703            pBuf += MT_RPC_FRAME_HDR_SZ;
    704          
    705            /* Dev address */
    706            destAddr.addrMode = Addr16Bit;
    707            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    708            pBuf += 2;
    709          
    710            /* Network address of interest */
    711            shortAddr = osal_build_uint16( pBuf );
    712            pBuf += 2;
    713          
    714            /* endpoint/interface */
    715            epInt = *pBuf;
    716          
    717            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
    718          
    719            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    720          }
    721          
    722          /***************************************************************************************************
    723           * @fn      MT_ZdoActiveEpRequest
    724           *
    725           * @brief   Handle a Active EP request.
    726           *
    727           * @param   pBuf  - MT message data
    728           *
    729           * @return  void
    730           ***************************************************************************************************/
    731          static void MT_ZdoActiveEpRequest(uint8 *pBuf)
    732          {
    733            uint8 cmdId;
    734            uint8 retValue;
    735            zAddrType_t destAddr;
    736            uint16 shortAddr;
    737          
    738            /* parse header */
    739            cmdId = pBuf[MT_RPC_POS_CMD1];
    740            pBuf += MT_RPC_FRAME_HDR_SZ;
    741          
    742            /* Dev address */
    743            destAddr.addrMode = Addr16Bit;
    744            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    745            pBuf += 2;
    746          
    747            /* Network address of interest */
    748            shortAddr = osal_build_uint16( pBuf );
    749          
    750            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
    751          
    752            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    753          }
    754          
    755          /***************************************************************************************************
    756           * @fn      MT_ZdoMatchDescRequest
    757           *
    758           * @brief   Handle a Match Descriptor request.
    759           *
    760           * @param   pBuf  - MT message data
    761           *
    762           * @return  void
    763           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    764          static void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    765          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV       A,#-0x4a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine13 & 0xFFFF
    766            uint8 cmdId;
    767            uint8 retValue = 0;
    768            uint8 i, numInClusters, numOutClusters;
    769            uint16 profileId;
    770            zAddrType_t destAddr;
    771            uint16 shortAddr;
    772            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    773          
    774            /* parse header */
    775            cmdId = pBuf[MT_RPC_POS_CMD1];
    776            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_138:
   \   00000D   5001         JNC       ??MT_ZdoMatchDescRequest_0
   \   00000F   0F           INC       R7
    777          
    778            /* Dev address */
    779            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine28 & 0xFFFF
    780            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_66:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    781            pBuf += 2;
   \                     ??CrossCallReturnLabel_149:
   \   00001E   5001         JNC       ??MT_ZdoMatchDescRequest_1
   \   000020   0F           INC       R7
    782          
    783            /* Network address of interest */
    784            shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000021                ; Setup parameters for call to function osal_build_uint16
   \   000021   12....       LCALL     ?Subroutine60 & 0xFFFF
    785            pBuf += 2;
   \                     ??CrossCallReturnLabel_135:
   \   000024   EE           MOV       A,R6
   \   000025   2402         ADD       A,#0x2
   \   000027   FE           MOV       R6,A
   \   000028   5001         JNC       ??MT_ZdoMatchDescRequest_2
   \   00002A   0F           INC       R7
    786          
    787            /* Profile ID */
    788            profileId = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00002B                ; Setup parameters for call to function osal_build_uint16
   \   00002B   12....       LCALL     ?Subroutine58 & 0xFFFF
    789            pBuf += 2;
    790          
    791            /* NumInClusters */
    792            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_125:
   \   00002E   F5..         MOV       ?V6,A
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??MT_ZdoMatchDescRequest_3
   \   000036   0F           INC       R7
    793            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000037   E5..         MOV       A,?V6
   \   000039   C3           CLR       C
   \   00003A   9411         SUBB      A,#0x11
   \   00003C   501C         JNC       ??MT_ZdoMatchDescRequest_4
    794            {
    795              /* IN clusters */
    796              for ( i = 0; i < numInClusters; i++ )
   \   00003E   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   000041   E5..         MOV       A,?V3
   \   000043   C3           CLR       C
   \   000044   95..         SUBB      A,?V6
   \   000046   501B         JNC       ??MT_ZdoMatchDescRequest_6
    797              {
    798                inClusters[i] = osal_build_uint16( pBuf );
   \   000048                ; Setup parameters for call to function osal_build_uint16
   \   000048   12....       LCALL     ?Subroutine40 & 0xFFFF
    799                pBuf += 2;
    800              }
   \                     ??CrossCallReturnLabel_92:
   \   00004B   742A         MOV       A,#0x2a
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000053   5001         JNC       ??MT_ZdoMatchDescRequest_7
   \   000055   0F           INC       R7
   \                     ??MT_ZdoMatchDescRequest_7:
   \   000056   05..         INC       ?V3
   \   000058   80E7         SJMP      ??MT_ZdoMatchDescRequest_5
    801            }
    802            else
    803            {
    804              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   00005A   85..82       MOV       DPL,?XSP + 0
   \   00005D   85..83       MOV       DPH,?XSP + 1
   \   000060   7480         MOV       A,#-0x80
   \   000062   F0           MOVX      @DPTR,A
    805            }
    806          
    807            /* NumOutClusters */
    808            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F5..         MOV       ?V7,A
   \   00006A   A3           INC       DPTR
   \   00006B   AE82         MOV       R6,DPL
   \   00006D   AF83         MOV       R7,DPH
    809            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   00006F   C3           CLR       C
   \   000070   9411         SUBB      A,#0x11
   \   000072   501C         JNC       ??MT_ZdoMatchDescRequest_8
    810            {
    811              /* OUT Clusters */
    812              for ( i = 0; i < numOutClusters; i++ )
   \   000074   75..00       MOV       ?V3,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   000077   E5..         MOV       A,?V3
   \   000079   C3           CLR       C
   \   00007A   95..         SUBB      A,?V7
   \   00007C   501C         JNC       ??MT_ZdoMatchDescRequest_10
    813              {
    814                outClusters[i] = osal_build_uint16( pBuf );
   \   00007E                ; Setup parameters for call to function osal_build_uint16
   \   00007E   12....       LCALL     ?Subroutine40 & 0xFFFF
    815                pBuf += 2;
    816              }
   \                     ??CrossCallReturnLabel_93:
   \   000081   740A         MOV       A,#0xa
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000089   5001         JNC       ??MT_ZdoMatchDescRequest_11
   \   00008B   0F           INC       R7
   \                     ??MT_ZdoMatchDescRequest_11:
   \   00008C   05..         INC       ?V3
   \   00008E   80E7         SJMP      ??MT_ZdoMatchDescRequest_9
    817            }
    818            else
    819            {
    820              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   7480         MOV       A,#-0x80
   \   000098   8055         SJMP      ??MT_ZdoMatchDescRequest_12
    821            }
    822          
    823            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   704D         JNZ       ??MT_ZdoMatchDescRequest_13
    824            {
    825              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    826                                                 inClusters, numOutClusters, outClusters, 0);
   \   0000A3                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000A3   75..00       MOV       ?V3,#0x0
   \   0000A6   78..         MOV       R0,#?V3
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   740B         MOV       A,#0xb
   \   0000AD   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B0   88..         MOV       ?V8,R0
   \   0000B2   89..         MOV       ?V9,R1
   \   0000B4   78..         MOV       R0,#?V8
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   E5..         MOV       A,?V7
   \   0000BB   F5..         MOV       ?V3,A
   \   0000BD   78..         MOV       R0,#?V3
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   742E         MOV       A,#0x2e
   \   0000C4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C7   88..         MOV       ?V8,R0
   \   0000C9   89..         MOV       ?V9,R1
   \   0000CB   78..         MOV       R0,#?V8
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D0   78..         MOV       R0,#?V4
   \   0000D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D5   A9..         MOV       R1,?V6
   \   0000D7   AC..         MOV       R4,?V0
   \   0000D9   AD..         MOV       R5,?V1
   \   0000DB   7409         MOV       A,#0x9
   \   0000DD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E0   12....       LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0000E3   7408         MOV       A,#0x8
   \   0000E5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E8   E9           MOV       A,R1
   \   0000E9   85..82       MOV       DPL,?XSP + 0
   \   0000EC   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   0000EF   F0           MOVX      @DPTR,A
    827            }
    828          
    829            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   0000F0                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F0   AC..         MOV       R4,?XSP + 0
   \   0000F2   AD..         MOV       R5,?XSP + 1
   \   0000F4   7B01         MOV       R3,#0x1
   \   0000F6   AA..         MOV       R2,?V2
   \   0000F8   7965         MOV       R1,#0x65
   \   0000FA   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    830          }
   \   0000FD   744A         MOV       A,#0x4a
   \   0000FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000102   7F0A         MOV       R7,#0xa
   \   000104   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   FA           MOV       R2,A
   \   000001   EF           MOV       A,R7
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000004   8A..         MOV       ?V0,R2
   \   000006   8B..         MOV       ?V1,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000007   A8..         MOV       R0,?V3
   \   000009   E8           MOV       A,R0
   \   00000A   28           ADD       A,R0
   \   00000B   F8           MOV       R0,A
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EB           MOV       A,R3
   \   000001   FF           MOV       R7,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   E4           CLR       A
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E                REQUIRE ??Subroutine64_0
   \   00000E                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F5..         MOV       ?V2,A
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A                REQUIRE ??Subroutine65_0
   \   00000A                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   FE           MOV       R6,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005                ; Setup parameters for call to function osal_build_uint16
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   EF           MOV       A,R7
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   FA           MOV       R2,A
   \   000001   EF           MOV       A,R7
   \   000002   FB           MOV       R3,A
   \   000003   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000006   8A..         MOV       ?V4,R2
   \   000008   8B..         MOV       ?V5,R3
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   22           RET
    831          
    832          /***************************************************************************************************
    833           * @fn      MT_ZdoComplexDescRequest
    834           *
    835           * @brief   Handle a Complex Descriptor request.
    836           *
    837           * @param   pBuf  - MT message data
    838           *
    839           * @return  void
    840           ***************************************************************************************************/
    841          static void MT_ZdoComplexDescRequest(uint8 *pBuf)
    842          {
    843            uint8 cmdId;
    844            uint8 retValue;
    845            zAddrType_t destAddr;
    846            uint16 shortAddr;
    847          
    848            /* parse header */
    849            cmdId = pBuf[MT_RPC_POS_CMD1];
    850            pBuf += MT_RPC_FRAME_HDR_SZ;
    851          
    852            /* Dev address */
    853            destAddr.addrMode = Addr16Bit;
    854            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    855            pBuf += 2;
    856          
    857            /* Network address of interest */
    858            shortAddr = osal_build_uint16( pBuf );
    859          
    860            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
    861          
    862            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    863          }
    864          
    865          /***************************************************************************************************
    866           * @fn      MT_ZdoUserDescRequest
    867           *
    868           * @brief   Handle a User Descriptor request.
    869           *
    870           * @param   pBuf  - MT message data
    871           *
    872           * @return  void
    873           ***************************************************************************************************/
    874          static void MT_ZdoUserDescRequest(uint8 *pBuf)
    875          {
    876            uint8 cmdId;
    877            uint8 retValue;
    878            zAddrType_t destAddr;
    879            uint16 shortAddr;
    880          
    881            /* parse header */
    882            cmdId = pBuf[MT_RPC_POS_CMD1];
    883            pBuf += MT_RPC_FRAME_HDR_SZ;
    884          
    885            /* Dev address */
    886            destAddr.addrMode = Addr16Bit;
    887            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    888            pBuf += 2;
    889          
    890            /* Network address of interest */
    891            shortAddr = osal_build_uint16( pBuf );
    892          
    893            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
    894          
    895            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    896          }
    897          
    898          /***************************************************************************************************
    899           * @fn      MT_ZdoEndDevAnnce
    900           *
    901           * @brief   Handle a End Device Announce Descriptor request.
    902           *
    903           * @param   pBuf  - MT message data
    904           *
    905           * @return  void
    906           ***************************************************************************************************/
    907          static void MT_ZdoEndDevAnnce(uint8 *pBuf)
    908          {
    909            uint8 cmdId;
    910            uint8 retValue;
    911            uint16 shortAddr;
    912            uint8 *pIEEEAddr;
    913          
    914            /* parse header */
    915            cmdId = pBuf[MT_RPC_POS_CMD1];
    916            pBuf += MT_RPC_FRAME_HDR_SZ;
    917          
    918            /* network address */
    919            shortAddr = osal_build_uint16( pBuf );
    920            pBuf += 2;
    921          
    922            /* extended address */
    923            pIEEEAddr = pBuf;
    924            pBuf += Z_EXTADDR_LEN;
    925          
    926            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
    927          
    928            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    929          }
    930          
    931          /***************************************************************************************************
    932           * @fn      MT_ZdoUserDescSet
    933           *
    934           * @brief   Handle a User Descriptor Set.
    935           *
    936           * @param   pBuf  - MT message data
    937           *
    938           * @return  void
    939           ***************************************************************************************************/
    940          static void MT_ZdoUserDescSet(uint8 *pBuf)
    941          {
    942            uint8 cmdId;
    943            uint8 retValue;
    944            zAddrType_t destAddr;
    945            uint16 shortAddr;
    946            UserDescriptorFormat_t userDesc;
    947          
    948            /* parse header */
    949            cmdId = pBuf[MT_RPC_POS_CMD1];
    950            pBuf += MT_RPC_FRAME_HDR_SZ;
    951          
    952            /* Dev address */
    953            destAddr.addrMode = Addr16Bit;
    954            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
    955            pBuf += 2;
    956          
    957            /* Network address of interest */
    958            shortAddr = osal_build_uint16( pBuf );
    959            pBuf += 2;
    960          
    961            /* User descriptor */
    962            userDesc.len = *pBuf++;
    963            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
    964          
    965            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
    966          
    967            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    968          }
    969          
    970          /***************************************************************************************************
    971           * @fn      MT_ZdoServiceDiscRequest
    972           *
    973           * @brief   Handle a Server Discovery request.
    974           *
    975           * @param   pBuf  - MT message data
    976           *
    977           * @return  void
    978           ***************************************************************************************************/
    979          static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
    980          {
    981            uint8 cmdId;
    982            uint8 retValue;
    983            uint16 serviceMask;
    984          
    985            /* parse header */
    986            cmdId = pBuf[MT_RPC_POS_CMD1];
    987            pBuf += MT_RPC_FRAME_HDR_SZ;
    988          
    989            /* Service Mask */
    990            serviceMask = osal_build_uint16( pBuf );
    991          
    992            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
    993          
    994            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    995          }
    996          
    997          /***************************************************************************************************
    998           * @fn      MT_ZdoEndDevBindRequest
    999           *
   1000           * @brief   Handle a End Device Bind request.
   1001           *
   1002           * @param   pBuf  - MT message data
   1003           *
   1004           * @return  void
   1005           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1006          static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
   1007          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV       A,#-0x46
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine13 & 0xFFFF
   1008            uint8 cmdId;
   1009            uint8 retValue = 0;
   1010            uint8 i, epInt, numInClusters, numOutClusters;
   1011            zAddrType_t destAddr;
   1012            uint16 shortAddr;
   1013            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1014          
   1015            /* parse header */
   1016            cmdId = pBuf[MT_RPC_POS_CMD1];
   1017            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_139:
   \   00000D   5001         JNC       ??MT_ZdoEndDevBindRequest_0
   \   00000F   0F           INC       R7
   1018          
   1019            /* Dev address */
   1020            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000010   7409         MOV       A,#0x9
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine28 & 0xFFFF
   1021            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_67:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1022            pBuf += 2;
   \                     ??CrossCallReturnLabel_150:
   \   00001E   5001         JNC       ??MT_ZdoEndDevBindRequest_1
   \   000020   0F           INC       R7
   1023          
   1024            /* Local coordinator of the binding */
   1025            shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000021                ; Setup parameters for call to function osal_build_uint16
   \   000021   12....       LCALL     ?Subroutine38 & 0xFFFF
   1026            pBuf += 2;
   1027          
   1028            /* For now, skip past the extended address */
   1029            pBuf += Z_EXTADDR_LEN;
   1030          
   1031            /* Endpoint */
   1032            epInt = *pBuf++;
   \                     ??CrossCallReturnLabel_90:
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V3,A
   \   00002F   EE           MOV       A,R6
   \   000030   240B         ADD       A,#0xb
   \   000032   FE           MOV       R6,A
   \   000033   5001         JNC       ??MT_ZdoEndDevBindRequest_2
   \   000035   0F           INC       R7
   1033          
   1034            /* Profile ID */
   1035            profileID = osal_build_uint16( pBuf );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   000036                ; Setup parameters for call to function osal_build_uint16
   \   000036   FA           MOV       R2,A
   \   000037   EF           MOV       A,R7
   \   000038   FB           MOV       R3,A
   \   000039   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00003C   8A..         MOV       ?V6,R2
   \   00003E   8B..         MOV       ?V7,R3
   1036            pBuf += 2;
   1037          
   1038            /* NumInClusters */
   1039            numInClusters = *pBuf++;
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F5..         MOV       ?V4,A
   \   000049   EE           MOV       A,R6
   \   00004A   2403         ADD       A,#0x3
   \   00004C   FE           MOV       R6,A
   \   00004D   5001         JNC       ??MT_ZdoEndDevBindRequest_3
   \   00004F   0F           INC       R7
   1040            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000050   E5..         MOV       A,?V4
   \   000052   C3           CLR       C
   \   000053   9410         SUBB      A,#0x10
   \   000055   501C         JNC       ??MT_ZdoEndDevBindRequest_4
   1041            {
   1042              for ( i = 0; i < numInClusters; i++ )
   \   000057   75..00       MOV       ?V5,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00005A   E5..         MOV       A,?V5
   \   00005C   C3           CLR       C
   \   00005D   95..         SUBB      A,?V4
   \   00005F   501B         JNC       ??MT_ZdoEndDevBindRequest_6
   1043              {
   1044                inClusters[i] = osal_build_uint16( pBuf );
   \   000061                ; Setup parameters for call to function osal_build_uint16
   \   000061   12....       LCALL     ?Subroutine41 & 0xFFFF
   1045                pBuf += 2;
   1046              }
   \                     ??CrossCallReturnLabel_94:
   \   000064   7428         MOV       A,#0x28
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00006C   5001         JNC       ??MT_ZdoEndDevBindRequest_7
   \   00006E   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   00006F   05..         INC       ?V5
   \   000071   80E7         SJMP      ??MT_ZdoEndDevBindRequest_5
   1047            }
   1048            else
   1049            {
   1050              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000073   85..82       MOV       DPL,?XSP + 0
   \   000076   85..83       MOV       DPH,?XSP + 1
   \   000079   7480         MOV       A,#-0x80
   \   00007B   F0           MOVX      @DPTR,A
   1051            }
   1052          
   1053            /* NumOutClusters */
   1054            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V8,A
   \   000083   A3           INC       DPTR
   \   000084   AE82         MOV       R6,DPL
   \   000086   AF83         MOV       R7,DPH
   1055            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   000088   C3           CLR       C
   \   000089   9410         SUBB      A,#0x10
   \   00008B   501C         JNC       ??MT_ZdoEndDevBindRequest_8
   1056            {
   1057              for ( i = 0; i < numOutClusters; i++ )
   \   00008D   75..00       MOV       ?V5,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   000090   E5..         MOV       A,?V5
   \   000092   C3           CLR       C
   \   000093   95..         SUBB      A,?V8
   \   000095   501C         JNC       ??MT_ZdoEndDevBindRequest_10
   1058              {
   1059                outClusters[i] = osal_build_uint16( pBuf );
   \   000097                ; Setup parameters for call to function osal_build_uint16
   \   000097   12....       LCALL     ?Subroutine41 & 0xFFFF
   1060                pBuf += 2;
   1061              }
   \                     ??CrossCallReturnLabel_95:
   \   00009A   740A         MOV       A,#0xa
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000A2   5001         JNC       ??MT_ZdoEndDevBindRequest_11
   \   0000A4   0F           INC       R7
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   0000A5   05..         INC       ?V5
   \   0000A7   80E7         SJMP      ??MT_ZdoEndDevBindRequest_9
   1062            }
   1063            else
   1064            {
   1065              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   0000A9   85..82       MOV       DPL,?XSP + 0
   \   0000AC   85..83       MOV       DPH,?XSP + 1
   \   0000AF   7480         MOV       A,#-0x80
   \   0000B1   805A         SJMP      ??MT_ZdoEndDevBindRequest_12
   1066            }
   1067          
   1068            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000B3   85..82       MOV       DPL,?XSP + 0
   \   0000B6   85..83       MOV       DPH,?XSP + 1
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   7052         JNZ       ??MT_ZdoEndDevBindRequest_13
   1069            {
   1070              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1071                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000BC                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000BC   75..00       MOV       ?V5,#0x0
   \   0000BF   78..         MOV       R0,#?V5
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   740B         MOV       A,#0xb
   \   0000C6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C9   88..         MOV       ?V10,R0
   \   0000CB   89..         MOV       ?V11,R1
   \   0000CD   78..         MOV       R0,#?V10
   \   0000CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D2   E5..         MOV       A,?V8
   \   0000D4   F5..         MOV       ?V5,A
   \   0000D6   78..         MOV       R0,#?V5
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   742C         MOV       A,#0x2c
   \   0000DD   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E0   88..         MOV       ?V8,R0
   \   0000E2   89..         MOV       ?V9,R1
   \   0000E4   78..         MOV       R0,#?V8
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   78..         MOV       R0,#?V4
   \   0000EB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EE   78..         MOV       R0,#?V6
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F3   A9..         MOV       R1,?V3
   \   0000F5   AC..         MOV       R4,?V0
   \   0000F7   AD..         MOV       R5,?V1
   \   0000F9   740A         MOV       A,#0xa
   \   0000FB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FE   12....       LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   000101   7409         MOV       A,#0x9
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   E9           MOV       A,R1
   \   000107   85..82       MOV       DPL,?XSP + 0
   \   00010A   85..83       MOV       DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   00010D   F0           MOVX      @DPTR,A
   1072            }
   1073          
   1074            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   00010E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00010E   AC..         MOV       R4,?XSP + 0
   \   000110   AD..         MOV       R5,?XSP + 1
   \   000112   7B01         MOV       R3,#0x1
   \   000114   AA..         MOV       R2,?V2
   \   000116   7965         MOV       R1,#0x65
   \   000118   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1075          }
   \   00011B   7446         MOV       A,#0x46
   \   00011D                REQUIRE ?Subroutine0
   \   00011D                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F0C         MOV       R7,#0xc
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV       A,R6
   \   000001   FA           MOV       R2,A
   \   000002   EF           MOV       A,R7
   \   000003   FB           MOV       R3,A
   \   000004   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000007   A8..         MOV       R0,?V5
   \   000009   E8           MOV       A,R0
   \   00000A   28           ADD       A,R0
   \   00000B   F8           MOV       R0,A
   \   00000C   E4           CLR       A
   \   00000D   33           RLC       A
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
   1076          
   1077          /***************************************************************************************************
   1078           * @fn      MT_ZdoBindRequest
   1079           *
   1080           * @brief   Handle a Bind request.
   1081           *
   1082           * @param   pBuf  - MT message data
   1083           *
   1084           * @return  void
   1085           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          static void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   1088            uint8 cmdId;
   1089            uint8 retValue;
   1090            zAddrType_t destAddr, devAddr;
   1091            uint8 *pSrcAddr, *ptr;
   1092            uint8 srcEPInt, dstEPInt;
   1093            uint16 clusterID;
   1094          
   1095            /* parse header */
   1096            cmdId = pBuf[MT_RPC_POS_CMD1];
   1097            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_20:
   \   00000D   5001         JNC       ??MT_ZdoBindRequest_0
   \   00000F   0F           INC       R7
   1098          
   1099            /* Dev address */
   1100            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000010   7412         MOV       A,#0x12
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine32 & 0xFFFF
   1101            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_77:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine5 & 0xFFFF
   1102            pBuf += 2;
   1103          
   1104            /* SrcAddress */
   1105            pSrcAddr = pBuf;
   1106            pBuf += Z_EXTADDR_LEN;
   1107          
   1108            /* SrcEPInt */
   1109            srcEPInt = *pBuf++;
   1110          
   1111            /* ClusterID */
   1112            clusterID = osal_build_uint16( pBuf );
   1113            pBuf += 2;
   1114          
   1115            /* Destination Address mode */
   1116            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_5:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??MT_ZdoBindRequest_1
   \   000029   0F           INC       R7
   1117          
   1118            /* Destination Address */
   1119            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002A   7403         MOV       A,#0x3
   \   00002C   68           XRL       A,R0
   \   00002D   700E         JNZ       ??MT_ZdoBindRequest_2
   1120            {
   1121              ptr = pBuf;
   1122              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   00002F                ; Setup parameters for call to function sAddrExtCpy
   \   00002F   EE           MOV       A,R6
   \   000030   FC           MOV       R4,A
   \   000031   EF           MOV       A,R7
   \   000032   FD           MOV       R5,A
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003B   8011         SJMP      ??MT_ZdoBindRequest_3
   1123            }
   1124            else
   1125            {
   1126              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoBindRequest_2:
   \   00003D                ; Setup parameters for call to function osal_build_uint16
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000044   7401         MOV       A,#0x1
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   EA           MOV       A,R2
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   EB           MOV       A,R3
   \   00004D   F0           MOVX      @DPTR,A
   1127            }
   1128            /* The short address occupies LSB two bytes */
   1129            pBuf += Z_EXTADDR_LEN;
   1130          
   1131            /* DstEPInt */
   1132            dstEPInt = *pBuf;
   1133          
   1134            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoBindRequest_3:
   \   00004E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004E   75..00       MOV       ?V6,#0x0
   \   000051   78..         MOV       R0,#?V6
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V6,A
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V6,R0
   \   000071   89..         MOV       ?V7,R1
   \   000073   78..         MOV       R0,#?V6
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   78..         MOV       R0,#?V2
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   A9..         MOV       R1,?V1
   \   000084   7412         MOV       A,#0x12
   \   000086   12....       LCALL     ?XSTACK_DISP102_8
   \   000089   7A21         MOV       R2,#0x21
   \   00008B                REQUIRE ?Subroutine1
   \   00008B                ; // Fall through to label ?Subroutine1
   1135          
   1136            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1137          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV       A,#0x8
   \   000007   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00000D   AA..         MOV       R2,?V0
   \   00000F   7965         MOV       R1,#0x65
   \   000011   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000014   7413         MOV       A,#0x13
   \   000016   12....       LCALL     ?DEALLOC_XSTACK8
   \   000019   7F08         MOV       R7,#0x8
   \   00001B   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E9           MOV       A,R1
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine66_0
   \   000007                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV       R4,?XSP + 0
   \   000003   AD..         MOV       R5,?XSP + 1
   \   000005   7B01         MOV       R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   740A         MOV       A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EB           MOV       A,R3
   \   000001   FF           MOV       R7,A
   \   000002   8A82         MOV       DPL,R2
   \   000004   F583         MOV       DPH,A
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V0,A
   \   00000B   EA           MOV       A,R2
   \   00000C   2403         ADD       A,#0x3
   \   00000E   FE           MOV       R6,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   F5..         MOV       ?V2,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F5..         MOV       ?V3,A
   \   000009   E5..         MOV       A,?V2
   \   00000B   2408         ADD       A,#0x8
   \   00000D   FE           MOV       R6,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V3
   \   000011   8E82         MOV       DPL,R6
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   A3           INC       DPTR
   \   000019   AE82         MOV       R6,DPL
   \   00001B   AF83         MOV       R7,DPH
   \   00001D                ; Setup parameters for call to function osal_build_uint16
   \   00001D                ; Setup parameters for call to function osal_build_uint16
   \   00001D   EE           MOV       A,R6
   \   00001E   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000021   F8           MOV       R0,A
   \   000022   7409         MOV       A,#0x9
   \   000024   22           RET
   1138          
   1139          /***************************************************************************************************
   1140           * @fn      MT_ZdoUnbindRequest
   1141           *
   1142           * @brief   Handle a Unbind request.
   1143           *
   1144           * @param   pBuf  - MT message data
   1145           *
   1146           * @return  void
   1147           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1148          static void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   1150            uint8 cmdId;
   1151            uint8 retValue;
   1152            zAddrType_t destAddr, devAddr;
   1153            uint8 *pSrcAddr, *ptr;
   1154            uint8 srcEPInt, dstEPInt;
   1155            uint16 clusterID;
   1156          
   1157            /* parse header */
   1158            cmdId = pBuf[MT_RPC_POS_CMD1];
   1159            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_21:
   \   00000D   5001         JNC       ??MT_ZdoUnbindRequest_0
   \   00000F   0F           INC       R7
   1160          
   1161            /* dev address */
   1162            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000010   7412         MOV       A,#0x12
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine32 & 0xFFFF
   1163            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_78:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine5 & 0xFFFF
   1164            pBuf += 2;
   1165          
   1166            /* SrcAddress */
   1167            pSrcAddr = pBuf;
   1168            pBuf += Z_EXTADDR_LEN;
   1169          
   1170            /* SrcEPInt */
   1171            srcEPInt = *pBuf++;
   1172          
   1173            /* ClusterID */
   1174            clusterID = osal_build_uint16( pBuf );
   1175            pBuf += 2;
   1176          
   1177            /* Destination Address mode */
   1178            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_6:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E8           MOV       A,R0
   \   000022   F0           MOVX      @DPTR,A
   \   000023   EE           MOV       A,R6
   \   000024   2403         ADD       A,#0x3
   \   000026   FE           MOV       R6,A
   \   000027   5001         JNC       ??MT_ZdoUnbindRequest_1
   \   000029   0F           INC       R7
   1179          
   1180            /* Destination Address */
   1181            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002A   7403         MOV       A,#0x3
   \   00002C   68           XRL       A,R0
   \   00002D   700E         JNZ       ??MT_ZdoUnbindRequest_2
   1182            {
   1183              ptr = pBuf;
   1184              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   00002F                ; Setup parameters for call to function sAddrExtCpy
   \   00002F   EE           MOV       A,R6
   \   000030   FC           MOV       R4,A
   \   000031   EF           MOV       A,R7
   \   000032   FD           MOV       R5,A
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP101_8
   \   000038   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003B   8011         SJMP      ??MT_ZdoUnbindRequest_3
   1185            }
   1186            else
   1187            {
   1188              devAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoUnbindRequest_2:
   \   00003D                ; Setup parameters for call to function osal_build_uint16
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000044   7401         MOV       A,#0x1
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   EA           MOV       A,R2
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   EB           MOV       A,R3
   \   00004D   F0           MOVX      @DPTR,A
   1189            }
   1190            /* The short address occupies LSB two bytes */
   1191            pBuf += Z_EXTADDR_LEN;
   1192          
   1193            /* dstEPInt */
   1194            dstEPInt = *pBuf;
   1195          
   1196            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??MT_ZdoUnbindRequest_3:
   \   00004E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004E   75..00       MOV       ?V6,#0x0
   \   000051   78..         MOV       R0,#?V6
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V6,A
   \   000065   78..         MOV       R0,#?V6
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP100_8
   \   00006F   88..         MOV       ?V6,R0
   \   000071   89..         MOV       ?V7,R1
   \   000073   78..         MOV       R0,#?V6
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   78..         MOV       R0,#?V2
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   A9..         MOV       R1,?V1
   \   000084   7412         MOV       A,#0x12
   \   000086   12....       LCALL     ?XSTACK_DISP102_8
   \   000089   7A22         MOV       R2,#0x22
   \   00008B   02....       LJMP      ?Subroutine1 & 0xFFFF
   1197          
   1198            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1199          }
   1200          
   1201          #if defined (MT_SYS_KEY_MANAGEMENT)
   1202          /***************************************************************************************************
   1203           * @fn      MT_ZdoSetLinkKey
   1204           *
   1205           * @brief   Set an application or trust center link key.
   1206           *
   1207           * @param   pBuf  - MT message data
   1208           *
   1209           * @return  void
   1210           ***************************************************************************************************/
   1211          static void MT_ZdoSetLinkKey(uint8 *pBuf)
   1212          {
   1213            uint8 cmdId;
   1214            uint8 retValue;
   1215            uint8 *pExtAddr;
   1216            uint8 *pKey;
   1217            uint16 shortAddr;
   1218          
   1219            /* parse header */
   1220            cmdId = pBuf[MT_RPC_POS_CMD1];
   1221            pBuf += MT_RPC_FRAME_HDR_SZ;
   1222          
   1223            /* ShortAddr */
   1224            shortAddr = osal_build_uint16( pBuf );
   1225            pBuf += 2;
   1226          
   1227            /* Extended Addr */
   1228            pExtAddr = pBuf;
   1229            pBuf += Z_EXTADDR_LEN;
   1230          
   1231            /* Key data */
   1232            pKey = pBuf;
   1233          
   1234            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1235          
   1236            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1237          }
   1238          
   1239          /***************************************************************************************************
   1240           * @fn      MT_ZdoRemoveLinkKey
   1241           *
   1242           * @brief   Remove an application or trust center link key.
   1243           *
   1244           * @param   pBuf  - MT message data
   1245           *
   1246           * @return  void
   1247           ***************************************************************************************************/
   1248          static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1249          {
   1250            uint8 cmdId;
   1251            uint8 retValue = ZNwkUnknownDevice;
   1252            uint8 *pExtAddr;
   1253          
   1254            /* parse header */
   1255            cmdId = pBuf[MT_RPC_POS_CMD1];
   1256            pBuf += MT_RPC_FRAME_HDR_SZ;
   1257          
   1258            /* ShortAddr */
   1259            pExtAddr = pBuf;
   1260            
   1261            if( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ))
   1262            {
   1263              uint16 tempIndex;
   1264              APSME_TCLKDevEntry_t TCLKDevEntry;
   1265              uint8 found;
   1266                                                             //Reset the frame counter associated to this device  TCLinkKeyFrmCntr
   1267              tempIndex = APSME_SearchTCLinkKeyEntry(pExtAddr,&found, &TCLKDevEntry);
   1268              
   1269              if(found)
   1270              {
   1271                uint16 i;
   1272                
   1273                i = tempIndex - ZCD_NV_TCLK_TABLE_START;
   1274                
   1275                TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   1276                TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   1277                
   1278                if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   1279                {
   1280                  APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   1281                }
   1282                
   1283                osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
   1284                osal_nv_write( ( tempIndex), 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1285                retValue = ZSuccess;
   1286              }
   1287            }
   1288            else
   1289            {
   1290              retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1291            }
   1292            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1293          }
   1294          
   1295          /***************************************************************************************************
   1296           * @fn      MT_ZdoGetLinkKey
   1297           *
   1298           * @brief   Get the application link key.
   1299           *
   1300           * @param   pBuf  - MT message data
   1301           *
   1302           * @return  void
   1303           ***************************************************************************************************/
   1304          static void MT_ZdoGetLinkKey(uint8 *pBuf)
   1305          {
   1306            uint8 cmdId;
   1307            uint8 retValue;
   1308            uint8 *pExtAddr;
   1309            uint8 *retBuf = NULL;
   1310            uint8 len;
   1311            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1312            uint16 apsLinkKeyNvId;
   1313          
   1314            // parse header
   1315            len = pBuf[MT_RPC_POS_LEN];
   1316            cmdId = pBuf[MT_RPC_POS_CMD1];
   1317            pBuf += MT_RPC_FRAME_HDR_SZ;
   1318          
   1319            // Extended Address
   1320            pExtAddr = pBuf;
   1321          
   1322            // Check for illegal extended address -- indicating network address lookup
   1323            if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
   1324                 ( len >= Z_EXTADDR_LEN )            )
   1325            {
   1326              uint16 nwkAddr;
   1327              nwkAddr = osal_build_uint16( pExtAddr );
   1328              (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
   1329            }
   1330          
   1331            // Fetch the key NV ID
   1332            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1333          
   1334            if (retValue == ZSuccess)
   1335            {
   1336              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1337              {
   1338                // retrieve key from NV
   1339                if (osal_nv_read( apsLinkKeyNvId, 0,
   1340                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1341                {
   1342                  retValue = ZNwkUnknownDevice;
   1343                }
   1344              }
   1345              else
   1346              {
   1347                retValue = ZNwkUnknownDevice;
   1348              }
   1349            }
   1350          
   1351            // Construct the response message
   1352            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1353            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1354            {
   1355              if (retValue == ZSuccess)
   1356              {
   1357                // Extended Address
   1358                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1359          
   1360                // Key data
   1361                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1362              }
   1363              else
   1364              {
   1365                // Failed case - set the rest fields to all FF
   1366                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1367              }
   1368          
   1369              retBuf[0] = retValue;  // Status
   1370          
   1371              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1372          
   1373              // clear retBuf because it contains key data and free allocated memory
   1374              osal_memset(retBuf, 0x00, len);
   1375          
   1376              osal_mem_free(retBuf);
   1377            }
   1378          
   1379            // clear copy of key in RAM
   1380            if (pApsLinkKey != NULL)
   1381            {
   1382              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1383          
   1384              osal_mem_free(pApsLinkKey);
   1385            }
   1386          
   1387            return;
   1388          }
   1389          #endif // MT_SYS_KEY_MANAGEMENT
   1390          
   1391          #if defined (MT_ZDO_MGMT)
   1392          /***************************************************************************************************
   1393           * @fn      MT_ZdoMgmtNwkDiscRequest
   1394           *
   1395           * @brief   Handle a Mgmt Nwk Discovery request.
   1396           *
   1397           * @param   pBuf  - MT message data
   1398           *
   1399           * @return  void
   1400           ***************************************************************************************************/
   1401          static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   1402          {
   1403            uint8 cmdId;
   1404            uint8 retValue;
   1405            zAddrType_t destAddr;
   1406            uint32 scanChannels;
   1407            uint8 scanDuration, startIndex;
   1408          
   1409            /* parse header */
   1410            cmdId = pBuf[MT_RPC_POS_CMD1];
   1411            pBuf += MT_RPC_FRAME_HDR_SZ;
   1412          
   1413            /* Dev address */
   1414            destAddr.addrMode = Addr16Bit;
   1415            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1416            pBuf += 2;
   1417          
   1418            /* Scan Channels */
   1419            scanChannels = osal_build_uint32(pBuf, 4);
   1420            pBuf += 4;
   1421          
   1422            /* Scan Duration */
   1423            scanDuration = *pBuf++;
   1424          
   1425            /* Start Index */
   1426            startIndex = *pBuf;
   1427          
   1428            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   1429          
   1430            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1431          }
   1432          
   1433          /***************************************************************************************************
   1434           * @fn      MT_ZdoMgmtLqiRequest
   1435           *
   1436           * @brief   Handle a Mgmt Lqi request.
   1437           *
   1438           * @param   pBuf  - MT message data
   1439           *
   1440           * @return  void
   1441           ***************************************************************************************************/
   1442          static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   1443          {
   1444            uint8 cmdId;
   1445            uint8 retValue;
   1446            zAddrType_t destAddr;
   1447            uint8 startIndex;
   1448          
   1449            /* parse header */
   1450            cmdId = pBuf[MT_RPC_POS_CMD1];
   1451            pBuf += MT_RPC_FRAME_HDR_SZ;
   1452          
   1453            /* Dev address */
   1454            destAddr.addrMode = Addr16Bit;
   1455            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1456            pBuf += 2;
   1457          
   1458            /* Start Index */
   1459            startIndex = *pBuf;
   1460          
   1461            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   1462          
   1463            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1464          }
   1465          
   1466          /***************************************************************************************************
   1467           * @fn      MT_ZdoMgmtRtgRequest
   1468           *
   1469           * @brief   Handle a Mgmt Rtg request.
   1470           *
   1471           * @param   pBuf  - MT message data
   1472           *
   1473           * @return  void
   1474           ***************************************************************************************************/
   1475          static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   1476          {
   1477            uint8 cmdId;
   1478            uint8 retValue;
   1479            zAddrType_t destAddr;
   1480            uint8 startIndex;
   1481          
   1482            /* parse header */
   1483            cmdId = pBuf[MT_RPC_POS_CMD1];
   1484            pBuf += MT_RPC_FRAME_HDR_SZ;
   1485          
   1486            /* Dev Address */
   1487            destAddr.addrMode = Addr16Bit;
   1488            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1489            pBuf += 2;
   1490          
   1491            /* Start Index */
   1492            startIndex = *pBuf;
   1493          
   1494            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   1495          
   1496            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1497          }
   1498          
   1499          /***************************************************************************************************
   1500           * @fn      MT_ZdoMgmtBindRequest
   1501           *
   1502           * @brief   Handle a Mgmt Bind request.
   1503           *
   1504           * @param   pBuf  - MT message data
   1505           *
   1506           * @return  void
   1507           ***************************************************************************************************/
   1508          static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   1509          {
   1510            uint8 cmdId;
   1511            uint8 retValue;
   1512            zAddrType_t destAddr;
   1513            uint8 startIndex;
   1514          
   1515            /* parse header */
   1516            cmdId = pBuf[MT_RPC_POS_CMD1];
   1517            pBuf += MT_RPC_FRAME_HDR_SZ;
   1518          
   1519            /* Dev Address */
   1520            destAddr.addrMode = Addr16Bit;
   1521            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1522            pBuf += 2;
   1523          
   1524            /* Start Index */
   1525            startIndex = *pBuf;
   1526          
   1527            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   1528          
   1529            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1530          }
   1531          
   1532          /***************************************************************************************************
   1533           * @fn      MT_ZdoMgmtLeaveRequest
   1534           *
   1535           * @brief   Handle a Mgmt Leave request.
   1536           *
   1537           * @param   pBuf  - MT message data
   1538           *
   1539           * @return  void
   1540           ***************************************************************************************************/
   1541          static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   1542          {
   1543            uint8 cmdId;
   1544            uint8 retValue;
   1545            zAddrType_t destAddr;
   1546            uint8 *pIEEEAddr;
   1547            uint8 removeChildren;
   1548            uint8 rejoin;
   1549          
   1550            /* parse header */
   1551            cmdId = pBuf[MT_RPC_POS_CMD1];
   1552            pBuf += MT_RPC_FRAME_HDR_SZ;
   1553          
   1554            /* Destination Address */
   1555            destAddr.addrMode = Addr16Bit;
   1556            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1557            pBuf += 2;
   1558          
   1559            /* IEEE address */
   1560            pIEEEAddr = pBuf;
   1561            pBuf += Z_EXTADDR_LEN;
   1562          
   1563            /* Rejoin if bit0 is set */
   1564            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1565          
   1566            /* Remove Children if bit1 is set */
   1567            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1568          
   1569            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   1570          
   1571            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1572          }
   1573          
   1574          /***************************************************************************************************
   1575           * @fn      MT_ZdoMgmtDirectJoinRequest
   1576           *
   1577           * @brief   Handle a Mgmt Direct Join request.
   1578           *
   1579           * @param   pBuf  - MT message data
   1580           *
   1581           * @return  void
   1582           ***************************************************************************************************/
   1583          static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   1584          {
   1585            uint8 cmdId;
   1586            uint8 retValue;
   1587            zAddrType_t destAddr;
   1588            uint8 *deviceAddr;
   1589            uint8 capInfo;
   1590          
   1591            /* parse header */
   1592            cmdId = pBuf[MT_RPC_POS_CMD1];
   1593            pBuf += MT_RPC_FRAME_HDR_SZ;
   1594          
   1595            /* Destination Address */
   1596            destAddr.addrMode = Addr16Bit;
   1597            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1598            pBuf += 2;
   1599          
   1600            /* Device Address */
   1601            deviceAddr = pBuf;
   1602            pBuf += Z_EXTADDR_LEN;
   1603          
   1604            /* Capability information */
   1605            capInfo = *pBuf;
   1606          
   1607            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   1608          
   1609            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1610          }
   1611          
   1612          /***************************************************************************************************
   1613           * @fn      MT_ZdoMgmtPermitJoinRequest
   1614           *
   1615           * @brief   Handle a Mgmt Permit Join request.
   1616           *
   1617           * @param   pBuf  - MT message data
   1618           *
   1619           * @return  void
   1620           ***************************************************************************************************/
   1621          static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   1622          {
   1623            uint8 cmdId;
   1624            uint8 dataLn;
   1625            uint8 retValue;
   1626            uint8 duration;
   1627            uint8 tcSignificance;
   1628            zAddrType_t destAddr;
   1629          
   1630            /* parse header */
   1631            dataLn = pBuf[MT_RPC_POS_LEN];
   1632            cmdId = pBuf[MT_RPC_POS_CMD1];
   1633            pBuf += MT_RPC_FRAME_HDR_SZ;
   1634          
   1635            if ( 4 == dataLn )
   1636            {
   1637              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1638              destAddr.addrMode = afAddr16Bit;
   1639            }
   1640            else
   1641            {
   1642              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1643              destAddr.addrMode = *pBuf++;
   1644            }
   1645          
   1646            /* Destination Address */
   1647            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   1648            pBuf += 2;
   1649          
   1650            /* Duration */
   1651            duration = *pBuf++;
   1652          
   1653            /* Trust center significance */
   1654            tcSignificance = *pBuf;
   1655          
   1656            ignoreIndication = TRUE;
   1657            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   1658            ignoreIndication = FALSE;
   1659          
   1660            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1661          }
   1662          
   1663          /***************************************************************************************************
   1664           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1665           *
   1666           * @brief   Handle a Mgmt Nwk Update request.
   1667           *
   1668           * @param   pBuf  - MT message data
   1669           *
   1670           * @return  void
   1671           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkUpdateRequest:
   1673          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   1674            uint8 cmdId;
   1675            uint8 retValue;
   1676            zAddrType_t destAddr;
   1677            uint32 channelMask;
   1678            uint8 scanDuration, scanCount;
   1679            uint16 nwkManagerAddr;
   1680          
   1681              /* parse header */
   1682            cmdId = pBuf[MT_RPC_POS_CMD1];
   1683            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_22:
   \   00000D   5001         JNC       ??MT_ZdoMgmtNwkUpdateRequest_0
   \   00000F   0F           INC       R7
   1684          
   1685            /* Destination address */
   1686            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoMgmtNwkUpdateRequest_0:
   \   000010                ; Setup parameters for call to function osal_build_uint16
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine25 & 0xFFFF
   1687            pBuf += 2;
   1688          
   1689            /* Destination address mode */
   1690            destAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_56:
   \   00001E   C0E0         PUSH      A
   \   000020   7409         MOV       A,#0x9
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   D0E0         POP       A
   \   000027   F0           MOVX      @DPTR,A
   \   000028   EE           MOV       A,R6
   \   000029   2403         ADD       A,#0x3
   \   00002B   FE           MOV       R6,A
   \   00002C   5001         JNC       ??MT_ZdoMgmtNwkUpdateRequest_1
   \   00002E   0F           INC       R7
   1691          
   1692            channelMask = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_1:
   \   00002F                ; Setup parameters for call to function osal_build_uint32
   \   00002F   7904         MOV       R1,#0x4
   \   000031   FA           MOV       R2,A
   \   000032   EF           MOV       A,R7
   \   000033   FB           MOV       R3,A
   \   000034   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000037   8A..         MOV       ?V4,R2
   \   000039   8B..         MOV       ?V5,R3
   \   00003B   8C..         MOV       ?V6,R4
   \   00003D   8D..         MOV       ?V7,R5
   1693            pBuf += 4;
   1694          
   1695            /* Scan duration */
   1696            scanDuration = *pBuf++;
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V1,A
   1697          
   1698            /* Scan count */
   1699            scanCount = *pBuf++;
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   F5..         MOV       ?V2,A
   1700          
   1701            /* NWK manager address */
   1702            nwkManagerAddr = osal_build_uint16( pBuf );
   \   000056                ; Setup parameters for call to function osal_build_uint16
   \   000056   EE           MOV       A,R6
   \   000057   2406         ADD       A,#0x6
   \   000059   FA           MOV       R2,A
   \   00005A   E4           CLR       A
   \   00005B   3F           ADDC      A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000060   8A..         MOV       ?V8,R2
   \   000062   8B..         MOV       ?V9,R3
   1703          
   1704            /* Send the Management Network Update request */
   1705            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1706                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   000064                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   000064   78..         MOV       R0,#?V8
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   78..         MOV       R0,#?V4
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00006E   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000071   12....       LCALL     ?XSTACK_DISP101_8
   \   000074   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   000077   7406         MOV       A,#0x6
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007C   E9           MOV       A,R1
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   F0           MOVX      @DPTR,A
   1707          
   1708            /*
   1709              Since we don't recevied our own broadcast messages, we should
   1710              send a unicast copy of the message to ourself.
   1711            */
   1712            if ( destAddr.addrMode == AddrBroadcast )
   \   000084   7409         MOV       A,#0x9
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   640F         XRL       A,#0xf
   \   00008C   702B         JNZ       ??MT_ZdoMgmtNwkUpdateRequest_2
   1713            {
   1714              destAddr.addrMode = Addr16Bit;
   \   00008E   12....       LCALL     ?Subroutine34 & 0xFFFF
   1715              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_81:
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   E8           MOV       A,R0
   \   000095   F0           MOVX      @DPTR,A
   \   000096   A3           INC       DPTR
   \   000097   E9           MOV       A,R1
   \   000098   F0           MOVX      @DPTR,A
   1716              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1717                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   000099                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   000099   78..         MOV       R0,#?V8
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000A3   12....       LCALL     ?Subroutine17 & 0xFFFF
   1718            }
   \                     ??CrossCallReturnLabel_31:
   \   0000A6   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A9   12....       LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   0000AC   7406         MOV       A,#0x6
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B1   E9           MOV       A,R1
   \   0000B2   85..82       MOV       DPL,?XSP + 0
   \   0000B5   85..83       MOV       DPH,?XSP + 1
   \   0000B8   F0           MOVX      @DPTR,A
   1719          
   1720            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_2:
   \   0000B9                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B9   AC..         MOV       R4,?XSP + 0
   \   0000BB   AD..         MOV       R5,?XSP + 1
   \   0000BD   7B01         MOV       R3,#0x1
   \   0000BF   AA..         MOV       R2,?V0
   \   0000C1   7965         MOV       R1,#0x65
   \   0000C3   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1721          }
   \   0000C6   740A         MOV       A,#0xa
   \   0000C8   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV       DPTR,#_NIB + 109
   \   000003   E0           MOVX      A,@DPTR
   \   000004   04           INC       A
   \   000005   FD           MOV       R5,A
   \   000006   AC..         MOV       R4,?V2
   \   000008   A9..         MOV       R1,?V1
   \   00000A   7407         MOV       A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003   90....       MOV       DPTR,#_NIB + 20
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET
   1722          #endif /* MT_ZDO_MGMT */
   1723          
   1724          /***************************************************************************************************
   1725           * @fn      MT_ZdoSendData
   1726           *
   1727           * @brief   Handle a ZDO Send Data request.
   1728           *
   1729           * @param   pBuf  - MT message data
   1730           *
   1731           * @return  void
   1732           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1733          static void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8B..         MOV       ?V1,R3
   1735            uint8 cmdId;
   1736            uint8 retValue;
   1737            zAddrType_t destAddr;
   1738            uint8 transSeq;
   1739            uint8 len;
   1740            uint16 cmd;
   1741          
   1742              /* parse header */
   1743            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FF           MOV       R7,A
   1744            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000014   EA           MOV       A,R2
   \   000015   2403         ADD       A,#0x3
   \   000017   F5..         MOV       ?V0,A
   \   000019   5002         JNC       ??MT_ZdoSendData_0
   \   00001B   05..         INC       ?V1
   1745          
   1746            /* Destination address */
   1747            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSendData_0:
   \   00001D   740A         MOV       A,#0xa
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?Subroutine31 & 0xFFFF
   1748            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_76:
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   EA           MOV       A,R2
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   EB           MOV       A,R3
   \   00002C   12....       LCALL     ?Subroutine36 & 0xFFFF
   1749            pBuf += 2;
   1750          
   1751            /* Destination address mode */
   1752            transSeq = *pBuf++;
   \                     ??CrossCallReturnLabel_86:
   \   00002F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000032   E5..         MOV       A,?V0
   \   000034   2403         ADD       A,#0x3
   \   000036   F5..         MOV       ?V0,A
   \   000038   5002         JNC       ??MT_ZdoSendData_1
   \   00003A   05..         INC       ?V1
   1753          
   1754            /* cmd */
   1755            cmd = osal_build_uint16( pBuf );
   \                     ??MT_ZdoSendData_1:
   \   00003C                ; Setup parameters for call to function osal_build_uint16
   \   00003C   12....       LCALL     ?Subroutine39 & 0xFFFF
   1756            pBuf += 2;
   1757            len = *pBuf++;
   \                     ??CrossCallReturnLabel_164:
   \   00003F   85..82       MOV       DPL,?V0
   \   000042   85..83       MOV       DPH,?V1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   FE           MOV       R6,A
   \   000049   E5..         MOV       A,?V0
   \   00004B   2403         ADD       A,#0x3
   \   00004D   F5..         MOV       ?V0,A
   \   00004F   5002         JNC       ??MT_ZdoSendData_2
   \   000051   05..         INC       ?V1
   1758          
   1759            /* Send the Generic ZDO message request */
   1760            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??MT_ZdoSendData_2:
   \   000053                ; Setup parameters for call to function ZDP_SendData
   \   000053   75..00       MOV       ?V4,#0x0
   \   000056   78..         MOV       R0,#?V4
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   EE           MOV       A,R6
   \   000066   F9           MOV       R1,A
   \   000067   7407         MOV       A,#0x7
   \   000069   12....       LCALL     ?XSTACK_DISP102_8
   \   00006C   7405         MOV       A,#0x5
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   \   000077   7401         MOV       A,#0x1
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E9           MOV       A,R1
   \   00007D   F0           MOVX      @DPTR,A
   1761            /*
   1762              Since we don't recevied our own broadcast messages, we should
   1763              send a unicast copy of the message to ourself.
   1764            */
   1765            if ( destAddr.addrMode == AddrBroadcast )
   \   00007E   740A         MOV       A,#0xa
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   E0           MOVX      A,@DPTR
   \   000084   640F         XRL       A,#0xf
   \   000086   7035         JNZ       ??MT_ZdoSendData_3
   1766            {
   1767              destAddr.addrMode = Addr16Bit;
   \   000088   12....       LCALL     ?Subroutine56 & 0xFFFF
   1768              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_121:
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   E8           MOV       A,R0
   \   000091   F0           MOVX      @DPTR,A
   \   000092   A3           INC       DPTR
   \   000093   E9           MOV       A,R1
   \   000094   F0           MOVX      @DPTR,A
   1769              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \   000095                ; Setup parameters for call to function ZDP_SendData
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   78..         MOV       R0,#?V2
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   EE           MOV       A,R6
   \   0000A5   F9           MOV       R1,A
   \   0000A6   7407         MOV       A,#0x7
   \   0000A8   12....       LCALL     ?XSTACK_DISP102_8
   \   0000AB   7405         MOV       A,#0x5
   \   0000AD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B0   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   1770            }
   \                     ??CrossCallReturnLabel_134:
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B6   7401         MOV       A,#0x1
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F0           MOVX      @DPTR,A
   1771          
   1772            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_3:
   \   0000BD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000BD   7401         MOV       A,#0x1
   \   0000BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C2   7B01         MOV       R3,#0x1
   \   0000C4   EF           MOV       A,R7
   \   0000C5   FA           MOV       R2,A
   \   0000C6   7965         MOV       R1,#0x65
   \   0000C8   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1773          }
   \   0000CB   740B         MOV       A,#0xb
   \   0000CD                REQUIRE ?Subroutine2
   \   0000CD                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F06         MOV       R7,#0x6
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   FA           MOV       R2,A
   \   000001   AB..         MOV       R3,?V1
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000003   8A..         MOV       ?V2,R2
   \   000005   8B..         MOV       ?V3,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   7402         MOV       A,#0x2
   \   000002   F0           MOVX      @DPTR,A
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003                ; Setup parameters for call to function osal_build_uint16
   \   000003   0A           INC       R2
   \   000004   0A           INC       R2
   \   000005   0A           INC       R2
   \   000006   AB..         MOV       R3,?V1
   \   000008   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00000B   7402         MOV       A,#0x2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
   1774          
   1775          /***************************************************************************************************
   1776           * @fn      MT_ZdoNwkAddrOfInterestReq
   1777           *
   1778           * @brief   Handle a ZDO Network Address of Interest request.
   1779           *
   1780           * @param   pBuf  - MT message data
   1781           *
   1782           * @return  void
   1783           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1784          static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1785          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EB           MOV       A,R3
   \   00000B   FF           MOV       R7,A
   1786            uint8 cmdId;
   1787            uint8 retValue;
   1788            zAddrType_t destAddr;
   1789            uint16 nwkAddr;
   1790            uint8 cmd;
   1791          
   1792              /* parse header */
   1793            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ??Subroutine64_0 & 0xFFFF
   1794            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_140:
   \   000013   5001         JNC       ??MT_ZdoNwkAddrOfInterestReq_0
   \   000015   0F           INC       R7
   1795          
   1796            /* Destination address */
   1797            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   000016   7409         MOV       A,#0x9
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine28 & 0xFFFF
   1798            destAddr.addr.shortAddr = osal_build_uint16( pBuf );
   \                     ??CrossCallReturnLabel_68:
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1799            pBuf += 2;
   \                     ??CrossCallReturnLabel_151:
   \   000024   5001         JNC       ??MT_ZdoNwkAddrOfInterestReq_1
   \   000026   0F           INC       R7
   1800          
   1801            /* Network Address of Interest */
   1802            nwkAddr = osal_build_uint16( pBuf );
   \                     ??MT_ZdoNwkAddrOfInterestReq_1:
   \   000027                ; Setup parameters for call to function osal_build_uint16
   \   000027   12....       LCALL     ?Subroutine38 & 0xFFFF
   1803            pBuf += 2;
   1804          
   1805            cmd = *pBuf++;
   \                     ??CrossCallReturnLabel_91:
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   FE           MOV       R6,A
   1806          
   1807            /* Send the Generic ZDO message request */
   1808            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   00002C                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   78..         MOV       R0,#?V3
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000034   EE           MOV       A,R6
   \   000035   F9           MOV       R1,A
   \   000036   AC..         MOV       R4,?V0
   \   000038   AD..         MOV       R5,?V1
   \   00003A   7402         MOV       A,#0x2
   \   00003C   12....       LCALL     ?XSTACK_DISP101_8
   \   00003F   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000042   7401         MOV       A,#0x1
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047   E9           MOV       A,R1
   \   000048   85..82       MOV       DPL,?XSP + 0
   \   00004B   85..83       MOV       DPH,?XSP + 1
   \   00004E   F0           MOVX      @DPTR,A
   1809          
   1810          
   1811            /*
   1812              Since we don't recevied our own broadcast messages, we should
   1813              send a unicast copy of the message to ourself.
   1814            */
   1815            if ( destAddr.addrMode == AddrBroadcast )
   \   00004F   7409         MOV       A,#0x9
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   640F         XRL       A,#0xf
   \   000057   702B         JNZ       ??MT_ZdoNwkAddrOfInterestReq_2
   1816            {
   1817              destAddr.addrMode = Addr16Bit;
   \   000059   12....       LCALL     ?Subroutine34 & 0xFFFF
   1818              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_82:
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   E8           MOV       A,R0
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   E9           MOV       A,R1
   \   000063   F0           MOVX      @DPTR,A
   1819              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   000064                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000064   78..         MOV       R0,#?V3
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   EE           MOV       A,R6
   \   00006A   F9           MOV       R1,A
   \   00006B   AC..         MOV       R4,?V0
   \   00006D   AD..         MOV       R5,?V1
   \   00006F   7402         MOV       A,#0x2
   \   000071   12....       LCALL     ?XSTACK_DISP101_8
   \   000074   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000077   7401         MOV       A,#0x1
   \   000079   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007C   E9           MOV       A,R1
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   F0           MOVX      @DPTR,A
   1820            }
   1821          
   1822            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_2:
   \   000084                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000084   AC..         MOV       R4,?XSP + 0
   \   000086   AD..         MOV       R5,?XSP + 1
   \   000088   7B01         MOV       R3,#0x1
   \   00008A   AA..         MOV       R2,?V2
   \   00008C   7965         MOV       R1,#0x65
   \   00008E   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1823          }
   \   000091   740A         MOV       A,#0xa
   \   000093   02....       LJMP      ?Subroutine2 & 0xFFFF
   1824          
   1825          /***************************************************************************************************
   1826           * @fn      MT_ZdoStartupFromApp
   1827           *
   1828           * @brief   Handle a Startup from App request.
   1829           *
   1830           * @param   pBuf  - MT message data
   1831           *
   1832           * @return  void
   1833           ***************************************************************************************************/
   1834          static void MT_ZdoStartupFromApp(uint8 *pBuf)
   1835          {
   1836            uint8 cmd0, cmd1, retValue;
   1837            retValue = ZSuccess;
   1838          
   1839            /* parse header */
   1840            cmd0 = pBuf[MT_RPC_POS_CMD0];
   1841            cmd1 = pBuf[MT_RPC_POS_CMD1];
   1842            pBuf += MT_RPC_FRAME_HDR_SZ;
   1843            
   1844            if(ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE)
   1845            {
   1846              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION);
   1847            }
   1848            else if (ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE)
   1849            {
   1850              bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
   1851            }
   1852            else
   1853            {
   1854               retValue = ZFailure;
   1855            }
   1856          
   1857            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   1858            {
   1859              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   1860            }
   1861          }
   1862          
   1863          
   1864          /***************************************************************************************************
   1865           * @fn      MT_ZdoNetworkDiscoveryReq
   1866           *
   1867           * @brief   Handle a ZDO Network Discovery request.
   1868           *
   1869           * @param   pBuf  - MT message data
   1870           *
   1871           * @return  void
   1872           ***************************************************************************************************/
   1873          static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   1874          {
   1875            uint8  retValue = ZFailure;
   1876            uint8  cmdId;
   1877            uint32 scanChannels;
   1878          
   1879            /* parse header */
   1880            cmdId = pBuf[MT_RPC_POS_CMD1];
   1881            pBuf += MT_RPC_FRAME_HDR_SZ;
   1882          
   1883            /* Packet format */
   1884            /* scan channels (4) | scan duration (1) */
   1885          
   1886            /* Scan channels */
   1887            scanChannels = osal_build_uint32(pBuf, 4);
   1888            pBuf += 4;
   1889          
   1890            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   1891          
   1892            // Register ZDO callback for MT to handle the network discovery confirm
   1893            // and beacon notification confirm
   1894            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   1895            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   1896          
   1897            /* Build and send back the response */
   1898            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1899          }
   1900          
   1901          
   1902          /***************************************************************************************************
   1903           * @fn      MT_ZdoJoinReq
   1904           *
   1905           * @brief   Handle a ZDO Join request.
   1906           *
   1907           * @param   pBuf  - MT message data
   1908           *
   1909           * @return  void
   1910           ***************************************************************************************************/
   1911          static void MT_ZdoJoinReq(uint8 *pBuf)
   1912          {
   1913            uint8  retValue = ZFailure;
   1914            uint8  cmdId;
   1915            uint16 panId;
   1916            uint16 chosenParent;
   1917          
   1918            /* parse header */
   1919            cmdId = pBuf[MT_RPC_POS_CMD1];
   1920            pBuf += MT_RPC_FRAME_HDR_SZ;
   1921          
   1922            /* Packet format */
   1923            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1924             * parentDepth (1) | stackProfile  (1)
   1925             */
   1926          
   1927            panId        = osal_build_uint16( &pBuf[1] );
   1928            chosenParent = osal_build_uint16( &pBuf[11] );
   1929          
   1930            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   1931          
   1932            /* Register for MT to receive Join Confirm */
   1933            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   1934          
   1935            /* Build and send back the response */
   1936            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   1937          
   1938          }
   1939          
   1940          
   1941          /***************************************************************************************************
   1942           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1943           *
   1944           * @brief       Send an indication to inform host device the completion of
   1945           *              network discovery scan
   1946           *
   1947           * @param       pStr - pointer to a parameter and a structure of parameters
   1948           *
   1949           * @return      void
   1950           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1951          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1952          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1953            /* pStr: status (uint8) */
   1954            /* Packet Format */
   1955            /* Status (1) */
   1956          
   1957            // Scan completed. De-register the callback with ZDO
   1958            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV       R1,#0x2
   \   00000B   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1959            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV       R1,#0x3
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1960          
   1961            // Send the buffered beacon indication
   1962            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   12....       LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1963          
   1964            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1965                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV       A,R6
   \   00001B   FC           MOV       R4,A
   \   00001C   EF           MOV       A,R7
   \   00001D   FD           MOV       R5,A
   \   00001E   7B01         MOV       R3,#0x1
   \   000020   7AC7         MOV       R2,#-0x39
   \   000022   7945         MOV       R1,#0x45
   \   000024   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1966            return NULL;
   \   000027   7A00         MOV       R2,#0x0
   \   000029   7B00         MOV       R3,#0x0
   \   00002B                REQUIRE ?Subroutine3
   \   00002B                ; // Fall through to label ?Subroutine3
   1967          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1968          
   1969          /***************************************************************************************************
   1970           * @fn          MT_ZdoBeaconIndCB
   1971           *
   1972           * @brief       Send an indication to host device of a beacon notification
   1973           *
   1974           * @param       pStr -  pointer to a parameter and a structure of parameters
   1975           *
   1976           * @return      void
   1977           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1978          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1979          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1980            zdoBeaconInd_t *pBeacon = pStr;
   1981            uint8 *pTmp;
   1982          
   1983            /* Packet Format */
   1984            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1985          
   1986            if( pStr != NULL)
   \   000009   EA           MOV       A,R2
   \   00000A   4F           ORL       A,R7
   \   00000B   90....       MOV       DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ       $+5
   \   000010   02....       LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1987            {
   1988              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000016   701E         JNZ       ??MT_ZdoBeaconIndCB_1
   1989              {
   1990                // If pBeaconIndBuf has not been allocated yet
   1991                // allocate memory now with MAX_UART_TX_BUFF
   1992                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A7B         MOV       R2,#0x7b
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#pBeaconIndBuf
   \   000022   EA           MOV       A,R2
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   EB           MOV       A,R3
   \   000026   F0           MOVX      @DPTR,A
   \   000027   F9           MOV       R1,A
   \   000028   EA           MOV       A,R2
   \   000029   49           ORL       A,R1
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1993                {
   1994                  // Memory failure
   1995                  return NULL;
   1996                }
   1997                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F583         MOV       DPH,A
   \   000032   8A82         MOV       DPL,R2
   \   000034   E4           CLR       A
   \   000035   F0           MOVX      @DPTR,A
   1998              }
   1999          
   2000              // Fill in the buffer with the beacon indication
   2001              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000036   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000039   75F015       MOV       B,#0x15
   \   00003C   A4           MUL       AB
   \   00003D   F8           MOV       R0,A
   \   00003E   A9F0         MOV       R1,B
   \   000040   90....       MOV       DPTR,#pBeaconIndBuf
   \   000043   E0           MOVX      A,@DPTR
   \   000044   28           ADD       A,R0
   \   000045   FA           MOV       R2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   39           ADDC      A,R1
   \   000049   8A82         MOV       DPL,R2
   \   00004B   F583         MOV       DPH,A
   \   00004D   A3           INC       DPTR
   \   00004E   AA82         MOV       R2,DPL
   \   000050   AB83         MOV       R3,DPH
   2002              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000059   12....       LCALL     ?Subroutine55 & 0xFFFF
   2003              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_119:
   \   00005C   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00005F   F0           MOVX      @DPTR,A
   2004              *pTmp++ = LO_UINT16(pBeacon->panID);
   \   000060   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   12....       LCALL     ?Subroutine30 & 0xFFFF
   2005              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_71:
   \   000068   12....       LCALL     ?Subroutine18 & 0xFFFF
   2006              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_32:
   \   00006B   8E82         MOV       DPL,R6
   \   00006D   8F83         MOV       DPH,R7
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   12....       LCALL     ?Subroutine16 & 0xFFFF
   2007              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_28:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   12....       LCALL     ?Subroutine15 & 0xFFFF
   2008              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_26:
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   12....       LCALL     ?Subroutine11 & 0xFFFF
   2009              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_18:
   \   00008E   8E82         MOV       DPL,R6
   \   000090   8F83         MOV       DPH,R7
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   A3           INC       DPTR
   \   000096   A3           INC       DPTR
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   12....       LCALL     ?Subroutine10 & 0xFFFF
   2010              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_16:
   \   00009C   8E82         MOV       DPL,R6
   \   00009E   8F83         MOV       DPH,R7
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   A3           INC       DPTR
   \   0000A3   A3           INC       DPTR
   \   0000A4   A3           INC       DPTR
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   12....       LCALL     ?Subroutine8 & 0xFFFF
   2011              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_12:
   \   0000AA   8E82         MOV       DPL,R6
   \   0000AC   8F83         MOV       DPH,R7
   \   0000AE   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000B1   12....       LCALL     ?Subroutine55 & 0xFFFF
   2012              *pTmp++ = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_120:
   \   0000B4   A3           INC       DPTR
   \   0000B5   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000B8   A3           INC       DPTR
   \   0000B9   12....       LCALL     ?Subroutine35 & 0xFFFF
   2013              *pTmp++ = pBeacon->depth;
   \                     ??CrossCallReturnLabel_83:
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   C0E0         PUSH      A
   \   0000BF   EA           MOV       A,R2
   \   0000C0   240B         ADD       A,#0xb
   \   0000C2   F582         MOV       DPL,A
   \   0000C4   E4           CLR       A
   \   0000C5   3B           ADDC      A,R3
   \   0000C6   F583         MOV       DPH,A
   \   0000C8   D0E0         POP       A
   \   0000CA   F0           MOVX      @DPTR,A
   2014              *pTmp++ = pBeacon->updateID;
   \   0000CB   EE           MOV       A,R6
   \   0000CC   240C         ADD       A,#0xc
   \   0000CE   F582         MOV       DPL,A
   \   0000D0   E4           CLR       A
   \   0000D1   3F           ADDC      A,R7
   \   0000D2   F583         MOV       DPH,A
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   C0E0         PUSH      A
   \   0000D7   EA           MOV       A,R2
   \   0000D8   240C         ADD       A,#0xc
   \   0000DA   F582         MOV       DPL,A
   \   0000DC   E4           CLR       A
   \   0000DD   3B           ADDC      A,R3
   \   0000DE   F583         MOV       DPH,A
   \   0000E0   D0E0         POP       A
   \   0000E2   F0           MOVX      @DPTR,A
   2015              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000E3                ; Setup parameters for call to function osal_memcpy
   \   0000E3   EE           MOV       A,R6
   \   0000E4   240D         ADD       A,#0xd
   \   0000E6   F5..         MOV       ?V0,A
   \   0000E8   E4           CLR       A
   \   0000E9   3F           ADDC      A,R7
   \   0000EA   F5..         MOV       ?V1,A
   \   0000EC   75..00       MOV       ?V2,#0x0
   \   0000EF   78..         MOV       R0,#?V0
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F4   7C08         MOV       R4,#0x8
   \   0000F6   7D00         MOV       R5,#0x0
   \   0000F8   EA           MOV       A,R2
   \   0000F9   240D         ADD       A,#0xd
   \   0000FB   FA           MOV       R2,A
   \   0000FC   5001         JNC       ??MT_ZdoBeaconIndCB_3
   \   0000FE   0B           INC       R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   0000FF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000102   7403         MOV       A,#0x3
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   2016          
   2017              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   000107   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00010A   04           INC       A
   \   00010B   F0           MOVX      @DPTR,A
   2018          
   2019              // Check if the buffer can fit in another beacon
   2020              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   00010C   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00010F   FA           MOV       R2,A
   \   000110   75F015       MOV       B,#0x15
   \   000113   A4           MUL       AB
   \   000114   A9F0         MOV       R1,B
   \   000116   2416         ADD       A,#0x16
   \   000118   5001         JNC       ??MT_ZdoBeaconIndCB_4
   \   00011A   09           INC       R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   00011B   C3           CLR       C
   \   00011C   947C         SUBB      A,#0x7c
   \   00011E   E9           MOV       A,R1
   \   00011F   9400         SUBB      A,#0x0
   \   000121   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000123   65D0         XRL       A,PSW
   \   000125   33           RLC       A
   \   000126   404A         JC        ??MT_ZdoBeaconIndCB_2
   2021              {
   2022                // Packet full, send the packet over MT
   2023                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2024                                             MT_ZDO_BEACON_NOTIFY_IND,
   2025                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000128                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000128   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00012B   EA           MOV       A,R2
   \   00012C   A4           MUL       AB
   \   00012D   04           INC       A
   \   00012E   FB           MOV       R3,A
   \   00012F   7AC5         MOV       R2,#-0x3b
   \   000131   7945         MOV       R1,#0x45
   \   000133   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2026                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   000136   12....       LCALL     ?Subroutine51 & 0xFFFF
   2027              }
   2028            }
   \                     ??CrossCallReturnLabel_111:
   \   000139   E4           CLR       A
   \   00013A   8035         SJMP      ??MT_ZdoBeaconIndCB_5
   2029            else
   2030            {
   2031              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   00013C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00013F   6031         JZ        ??MT_ZdoBeaconIndCB_2
   \   000141   E0           MOVX      A,@DPTR
   \   000142   F583         MOV       DPH,A
   \   000144   8882         MOV       DPL,R0
   \   000146   E0           MOVX      A,@DPTR
   \   000147   F8           MOV       R0,A
   \   000148   6016         JZ        ??MT_ZdoBeaconIndCB_6
   2032              {
   2033                // End of beacon indication, send the packet over MT
   2034                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2035                                             MT_ZDO_BEACON_NOTIFY_IND,
   2036                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   00014A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00014A   12....       LCALL     ?Subroutine21 & 0xFFFF
   2037              }
   \                     ??CrossCallReturnLabel_37:
   \   00014D   E8           MOV       A,R0
   \   00014E   A4           MUL       AB
   \   00014F   04           INC       A
   \   000150   FB           MOV       R3,A
   \   000151   7AC5         MOV       R2,#-0x3b
   \   000153   7945         MOV       R1,#0x45
   \   000155   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2038              // Free the allocated memory
   2039              if(pBeaconIndBuf != NULL)
   \   000158   90....       MOV       DPTR,#pBeaconIndBuf
   \   00015B   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00015E   6012         JZ        ??MT_ZdoBeaconIndCB_2
   2040              {
   2041                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000160                ; Setup parameters for call to function osal_mem_free
   \   000160   90....       MOV       DPTR,#pBeaconIndBuf
   \   000163   E0           MOVX      A,@DPTR
   \   000164   FA           MOV       R2,A
   \   000165   A3           INC       DPTR
   \   000166   E0           MOVX      A,@DPTR
   \   000167   FB           MOV       R3,A
   \   000168   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2042                pBeaconIndBuf = NULL;
   \   00016B   90....       MOV       DPTR,#pBeaconIndBuf
   \   00016E   E4           CLR       A
   \   00016F   F0           MOVX      @DPTR,A
   \   000170   A3           INC       DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   000171   F0           MOVX      @DPTR,A
   2043              }
   2044            }
   2045          
   2046            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000172   7A00         MOV       R2,#0x0
   \   000174   7B00         MOV       R3,#0x0
   \   000176   7F03         MOV       R7,#0x3
   \   000178   02....       LJMP      ?BANKED_LEAVE_XDATA
   2047          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FD           MOV       R5,A
   \   000008   75F015       MOV       B,#0x15
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine68_0
   \   000001                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   90....       MOV       DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8882         MOV       DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   240B         ADD       A,#0xb
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   2048          
   2049          /***************************************************************************************************
   2050           * @fn          MT_ZdoJoinCnfCB
   2051           *
   2052           * @brief       Handle the ZDO Join Confirm from ZDO
   2053           *
   2054           * @param       pStr - pointer to a parameter and a structure of parameters
   2055           *
   2056           * @return      void
   2057           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2058          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   2059          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2060            /* pStr: zdoJoinCnf_t* */
   2061            /* Packet Format */
   2062            /* Status (1) | device addr (2) | parent addr (2) */
   2063          
   2064            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2065            zdoJoinCnf_t *joinCnf = pStr;
   2066          
   2067            /* Join Complete. De-register the callback with ZDO */
   2068            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV       R1,#0x4
   \   000010   12....       LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   2069          
   2070            buf[0] = joinCnf->status;
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ?Subroutine22 & 0xFFFF
   2071            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_39:
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   A3           INC       DPTR
   \   00001F   A882         MOV       R0,DPL
   \   000021   A983         MOV       R1,DPH
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C0E0         PUSH      A
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   D0E0         POP       A
   \   00002D   12....       LCALL     ?Subroutine30 & 0xFFFF
   2072            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_72:
   \   000030   E0           MOVX      A,@DPTR
   \   000031   C0E0         PUSH      A
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   D0E0         POP       A
   \   00003A   F0           MOVX      @DPTR,A
   2073            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003B   EE           MOV       A,R6
   \   00003C   2403         ADD       A,#0x3
   \   00003E   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000041   E0           MOVX      A,@DPTR
   \   000042   C0E0         PUSH      A
   \   000044   7403         MOV       A,#0x3
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   D0E0         POP       A
   \   00004B   12....       LCALL     ?Subroutine30 & 0xFFFF
   2074            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \                     ??CrossCallReturnLabel_73:
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   C0E0         PUSH      A
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   D0E0         POP       A
   \   000058   F0           MOVX      @DPTR,A
   2075          
   2076            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2077                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \   000059                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000059   AC..         MOV       R4,?XSP + 0
   \   00005B   AD..         MOV       R5,?XSP + 1
   \   00005D   7B05         MOV       R3,#0x5
   \   00005F   7AC6         MOV       R2,#-0x3a
   \   000061   7945         MOV       R1,#0x45
   \   000063   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2078          
   2079            return NULL;
   \   000066   7A00         MOV       R2,#0x0
   \   000068   7B00         MOV       R3,#0x0
   \   00006A   7405         MOV       A,#0x5
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   02....       LJMP      ?Subroutine3 & 0xFFFF
   2080          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3F           ADDC      A,R7
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET
   2081          
   2082          /*************************************************************************************************
   2083           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2084           *
   2085           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2086           *
   2087           * @param   pBuf  - MT message data
   2088           *
   2089           * @return  void
   2090           *************************************************************************************************/
   2091          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   2092          {
   2093            uint8 cmd0, cmd1, tmp;
   2094            uint16 cId;
   2095          
   2096            /* parse header */
   2097            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2098            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2099            pBuf += MT_RPC_FRAME_HDR_SZ;
   2100          
   2101            cId = osal_build_uint16( pBuf );
   2102            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   2103          
   2104            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2105            {
   2106              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2107            }
   2108          }
   2109          
   2110          /*************************************************************************************************
   2111           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2112           *
   2113           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2114           *
   2115           * @param   pBuf  - MT message data
   2116           *
   2117           * @return  void
   2118           *************************************************************************************************/
   2119          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   2120          {
   2121            uint8 cmd0, cmd1, tmp;
   2122            uint16 cId;
   2123          
   2124            /* parse header */
   2125            cmd0 = pBuf[MT_RPC_POS_CMD0];
   2126            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2127            pBuf += MT_RPC_FRAME_HDR_SZ;
   2128          
   2129            cId = osal_build_uint16( pBuf );
   2130            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   2131          
   2132            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   2133            {
   2134              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   2135            }
   2136          }
   2137          
   2138          /*************************************************************************************************
   2139           * @fn      MT_ZdoSetRejoinParameters(pBuf);
   2140           *
   2141           * @brief   Set Rejoin backoff and scan duration from MT
   2142           *
   2143           * @param   pBuf  - MT message data
   2144           *
   2145           * @return  void
   2146           *************************************************************************************************/
   2147          static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
   2148          {
   2149            uint8 cmdId;
   2150            uint8 retValue;
   2151            uint32 rejoinBackoffDuration, rejoinScanDuration;
   2152          
   2153            // parse header
   2154            cmdId = pBuf[MT_RPC_POS_CMD1];
   2155            pBuf += MT_RPC_FRAME_HDR_SZ;
   2156          
   2157            //Rejoin Backoff Duration
   2158            rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
   2159            pBuf += 4;
   2160          
   2161            //Rejoin Scan Duration
   2162            rejoinScanDuration = osal_build_uint32(pBuf, 4);
   2163          
   2164            ZDApp_SetRejoinScanDuration(rejoinScanDuration);
   2165            ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
   2166          
   2167            retValue = ZSuccess;
   2168          
   2169            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   2170          
   2171          }
   2172          
   2173          #endif /* MT_ZDO_FUNC */
   2174          
   2175          
   2176          /***************************************************************************************************
   2177           * Callback handling function
   2178           ***************************************************************************************************/
   2179          
   2180          #if defined (MT_ZDO_CB_FUNC)
   2181          
   2182          /***************************************************************************************************
   2183           * @fn      MT_ZdoStateChangeCB
   2184           *
   2185           * @brief   Handle state change OSAL message from ZDO.
   2186           *
   2187           * @param   pMsg  - Message data
   2188           *
   2189           * @return  void
   2190           */
   2191          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   2192          {
   2193            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2194                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   2195          }
   2196          
   2197          /***************************************************************************************************
   2198           * @fn     MT_ZdoDirectCB()
   2199           *
   2200           * @brief  ZDO direct callback.  Build an MT message directly from the
   2201           *         over-the-air ZDO message.
   2202           *
   2203           * @param  pData - Incoming AF frame.
   2204           *
   2205           * @return  none
   2206           ***************************************************************************************************/
   2207          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2208          {
   2209            uint8 len, *pBuf;
   2210            uint16 origClusterId;
   2211          
   2212            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2213            origClusterId = pData->clusterId;
   2214          
   2215            // Is the message an exception or not a response?
   2216            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   2217            {
   2218              return;  // Handled somewhere else or not needed.
   2219            }
   2220          
   2221            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2222             * two bytes for srcAddr.
   2223             */
   2224            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   2225          
   2226            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2227            {
   2228              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   2229          
   2230              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   2231              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2232          
   2233              /* copy ZDO data, skipping one-byte sequence number */
   2234              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   2235          
   2236              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2237              osal_mem_free(pBuf);
   2238            }
   2239          }
   2240          
   2241          /***************************************************************************************************
   2242           * @fn     MT_ZdoHandleExceptions()
   2243           *
   2244           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2245           *
   2246           * @param  pData - Incoming AF frame.
   2247           *
   2248           * @return  TRUE if handled by this function, FALSE if not
   2249           ***************************************************************************************************/
   2250          static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   2251          {
   2252            uint8 ret = TRUE;
   2253            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2254            ZDO_DeviceAnnce_t devAnnce;
   2255            uint8 doDefault = FALSE;
   2256          
   2257            switch ( inMsg->clusterID )
   2258            {
   2259              case NWK_addr_rsp:
   2260              case IEEE_addr_rsp:
   2261                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   2262                {
   2263                  if ( nwkRsp->status == ZDO_SUCCESS )
   2264                  {
   2265                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   2266                  }
   2267                  osal_mem_free( nwkRsp );
   2268                }
   2269                break;
   2270          
   2271              case Device_annce:
   2272                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   2273                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   2274                break;
   2275          
   2276              case Simple_Desc_rsp:
   2277                if ( pData->cmd.DataLength > 5 )
   2278                {
   2279                  ret = FALSE;
   2280                }
   2281                else
   2282                {
   2283                  doDefault = TRUE;
   2284                }
   2285                break;
   2286          
   2287              default:
   2288                ret = FALSE;
   2289                break;
   2290            }
   2291          
   2292            if ( doDefault )
   2293            {
   2294              ret = FALSE;
   2295              pData->clusterId = MtZdoDef_rsp;
   2296              pData->cmd.DataLength = 2;
   2297            }
   2298          
   2299            return ( ret );
   2300          }
   2301          
   2302          /***************************************************************************************************
   2303           * @fn      MT_ZdoAddrRspCB
   2304           *
   2305           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2306           *
   2307           * @param   pMsg  - Message data
   2308           *
   2309           * @return  void
   2310           */
   2311          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   2312          {
   2313            uint8   listLen, len, *pBuf;
   2314          
   2315            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2316          
   2317            /* get length, sanity check length */
   2318            listLen = pMsg->numAssocDevs;
   2319          
   2320            /* calculate msg length */
   2321            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   2322          
   2323            /* get buffer */
   2324            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2325            {
   2326              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2327              uint8 *pTmp = pBuf;
   2328          
   2329              *pTmp++ = pMsg->status;
   2330          
   2331              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2332              pTmp += Z_EXTADDR_LEN;
   2333          
   2334              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2335              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2336          
   2337              *pTmp++ = pMsg->startIndex;
   2338              *pTmp++ = listLen;
   2339          
   2340              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   2341          
   2342              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   2343              osal_mem_free(pBuf);
   2344            }
   2345          }
   2346          
   2347          /***************************************************************************************************
   2348           * @fn      MT_ZdoEndDevAnnceCB
   2349           *
   2350           * @brief   Handle end device announce OSAL message from ZDO.
   2351           *
   2352           * @param   pMsg  - Message data
   2353           *
   2354           * @return  void
   2355           */
   2356          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   2357          {
   2358            uint8 *pBuf;
   2359          
   2360            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   2361            {
   2362              uint8 *pTmp = pBuf;
   2363          
   2364              *pTmp++ = LO_UINT16(srcAddr);
   2365              *pTmp++ = HI_UINT16(srcAddr);
   2366          
   2367              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   2368              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   2369          
   2370              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   2371              pTmp += Z_EXTADDR_LEN;
   2372          
   2373              *pTmp = pMsg->capabilities;
   2374          
   2375              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2376                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2377                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   2378              osal_mem_free(pBuf);
   2379            }
   2380          }
   2381          
   2382          /***************************************************************************************************
   2383           * @fn      MT_ZdoSrcRtgCB
   2384           *
   2385           * @brief   Handle Src Route from ZDO.
   2386           *
   2387           * @param   pStr  - pointer to the data structure for the src route
   2388           *
   2389           * @return  void*
   2390           */
   2391          void* MT_ZdoSrcRtgCB( void *pStr )
   2392          {
   2393            uint8 len, *pBuf;
   2394            zdoSrcRtg_t *pSrcRtg = pStr;
   2395          
   2396            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2397            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   2398          
   2399            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   2400            {
   2401              uint8 idx, *pTmp = pBuf;
   2402              uint16 *pRelay;
   2403          
   2404              // Packet payload
   2405              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   2406              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   2407              *pTmp++ = pSrcRtg->relayCnt;
   2408          
   2409              // Relay List
   2410              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   2411              {
   2412                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   2413                {
   2414                  *pTmp++ = LO_UINT16(*pRelay);
   2415                  *pTmp++ = HI_UINT16(*pRelay);
   2416                  pRelay++;
   2417                }
   2418              }
   2419              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2420                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   2421              osal_mem_free(pBuf);
   2422            }
   2423          
   2424            return NULL;
   2425          }
   2426          
   2427          /***************************************************************************************************
   2428           * @fn          MT_ZdoConcentratorIndCB
   2429           *
   2430           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2431           *
   2432           * @param       pStr - pointer to a parameter and a structure of parameters
   2433           *
   2434           * @return      NULL
   2435           ***************************************************************************************************/
   2436          void *MT_ZdoConcentratorIndCB(void *pStr)
   2437          {
   2438            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2439            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2440          
   2441            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2442            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   2443            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2444            *pTmp = pInd->pktCost;
   2445          
   2446            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2447                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   2448            return NULL;
   2449          }
   2450          
   2451          /***************************************************************************************************
   2452           * @fn          MT_ZdoLeaveInd
   2453           *
   2454           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2455           *
   2456           * @param       vPtr - Pointer to the received Leave Indication message.
   2457           *
   2458           * @return      NULL
   2459           ***************************************************************************************************/
   2460          static void *MT_ZdoLeaveInd(void *vPtr)
   2461          {
   2462            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2463            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2464          
   2465            buf[0] = LO_UINT16(pInd->srcAddr);
   2466            buf[1] = HI_UINT16(pInd->srcAddr);
   2467            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   2468            buf[2+Z_EXTADDR_LEN] = pInd->request;
   2469            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   2470            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   2471          
   2472            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2473                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   2474            return NULL;
   2475          }
   2476          
   2477          /***************************************************************************************************
   2478           * @fn          MT_ZdoTcDeviceInd
   2479           *
   2480           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2481           *
   2482           * @param       params - pointer to Trust Center joining device information
   2483           *
   2484           * @return      NULL
   2485           ***************************************************************************************************/
   2486          void *MT_ZdoTcDeviceInd( void *params )
   2487          {
   2488            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2489            uint8 buf[12];
   2490          
   2491            buf[0] = LO_UINT16( pDev->nwkAddr );
   2492            buf[1] = HI_UINT16( pDev->nwkAddr );
   2493            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   2494            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   2495            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   2496          
   2497            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2498                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   2499          
   2500            return ( NULL );
   2501          }
   2502          
   2503          /***************************************************************************************************
   2504           * @fn          MT_ZdoPermitJoinInd
   2505           *
   2506           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2507           *
   2508           * @param       duration - permit join duration
   2509           *
   2510           * @return      NULL
   2511           ***************************************************************************************************/
   2512          void *MT_ZdoPermitJoinInd( void *duration )
   2513          {
   2514            if ( ignoreIndication == FALSE )
   2515            {
   2516              // The following condition was moved here from NLME_PermitJoiningSet. It was removed there to
   2517              // support calling the callback for every time a permit join command is processed, and let the
   2518              // callback decide how to act.
   2519              if ((( *(uint8*)duration == 0x00 ) && ( NLME_PermitJoining )) || (( *(uint8*)duration != 0x00 ) && ( ! NLME_PermitJoining )))
   2520              {  
   2521                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2522                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   2523              }
   2524            }
   2525          
   2526            return ( NULL );
   2527          }
   2528          #endif // MT_ZDO_CB_FUNC
   2529          
   2530          /***************************************************************************************************
   2531           * @fn      MT_ZdoSendMsgCB
   2532           *
   2533           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2534           *
   2535           * @param   pMsg  - Message data
   2536           *
   2537           * @return  void
   2538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2539          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2540          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV       A,#-0x13
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2541            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV       A,R2
   \   00000A   2410         ADD       A,#0x10
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   88..         MOV       ?V4,R0
   \   000011   F5..         MOV       ?V5,A
   \   000013   8882         MOV       DPL,R0
   \   000015   F583         MOV       DPH,A
   \   000017   E0           MOVX      A,@DPTR
   \   000018   2409         ADD       A,#0x9
   \   00001A   F5..         MOV       ?V2,A
   2542            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   FA           MOV       R2,A
   \   00001D   7B00         MOV       R3,#0x0
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V0,R2
   \   000024   8B..         MOV       ?V1,R3
   2543          
   2544            if (pBuf != NULL)
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2545            {
   2546              uint8 *pTmp = pBuf;
   2547          
   2548              // Assuming exclusive use of network short addresses.
   2549              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   00002D   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000030   F0           MOVX      @DPTR,A
   2550              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000031   8882         MOV       DPL,R0
   \   000033   8983         MOV       DPH,R1
   \   000035   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000038   12....       LCALL     ?Subroutine35 & 0xFFFF
   2551              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_84:
   \   00003B   12....       LCALL     ??Subroutine68_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   00003E   A3           INC       DPTR
   \   00003F   F0           MOVX      @DPTR,A
   2552              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \   000040   EE           MOV       A,R6
   \   000041   240C         ADD       A,#0xc
   \   000043   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000046   12....       LCALL     ?Subroutine18 & 0xFFFF
   2553              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_33:
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   12....       LCALL     ?Subroutine16 & 0xFFFF
   2554              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_29:
   \   000050   EE           MOV       A,R6
   \   000051   240E         ADD       A,#0xe
   \   000053   F582         MOV       DPL,A
   \   000055   E4           CLR       A
   \   000056   3F           ADDC      A,R7
   \   000057   F583         MOV       DPH,A
   \   000059   12....       LCALL     ?Subroutine15 & 0xFFFF
   2555              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_27:
   \   00005C   EE           MOV       A,R6
   \   00005D   240F         ADD       A,#0xf
   \   00005F   F582         MOV       DPL,A
   \   000061   E4           CLR       A
   \   000062   3F           ADDC      A,R7
   \   000063   F583         MOV       DPH,A
   \   000065   12....       LCALL     ?Subroutine11 & 0xFFFF
   2556              // Skipping asduLen since it can be deduced from the RPC packet length.
   2557              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_19:
   \   000068   EE           MOV       A,R6
   \   000069   2411         ADD       A,#0x11
   \   00006B   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00006E   12....       LCALL     ?Subroutine10 & 0xFFFF
   2558              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_17:
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   12....       LCALL     ?Subroutine8 & 0xFFFF
   2559              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_13:
   \   000078                ; Setup parameters for call to function osal_memcpy
   \   000078   EE           MOV       A,R6
   \   000079   2413         ADD       A,#0x13
   \   00007B   F582         MOV       DPL,A
   \   00007D   E4           CLR       A
   \   00007E   3F           ADDC      A,R7
   \   00007F   F583         MOV       DPH,A
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F5..         MOV       ?V8,A
   \   000084   A3           INC       DPTR
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F5..         MOV       ?V9,A
   \   000088   75..00       MOV       ?V10,#0x0
   \   00008B   78..         MOV       R0,#?V8
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000090   85..82       MOV       DPL,?V4
   \   000093   85..83       MOV       DPH,?V5
   \   000096   E0           MOVX      A,@DPTR
   \   000097   FC           MOV       R4,A
   \   000098   7D00         MOV       R5,#0x0
   \   00009A   EA           MOV       A,R2
   \   00009B   2409         ADD       A,#0x9
   \   00009D   FA           MOV       R2,A
   \   00009E   E4           CLR       A
   \   00009F   35..         ADDC      A,?V1
   \   0000A1   FB           MOV       R3,A
   \   0000A2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A5   7403         MOV       A,#0x3
   \   0000A7   12....       LCALL     ?DEALLOC_XSTACK8
   2560          
   2561              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2562                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   0000AA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000AA   AC..         MOV       R4,?V0
   \   0000AC   AD..         MOV       R5,?V1
   \   0000AE   AB..         MOV       R3,?V2
   \   0000B0   7AFF         MOV       R2,#-0x1
   \   0000B2   7945         MOV       R1,#0x45
   \   0000B4   12....       LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2563          
   2564              osal_mem_free(pBuf);
   \   0000B7                ; Setup parameters for call to function osal_mem_free
   \   0000B7   AA..         MOV       R2,?V0
   \   0000B9   AB..         MOV       R3,?V1
   \   0000BB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2565            }
   2566          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000BE   7F0B         MOV       R7,#0xb
   \   0000C0   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine62_0
   \   000004                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V1,A
   \   000009   78..         MOV       R0,#?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   FB           MOV       R3,A
   \   000001   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000004   8A..         MOV       ?V0,R2
   \   000006   8B..         MOV       ?V1,R3
   \   000008   8C..         MOV       ?V2,R4
   \   00000A   8D..         MOV       ?V3,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   75..00       MOV       ?V0,#0x0
   \   000004   78..         MOV       R0,#?V0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7401         MOV       A,#0x1
   \   000008   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   0E           INC       R6
   \   00000F   E9           MOV       A,R1
   \   000010   FF           MOV       R7,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   0E           INC       R6
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006                ; Setup parameters for call to function osal_build_uint16
   \   000006                ; Setup parameters for call to function osal_build_uint16
   \   000006   0A           INC       R2
   \   000007   0A           INC       R2
   \   000008   0A           INC       R2
   \   000009   FB           MOV       R3,A
   \   00000A   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E5..         MOV       A,?V0
   \   000002   F0           MOVX      @DPTR,A
   \   000003   0E           INC       R6
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006   740A         MOV       A,#0xa
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000005   7402         MOV       A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001                ; Setup parameters for call to function osal_build_uint16
   \   000001   0A           INC       R2
   \   000002   0A           INC       R2
   \   000003   0A           INC       R2
   \   000004   E9           MOV       A,R1
   \   000005   FB           MOV       R3,A
   \   000006   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FC           MOV       R4,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   AC..         MOV       R4,?V0
   \   000005   AD..         MOV       R5,?V1
   \   000007                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000007   75..00       MOV       ?V0,#0x0
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   22           RET
   2567          
   2568          
   2569          #if defined ( MT_ZDO_EXTENSIONS )
   2570          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2571          /***************************************************************************************************
   2572           * @fn          MT_ZdoSecUpdateNwkKey
   2573           *
   2574           * @brief       Handle the ZDO Security Update Network Key extension message
   2575           *
   2576           * @param       pBuf - Pointer to the received message data.
   2577           *
   2578           * @return      NULL
   2579           ***************************************************************************************************/
   2580          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2581          {
   2582            uint16 dstAddr;
   2583            uint8 keySeqNum;
   2584            uint8 status;
   2585          
   2586            pBuf += MT_RPC_FRAME_HDR_SZ;
   2587          
   2588            dstAddr = osal_build_uint16( pBuf );
   2589            pBuf += 2;
   2590            keySeqNum = *pBuf++;
   2591          
   2592            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2593          
   2594            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2595                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2596          }
   2597          
   2598          /***************************************************************************************************
   2599           * @fn          MT_ZdoSecSwitchNwkKey
   2600           *
   2601           * @brief       Handle the ZDO Security Switch Network Key extension message
   2602           *
   2603           * @param       pBuf - Pointer to the received message data.
   2604           *
   2605           * @return      NULL
   2606           ***************************************************************************************************/
   2607          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2608          {
   2609            uint16 dstAddr;
   2610            uint8 keySeqNum;
   2611            uint8 status;
   2612          
   2613            pBuf += MT_RPC_FRAME_HDR_SZ;
   2614          
   2615            dstAddr = osal_build_uint16( pBuf );
   2616            pBuf += 2;
   2617            keySeqNum = *pBuf++;
   2618          
   2619            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2620          
   2621            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2622                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2623          }
   2624          #endif // ZG_BUILD_COORDINATOR_TYPE
   2625          
   2626          /***************************************************************************************************
   2627           * @fn          MT_ZdoSecAddLinkKey
   2628           *
   2629           * @brief       Handle the ZDO Security Add Link Key extension message
   2630           *
   2631           * @param       pBuf - Pointer to the received message data.
   2632           *
   2633           * @return      NULL
   2634           ***************************************************************************************************/
   2635          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2636          {
   2637            uint16 shortAddr;
   2638            uint8 *pExtAddr;
   2639            uint8 status;
   2640          
   2641            pBuf += MT_RPC_FRAME_HDR_SZ;
   2642          
   2643            shortAddr = osal_build_uint16( pBuf );
   2644            pBuf += 2;
   2645            pExtAddr = pBuf;
   2646            pBuf += Z_EXTADDR_LEN;
   2647          
   2648            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2649          
   2650            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2651                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2652          }
   2653          
   2654          /***************************************************************************************************
   2655           * @fn          MT_ZdoSecEntryLookupExt
   2656           *
   2657           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2658           *
   2659           * @param       pBuf - Pointer to the received message data.
   2660           *
   2661           * @return      NULL
   2662           ***************************************************************************************************/
   2663          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2664          {
   2665            ZDSecMgrEntry_t *pEntry = NULL;
   2666            uint8 buf[6] = {0};
   2667          
   2668            pBuf += MT_RPC_FRAME_HDR_SZ;
   2669          
   2670            // lookup entry index for specified EXT address
   2671            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2672            if ( pEntry )
   2673            {
   2674              buf[1] = LO_UINT16( pEntry->ami );
   2675              buf[2] = HI_UINT16( pEntry->ami );
   2676              buf[3] = LO_UINT16( pEntry->keyNvId );
   2677              buf[4] = HI_UINT16( pEntry->keyNvId );
   2678              buf[5] = (uint8)pEntry->authenticateOption;
   2679            }
   2680          
   2681            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2682                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2683          }
   2684          
   2685          /***************************************************************************************************
   2686           * @fn          MT_ZdoSecDeviceRemove
   2687           *
   2688           * @brief       Handle the ZDO Security Remove Device extension message
   2689           *
   2690           * @param       pBuf - Pointer to the received message data.
   2691           *
   2692           * @return      NULL
   2693           ***************************************************************************************************/
   2694          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2695          {
   2696            ZStatus_t status;
   2697          
   2698            pBuf += MT_RPC_FRAME_HDR_SZ;
   2699          
   2700            // lookup entry index for specified EXT address
   2701            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2702          
   2703            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2704                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2705          }
   2706          
   2707          /***************************************************************************************************
   2708           * @fn          MT_ZdoExtRouteDisc
   2709           *
   2710           * @brief       Handle the ZDO Route Discovery extension message
   2711           *
   2712           * @param       pBuf - Pointer to the received message data.
   2713           *
   2714           * @return      NULL
   2715           ***************************************************************************************************/
   2716          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2717          {
   2718            ZStatus_t status;
   2719            uint16 dstAddr;
   2720          
   2721            pBuf += MT_RPC_FRAME_HDR_SZ;
   2722          
   2723            dstAddr = osal_build_uint16( pBuf );
   2724          
   2725            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2726          
   2727          
   2728            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2729                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2730          }
   2731          
   2732          /***************************************************************************************************
   2733           * @fn          MT_ZdoExtRouteCheck
   2734           *
   2735           * @brief       Handle the ZDO Route Check extension message
   2736           *
   2737           * @param       pBuf - Pointer to the received message data.
   2738           *
   2739           * @return      NULL
   2740           ***************************************************************************************************/
   2741          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2742          {
   2743            ZStatus_t status;
   2744            uint16 dstAddr;
   2745          
   2746            pBuf += MT_RPC_FRAME_HDR_SZ;
   2747          
   2748            dstAddr = osal_build_uint16( pBuf );
   2749          
   2750            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2751          
   2752            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2753                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2754          }
   2755          
   2756          /***************************************************************************************************
   2757           * @fn          MT_ZdoExtRemoveGroup
   2758           *
   2759           * @brief       Handle the ZDO extension Remove Group message
   2760           *
   2761           * @param       pBuf - Pointer to the received message data.
   2762           *
   2763           * @return      NULL
   2764           ***************************************************************************************************/
   2765          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2766          {
   2767            ZStatus_t status;
   2768            uint8 endpoint;
   2769            uint16 groupID;
   2770          
   2771            pBuf += MT_RPC_FRAME_HDR_SZ;
   2772          
   2773            endpoint = *pBuf++;
   2774            groupID = osal_build_uint16( pBuf );
   2775          
   2776            if ( aps_RemoveGroup( endpoint, groupID ) )
   2777            {
   2778              status = ZSuccess;
   2779            }
   2780            else
   2781            {
   2782              status = ZFailure;
   2783            }
   2784          
   2785            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2786                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2787          }
   2788          
   2789          /***************************************************************************************************
   2790           * @fn          MT_ZdoExtRemoveAllGroup
   2791           *
   2792           * @brief       Handle the ZDO extension Remove All Groups message
   2793           *
   2794           * @param       pBuf - Pointer to the received message data.
   2795           *
   2796           * @return      NULL
   2797           ***************************************************************************************************/
   2798          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2799          {
   2800            ZStatus_t status = ZSuccess;
   2801          
   2802            pBuf += MT_RPC_FRAME_HDR_SZ;
   2803          
   2804            aps_RemoveAllGroup( *pBuf );
   2805          
   2806            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2807                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2808          }
   2809          
   2810          /***************************************************************************************************
   2811           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2812           *
   2813           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2814           *
   2815           * @param       pBuf - Pointer to the received message data.
   2816           *
   2817           * @return      NULL
   2818           ***************************************************************************************************/
   2819          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   2820          {
   2821            uint16 groupList[ APS_MAX_GROUPS ];
   2822            uint8 groups;
   2823            uint8 msgLen;
   2824            uint8 *pMsg;
   2825          
   2826            pBuf += MT_RPC_FRAME_HDR_SZ;
   2827          
   2828            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   2829          
   2830            msgLen = 1 + (2 * groups);
   2831            pMsg = osal_mem_alloc( msgLen );
   2832            if ( pMsg )
   2833            {
   2834              uint8 x;
   2835              uint8 *pBuf = pMsg;
   2836          
   2837              *pBuf++ = groups;
   2838              for ( x = 0; x < groups; x++ )
   2839              {
   2840                *pBuf++ = LO_UINT16( groupList[x] );
   2841                *pBuf++ = HI_UINT16( groupList[x] );
   2842              }
   2843          
   2844              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2845                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   2846              osal_mem_free( pMsg );
   2847            }
   2848            else
   2849            {
   2850              groups = 0;
   2851              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2852                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2853            }
   2854          }
   2855          
   2856          /***************************************************************************************************
   2857           * @fn          MT_ZdoExtFindGroup
   2858           *
   2859           * @brief       Handle the ZDO extension Find Group message
   2860           *
   2861           * @param       pBuf - Pointer to the received message data.
   2862           *
   2863           * @return      NULL
   2864           ***************************************************************************************************/
   2865          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   2866          {
   2867            uint8 endpoint;
   2868            uint16 groupID;
   2869            aps_Group_t *pGroup;
   2870            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   2871          
   2872            pBuf += MT_RPC_FRAME_HDR_SZ;
   2873          
   2874            endpoint = *pBuf++;
   2875            groupID = osal_build_uint16( pBuf );
   2876          
   2877            pGroup = aps_FindGroup( endpoint, groupID );
   2878            if ( pGroup  )
   2879            {
   2880              buf[0] = ZSuccess;
   2881              buf[1] = LO_UINT16( pGroup->ID );
   2882              buf[2] = HI_UINT16( pGroup->ID );
   2883              buf[3] = pGroup->name[0];
   2884              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2885            }
   2886            else
   2887            {
   2888              buf[0] = ZFailure;
   2889            }
   2890          
   2891            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2892                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   2893          }
   2894          
   2895          /***************************************************************************************************
   2896           * @fn          MT_ZdoExtAddGroup
   2897           *
   2898           * @brief       Handle the ZDO extension Add Group message
   2899           *
   2900           * @param       pBuf - Pointer to the received message data.
   2901           *
   2902           * @return      NULL
   2903           ***************************************************************************************************/
   2904          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2905          {
   2906            ZStatus_t status = ZSuccess;
   2907            aps_Group_t group = {0};
   2908            uint8 endpoint;
   2909          
   2910            pBuf += MT_RPC_FRAME_HDR_SZ;
   2911          
   2912            endpoint = *pBuf++;
   2913            group.ID = osal_build_uint16( pBuf );
   2914            group.name[0] = pBuf[2];
   2915            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2916            {
   2917              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2918            }
   2919          
   2920            if (group.name[0] > 0 )
   2921            {
   2922              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2923            }
   2924          
   2925            status = aps_AddGroup( endpoint, &group );
   2926          
   2927            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2928                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2929          }
   2930          
   2931          /***************************************************************************************************
   2932           * @fn          MT_ZdoExtCountAllGroups
   2933           *
   2934           * @brief       Handle the ZDO extension Count All Groups message
   2935           *
   2936           * @param       pBuf - Pointer to the received message data.
   2937           *
   2938           * @return      NULL
   2939           ***************************************************************************************************/
   2940          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2941          {
   2942            ZStatus_t status = 0;
   2943          
   2944            pBuf += MT_RPC_FRAME_HDR_SZ;
   2945          
   2946            status = (ZStatus_t)aps_CountAllGroups();
   2947          
   2948            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2949                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2950          }
   2951          
   2952          
   2953          /***************************************************************************************************
   2954           * @fn          MT_ZdoExtRxIdle
   2955           *
   2956           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
   2957           *
   2958           * @param       pBuf - Pointer to the received message data.
   2959           *
   2960           * @return      NULL
   2961           ***************************************************************************************************/
   2962          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2963          {
   2964            uint8 setFlag;
   2965            uint8 setValue;
   2966          
   2967            pBuf += MT_RPC_FRAME_HDR_SZ;
   2968          
   2969            setFlag = *pBuf++;
   2970            setValue = *pBuf++;
   2971          
   2972            if ( setFlag )
   2973            {
   2974              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2975            }
   2976            else
   2977            {
   2978              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2979            }
   2980          
   2981            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2982                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2983          }
   2984          
   2985          /***************************************************************************************************
   2986           * @fn          MT_ZdoExtNwkInfo
   2987           *
   2988           * @brief       Handle the ZDO extension Network Info Request message
   2989           *
   2990           * @param       pBuf - Pointer to the received message data.
   2991           *
   2992           * @return      NULL
   2993           ***************************************************************************************************/
   2994          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   2995          {
   2996            uint8 buf[24];
   2997            uint8 *pMsg;
   2998          
   2999            pMsg = buf;
   3000          
   3001            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   3002            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   3003          
   3004            *pMsg++ = devState;
   3005            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   3006            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   3007            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   3008            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   3009            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   3010            pMsg += 8;
   3011            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   3012            pMsg += 8;
   3013            *pMsg++ = _NIB.nwkLogicalChannel;
   3014          
   3015            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3016                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   3017          }
   3018          
   3019          /***************************************************************************************************
   3020           * @fn          MT_ZdoExtSecApsRemoveReq
   3021           *
   3022           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   3023           *
   3024           * @param       pBuf - Pointer to the received message data.
   3025           *
   3026           * @return      NULL
   3027           ***************************************************************************************************/
   3028          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   3029          {
   3030            ZStatus_t status = 0;
   3031            uint16 parentAddr;
   3032            uint16 nwkAddr;
   3033          
   3034            pBuf += MT_RPC_FRAME_HDR_SZ;
   3035          
   3036            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   3037            {
   3038              parentAddr = osal_build_uint16( pBuf );
   3039              pBuf += 2;
   3040          
   3041              nwkAddr = osal_build_uint16( pBuf );
   3042              pBuf += 2;
   3043          
   3044              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   3045            }
   3046            else
   3047            {
   3048              status = ZUnsupportedMode;
   3049            }
   3050          
   3051            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3052                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3053          }
   3054          
   3055          /***************************************************************************************************
   3056           * @fn          MT_ZdoExtSetParams
   3057           *
   3058           * @brief       Set Parameters not settable through NV.
   3059           *
   3060           * @param       pBuf - Pointer to the received message data.
   3061           *
   3062           * @return      NULL
   3063           ***************************************************************************************************/
   3064          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3065          {
   3066            ZStatus_t status = ZSuccess;
   3067            uint8 useMultiCast;
   3068          
   3069            pBuf += MT_RPC_FRAME_HDR_SZ;
   3070          
   3071            // Is the useMulticast in this message
   3072            useMultiCast = *pBuf++;
   3073            if ( useMultiCast & 0x80 )
   3074            {
   3075              if ( useMultiCast & 0x7F )
   3076              {
   3077                _NIB.nwkUseMultiCast = TRUE;
   3078              }
   3079              else
   3080              {
   3081                _NIB.nwkUseMultiCast = FALSE;
   3082              }
   3083            }
   3084          
   3085            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3086                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3087          }
   3088          #endif // MT_ZDO_EXTENSIONS
   3089          
   3090          #endif   /*ZDO Command Processing in MT*/
   3091          /***************************************************************************************************
   3092          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1     96   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> osal_build_uint16
        0     35   -> sAddrExtCpy
      1     58   MT_ZdoCommandProcessing
        0     53   -> MT_BuildAndSendZToolResponse
        0     53   -> MT_ZdoBindRequest
        0     53   -> MT_ZdoEndDevBindRequest
        0     53   -> MT_ZdoMatchDescRequest
        0     53   -> MT_ZdoMgmtNwkUpdateRequest
        0     53   -> MT_ZdoNwkAddrOfInterestReq
        0     53   -> MT_ZdoSendData
        0     53   -> MT_ZdoUnbindRequest
        0     57   -> ZDApp_JoinReq
        0     53   -> ZDApp_NetworkDiscoveryReq
        0     53   -> ZDApp_SetRejoinBackoffDuration
        0     53   -> ZDApp_SetRejoinScanDuration
        0     53   -> ZDO_RegisterForZDOMsg
        0     53   -> ZDO_RegisterForZdoCB
        0     53   -> ZDO_RemoveRegisteredCB
        0     54   -> ZDP_DeviceAnnce
        0     53   -> ZDP_IEEEAddrReq
        0     54   -> ZDP_MgmtDirectJoinReq
        0     55   -> ZDP_MgmtLeaveReq
        0     57   -> ZDP_MgmtNwkDiscReq
        0     53   -> ZDP_MgmtPermitJoinReq
        0     54   -> ZDP_NWKAddrOfInterestReq
        0     53   -> ZDP_NwkAddrReq
        0     58   -> ZDP_SendData
        0     53   -> ZDP_ServerDiscReq
        0     54   -> ZDP_SimpleDescReq
        0     55   -> ZDP_UserDescSet
        0     53   -> bdb_StartCommissioning
        0     53   -> osal_build_uint16
        0     53   -> osal_build_uint32
        0     56   -> osal_memcpy
      1    152   MT_ZdoEndDevBindRequest
        0     90   -> MT_BuildAndSendZToolResponse
        0     99   -> ZDP_EndDeviceBindReq
        0     90   -> osal_build_uint16
      0      0   MT_ZdoInit
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1    153   MT_ZdoMatchDescRequest
        0     92   -> MT_BuildAndSendZToolResponse
        0    100   -> ZDP_MatchDescReq
        0     92   -> osal_build_uint16
      1     89   MT_ZdoMgmtNwkUpdateRequest
        0     30   -> MT_BuildAndSendZToolResponse
        0     36   -> ZDP_MgmtNwkUpdateReq
        0     30   -> osal_build_uint16
        0     30   -> osal_build_uint32
      1     78   MT_ZdoNwkAddrOfInterestReq
        0     24   -> MT_BuildAndSendZToolResponse
        0     25   -> ZDP_NWKAddrOfInterestReq
        0     24   -> osal_build_uint16
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      1     83   MT_ZdoSendData
        0     25   -> MT_BuildAndSendZToolResponse
        0     30   -> ZDP_SendData
        0     25   -> osal_build_uint16
      1     22   MT_ZdoSendMsgCB
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     96   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> osal_build_uint16
        0     35   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??Subroutine62_0
       9  ??Subroutine63_0
      10  ??Subroutine64_0
       5  ??Subroutine65_0
       8  ??Subroutine66_0
       8  ??Subroutine67_0
       5  ??Subroutine68_0
       8  ?Subroutine0
      30  ?Subroutine1
       6  ?Subroutine10
       5  ?Subroutine11
      16  ?Subroutine12
      14  ?Subroutine13
       8  ?Subroutine14
       6  ?Subroutine15
       6  ?Subroutine16
      13  ?Subroutine17
       8  ?Subroutine18
       1  ?Subroutine19
       8  ?Subroutine2
      12  ?Subroutine20
      12  ?Subroutine21
       9  ?Subroutine22
       8  ?Subroutine23
      10  ?Subroutine24
      11  ?Subroutine25
       7  ?Subroutine26
       9  ?Subroutine27
       6  ?Subroutine28
      14  ?Subroutine29
       5  ?Subroutine3
       7  ?Subroutine30
      14  ?Subroutine31
       6  ?Subroutine32
      18  ?Subroutine33
       6  ?Subroutine34
      11  ?Subroutine35
      10  ?Subroutine36
       7  ?Subroutine37
      10  ?Subroutine38
       3  ?Subroutine39
      10  ?Subroutine4
      16  ?Subroutine40
      16  ?Subroutine41
      13  ?Subroutine42
       9  ?Subroutine43
      14  ?Subroutine44
      12  ?Subroutine45
       4  ?Subroutine46
       7  ?Subroutine47
       4  ?Subroutine48
       4  ?Subroutine49
      37  ?Subroutine5
       6  ?Subroutine50
      12  ?Subroutine51
       9  ?Subroutine52
      10  ?Subroutine53
      12  ?Subroutine54
       6  ?Subroutine55
      12  ?Subroutine56
      13  ?Subroutine57
      18  ?Subroutine58
       6  ?Subroutine59
      15  ?Subroutine6
       2  ?Subroutine60
      10  ?Subroutine61
       5  ?Subroutine7
       5  ?Subroutine8
      13  ?Subroutine9
     379  MT_ZdoBeaconIndCB
     139  MT_ZdoBindRequest
    1696  MT_ZdoCommandProcessing
     285  MT_ZdoEndDevBindRequest
       3  MT_ZdoInit
     114  MT_ZdoJoinCnfCB
     263  MT_ZdoMatchDescRequest
     203  MT_ZdoMgmtNwkUpdateRequest
     150  MT_ZdoNwkAddrOfInterestReq
      43  MT_ZdoNwkDiscoveryCnfCB
     205  MT_ZdoSendData
     195  MT_ZdoSendMsgCB
     142  MT_ZdoUnbindRequest
       4  _zdoCallbackSub
       1  ignoreIndication
       2  pBeaconIndBuf
      78  -- Other

 
 4 492 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_Z
 
    78 bytes of CODE     memory
 4 492 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
