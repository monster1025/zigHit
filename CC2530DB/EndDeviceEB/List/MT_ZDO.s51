///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.30.1.6000 for 8051              16/Mar/2020  15:19:22
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Texas Instruments\Z-Stack 3.0.1\Components\mt\MT_ZDO.c
//    Command line       =  
//        -f C:\Users\monster\AppData\Local\Temp\EW1A8C.tmp ("C:\Texas
//        Instruments\Z-Stack 3.0.1\Components\mt\MT_ZDO.c" -D NV_INIT -D
//        xNV_RESTORE -D TC_LINKKEY_JOIN -D ZBA_FALLBACK_NWKKEY -D
//        xPOWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC
//        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_MGMT -D xZCL_EZMODE -D
//        MT_APP_CNF_FUNC -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D
//        ZCL_DISCOVER -D ZCL_WRITE -D ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY
//        -D ZCL_ON_OFF -D ZCL_GROUPS -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS
//        -D HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE
//        -D BDB_REPORTING -lC "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List"
//        -lA "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
//        Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=MAX_CHANNELS_24GHZ -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DMAC_MAX_FRAME_SIZE=116
//        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
//        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
//        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\" -I "C:\Texas
//        Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\Source\" -I
//        "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Russian_RUS.1251
//    List file          =  
//        C:\Texas Instruments\Z-Stack
//        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List\MT_ZDO.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??MT_ZdoBeaconIndCB::?relay`
        FUNCTION `??MT_ZdoBeaconIndCB::?relay`,0203H
        FUNCTION `??MT_ZdoBindRequest::?relay`,0203H
        PUBLIC `??MT_ZdoCommandProcessing::?relay`
        FUNCTION `??MT_ZdoCommandProcessing::?relay`,0203H
        FUNCTION `??MT_ZdoEndDevBindRequest::?relay`,0203H
        PUBLIC `??MT_ZdoInit::?relay`
        FUNCTION `??MT_ZdoInit::?relay`,0203H
        PUBLIC `??MT_ZdoJoinCnfCB::?relay`
        FUNCTION `??MT_ZdoJoinCnfCB::?relay`,0203H
        FUNCTION `??MT_ZdoMatchDescRequest::?relay`,0203H
        FUNCTION `??MT_ZdoMgmtNwkUpdateRequest::?relay`,0203H
        FUNCTION `??MT_ZdoNwkAddrOfInterestReq::?relay`,0203H
        PUBLIC `??MT_ZdoNwkDiscoveryCnfCB::?relay`
        FUNCTION `??MT_ZdoNwkDiscoveryCnfCB::?relay`,0203H
        FUNCTION `??MT_ZdoSendData::?relay`,0203H
        PUBLIC `??MT_ZdoSendMsgCB::?relay`
        FUNCTION `??MT_ZdoSendMsgCB::?relay`,0203H
        FUNCTION `??MT_ZdoUnbindRequest::?relay`,0203H
        PUBLIC MT_ZdoBeaconIndCB
        FUNCTION MT_ZdoBeaconIndCB,0a1603H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION MT_ZdoBindRequest,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC MT_ZdoCommandProcessing
        FUNCTION MT_ZdoCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 58, STACK
        FUNCTION MT_ZdoEndDevBindRequest,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 99, STACK
        PUBLIC MT_ZdoInit
        FUNCTION MT_ZdoInit,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_ZdoJoinCnfCB
        FUNCTION MT_ZdoJoinCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION MT_ZdoMatchDescRequest,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 100, STACK
        FUNCTION MT_ZdoMgmtNwkUpdateRequest,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION MT_ZdoNwkAddrOfInterestReq,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MT_ZdoNwkDiscoveryCnfCB
        FUNCTION MT_ZdoNwkDiscoveryCnfCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION MT_ZdoSendData,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC MT_ZdoSendMsgCB
        FUNCTION MT_ZdoSendMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION MT_ZdoUnbindRequest,0a1203H
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC _zdoCallbackSub
        PUBLIC ignoreIndication
        PUBLIC pBeaconIndBuf
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_SetRejoinBackoffDuration SYMBOL "ZDApp_SetRejoinBackoffDuration"
`??ZDApp_SetRejoinBackoffDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinBackoffDuration
ZDApp_SetRejoinScanDuration SYMBOL "ZDApp_SetRejoinScanDuration"
`??ZDApp_SetRejoinScanDuration::?relay` SYMBOL "?relay", ZDApp_SetRejoinScanDuration
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_RemoveRegisteredCB SYMBOL "ZDO_RemoveRegisteredCB"
`??ZDO_RemoveRegisteredCB::?relay` SYMBOL "?relay", ZDO_RemoveRegisteredCB
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
`??ZDP_EndDeviceBindReq::?relay` SYMBOL "?relay", ZDP_EndDeviceBindReq
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
`??ZDP_IEEEAddrReq::?relay` SYMBOL "?relay", ZDP_IEEEAddrReq
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
`??ZDP_MatchDescReq::?relay` SYMBOL "?relay", ZDP_MatchDescReq
ZDP_MgmtDirectJoinReq SYMBOL "ZDP_MgmtDirectJoinReq"
`??ZDP_MgmtDirectJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtDirectJoinReq
ZDP_MgmtLeaveReq    SYMBOL "ZDP_MgmtLeaveReq"
`??ZDP_MgmtLeaveReq::?relay` SYMBOL "?relay", ZDP_MgmtLeaveReq
ZDP_MgmtNwkDiscReq  SYMBOL "ZDP_MgmtNwkDiscReq"
`??ZDP_MgmtNwkDiscReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkDiscReq
ZDP_MgmtNwkUpdateReq SYMBOL "ZDP_MgmtNwkUpdateReq"
`??ZDP_MgmtNwkUpdateReq::?relay` SYMBOL "?relay", ZDP_MgmtNwkUpdateReq
ZDP_MgmtPermitJoinReq SYMBOL "ZDP_MgmtPermitJoinReq"
`??ZDP_MgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDP_MgmtPermitJoinReq
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
`??ZDP_NWKAddrOfInterestReq::?relay` SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscReq   SYMBOL "ZDP_ServerDiscReq"
`??ZDP_ServerDiscReq::?relay` SYMBOL "?relay", ZDP_ServerDiscReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
`??ZDP_SimpleDescReq::?relay` SYMBOL "?relay", ZDP_SimpleDescReq
ZDP_UserDescSet     SYMBOL "ZDP_UserDescSet"
`??ZDP_UserDescSet::?relay` SYMBOL "?relay", ZDP_UserDescSet
bdb_StartCommissioning SYMBOL "bdb_StartCommissioning"
`??bdb_StartCommissioning::?relay` SYMBOL "?relay", bdb_StartCommissioning
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
MT_ZdoBeaconIndCB   SYMBOL "MT_ZdoBeaconIndCB"
`??MT_ZdoBeaconIndCB::?relay` SYMBOL "?relay", MT_ZdoBeaconIndCB
MT_ZdoCommandProcessing SYMBOL "MT_ZdoCommandProcessing"
`??MT_ZdoCommandProcessing::?relay` SYMBOL "?relay", MT_ZdoCommandProcessing
MT_ZdoInit          SYMBOL "MT_ZdoInit"
`??MT_ZdoInit::?relay` SYMBOL "?relay", MT_ZdoInit
MT_ZdoJoinCnfCB     SYMBOL "MT_ZdoJoinCnfCB"
`??MT_ZdoJoinCnfCB::?relay` SYMBOL "?relay", MT_ZdoJoinCnfCB
MT_ZdoNwkDiscoveryCnfCB SYMBOL "MT_ZdoNwkDiscoveryCnfCB"
`??MT_ZdoNwkDiscoveryCnfCB::?relay` SYMBOL "?relay", MT_ZdoNwkDiscoveryCnfCB
MT_ZdoSendMsgCB     SYMBOL "MT_ZdoSendMsgCB"
`??MT_ZdoSendMsgCB::?relay` SYMBOL "?relay", MT_ZdoSendMsgCB

        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,00H
        EXTERN `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,00H
        EXTERN `??ZDApp_SetRejoinBackoffDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinBackoffDuration::?relay`,00H
        EXTERN `??ZDApp_SetRejoinScanDuration::?relay`
        FUNCTION `??ZDApp_SetRejoinScanDuration::?relay`,00H
        EXTERN `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,00H
        EXTERN `??ZDO_RemoveRegisteredCB::?relay`
        FUNCTION `??ZDO_RemoveRegisteredCB::?relay`,00H
        EXTERN `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_EndDeviceBindReq::?relay`
        FUNCTION `??ZDP_EndDeviceBindReq::?relay`,00H
        EXTERN `??ZDP_IEEEAddrReq::?relay`
        FUNCTION `??ZDP_IEEEAddrReq::?relay`,00H
        EXTERN `??ZDP_MatchDescReq::?relay`
        FUNCTION `??ZDP_MatchDescReq::?relay`,00H
        EXTERN `??ZDP_MgmtDirectJoinReq::?relay`
        FUNCTION `??ZDP_MgmtDirectJoinReq::?relay`,00H
        EXTERN `??ZDP_MgmtLeaveReq::?relay`
        FUNCTION `??ZDP_MgmtLeaveReq::?relay`,00H
        EXTERN `??ZDP_MgmtNwkDiscReq::?relay`
        FUNCTION `??ZDP_MgmtNwkDiscReq::?relay`,00H
        EXTERN `??ZDP_MgmtNwkUpdateReq::?relay`
        FUNCTION `??ZDP_MgmtNwkUpdateReq::?relay`,00H
        EXTERN `??ZDP_MgmtPermitJoinReq::?relay`
        FUNCTION `??ZDP_MgmtPermitJoinReq::?relay`,00H
        EXTERN `??ZDP_NWKAddrOfInterestReq::?relay`
        FUNCTION `??ZDP_NWKAddrOfInterestReq::?relay`,00H
        EXTERN `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,00H
        EXTERN `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,00H
        EXTERN `??ZDP_ServerDiscReq::?relay`
        FUNCTION `??ZDP_ServerDiscReq::?relay`,00H
        EXTERN `??ZDP_SimpleDescReq::?relay`
        FUNCTION `??ZDP_SimpleDescReq::?relay`,00H
        EXTERN `??ZDP_UserDescSet::?relay`
        FUNCTION `??ZDP_UserDescSet::?relay`,00H
        EXTERN `??bdb_StartCommissioning::?relay`
        FUNCTION `??bdb_StartCommissioning::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SetRejoinBackoffDuration
        FUNCTION ZDApp_SetRejoinBackoffDuration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_SetRejoinScanDuration
        FUNCTION ZDApp_SetRejoinScanDuration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RemoveRegisteredCB
        FUNCTION ZDO_RemoveRegisteredCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtDirectJoinReq
        FUNCTION ZDP_MgmtDirectJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtLeaveReq
        FUNCTION ZDP_MgmtLeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkDiscReq
        FUNCTION ZDP_MgmtNwkDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkUpdateReq
        FUNCTION ZDP_MgmtNwkUpdateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtPermitJoinReq
        FUNCTION ZDP_MgmtPermitJoinReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscReq
        FUNCTION ZDP_ServerDiscReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDP_UserDescSet
        FUNCTION ZDP_UserDescSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN bdb_StartCommissioning
        FUNCTION bdb_StartCommissioning,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// C:\Texas Instruments\Z-Stack 3.0.1\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
//    4   Revision:       $Revision: 42371 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 **************************************************************************************************/
//   38 
//   39 #ifdef MT_ZDO_FUNC
//   40 
//   41 /**************************************************************************************************
//   42  * INCLUDES
//   43  **************************************************************************************************/
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "OSAL_Nv.h"
//   47 #include "MT.h"
//   48 #include "MT_ZDO.h"
//   49 #include "AddrMgr.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 #include "OnBoard.h"
//   56 #include "aps_groups.h"
//   57 #include "bdb_interface.h"
//   58 
//   59 #if defined ( MT_ZDO_EXTENSIONS )
//   60   #include "rtg.h"
//   61 #endif
//   62 #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
//   63   #include "ZDSecMgr.h"
//   64 #endif
//   65 
//   66 #include "nwk_util.h"
//   67 
//   68 /**************************************************************************************************
//   69  * CONSTANTS
//   70  **************************************************************************************************/
//   71 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   72 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   73 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   74 #define MT_ZDO_BEACON_IND_LEN             21
//   75 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   76 #define MT_ZDO_JOIN_CNF_LEN               5
//   77 
//   78 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   79 // sizeof(zdoConcentratorInd_t) is not usable.
//   80 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   81 
//   82 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   83 
//   84 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   85 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   86 
//   87 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   88 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   89 
//   90 #define MT_ZDO_STATUS_LEN   1
//   91 
//   92 #if defined ( MT_ZDO_EXTENSIONS )
//   93 typedef struct
//   94 {
//   95   uint16            ami;
//   96   uint16            keyNvId;   // index to the Link Key table in NV
//   97   ZDSecMgr_Authentication_Option authenticateOption;
//   98 } ZDSecMgrEntry_t;
//   99 #endif  // MT_ZDO_EXTENSIONS
//  100 
//  101 /**************************************************************************************************
//  102  * GLOBAL VARIABLES
//  103  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  104 uint32 _zdoCallbackSub;
_zdoCallbackSub:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 uint8 *pBeaconIndBuf = NULL;
pBeaconIndBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  106 
//  107 /**************************************************************************************************
//  108  * LOCAL VARIABLES
//  109  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 bool ignoreIndication = FALSE;
ignoreIndication:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  111 
//  112 /**************************************************************************************************
//  113  * LOCAL FUNCTIONS
//  114  **************************************************************************************************/
//  115 #if defined (MT_ZDO_FUNC)
//  116 static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  117 static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  118 static void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  119 static void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  120 static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  121 static void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  122 static void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  123 static void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  124 static void MT_ZdoUserDescRequest(uint8 *pBuf);
//  125 static void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  126 static void MT_ZdoUserDescSet(uint8 *pBuf);
//  127 static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  128 static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  129 static void MT_ZdoBindRequest(uint8 *pBuf);
//  130 static void MT_ZdoUnbindRequest(uint8 *pBuf);
//  131 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  132 static void MT_ZdoSetLinkKey(uint8 *pBuf);
//  133 static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  134 static void MT_ZdoGetLinkKey(uint8 *pBuf);
//  135 #endif /* MT_SYS_KEY_MANAGEMENT */
//  136 static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  137 static void MT_ZdoJoinReq(uint8 *pBuf);
//  138 /* Call back function */
//  139 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  140 void *MT_ZdoBeaconIndCB ( void *pStr );
//  141 void *MT_ZdoJoinCnfCB ( void *pStr );
//  142 #if defined (MT_ZDO_MGMT)
//  143 static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  144 static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  145 static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  146 static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  147 static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  148 static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  149 static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  150 static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  151 #endif /* MT_ZDO_MGMT */
//  152 static void MT_ZdoSendData( uint8 *pBuf );
//  153 static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
//  154 static void MT_ZdoStartupFromApp(uint8 *pBuf);
//  155 static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  156 static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  157 static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
//  158 #endif /* MT_ZDO_FUNC */
//  159 
//  160 #if defined (MT_ZDO_CB_FUNC)
//  161 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  162 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  163 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  164 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  165 void* MT_ZdoSrcRtgCB( void *pStr );
//  166 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  167 static void *MT_ZdoLeaveInd(void *vPtr);
//  168 void *MT_ZdoTcDeviceInd( void *params );
//  169 void *MT_ZdoPermitJoinInd( void *duration );
//  170 #endif /* MT_ZDO_CB_FUNC */
//  171 
//  172 #if defined ( MT_ZDO_EXTENSIONS )
//  173 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  174 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
//  175 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
//  176 #endif // ZDO_COORDINATOR
//  177 static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
//  178 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
//  179 static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
//  180 static void MT_ZdoExtRouteDisc( uint8 *pBuf );
//  181 static void MT_ZdoExtRouteCheck( uint8 *pBuf );
//  182 static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
//  183 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
//  184 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
//  185 static void MT_ZdoExtFindGroup( uint8 *pBuf );
//  186 static void MT_ZdoExtAddGroup( uint8 *pBuf );
//  187 static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
//  188 static void MT_ZdoExtRxIdle( uint8 *pBuf );
//  189 static void MT_ZdoExtNwkInfo( uint8 *pBuf );
//  190 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
//  191 static void MT_ZdoExtSetParams( uint8 *pBuf );
//  192 extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  193 #endif // MT_ZDO_EXTENSIONS
//  194 
//  195 #if defined (MT_ZDO_FUNC)
//  196 /***************************************************************************************************
//  197  * @fn      MT_ZdoInit
//  198  *
//  199  * @brief   MT ZDO initialization
//  200  *
//  201  * @param   none
//  202  *
//  203  * @return  none
//  204  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  205 void MT_ZdoInit(void)
MT_ZdoInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_ZdoInit
        CODE
//  206 {
        ; Saved register size: 0
        ; Auto size: 0
//  207 #ifdef MT_ZDO_CB_FUNC
//  208   /* Register with ZDO for indication callbacks */
//  209   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  210   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
//  211   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
//  212   ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
//  213   ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
//  214 #endif
//  215 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//  216 
//  217 /***************************************************************************************************
//  218  * @fn      MT_ZdoCommandProcessing
//  219  *
//  220  * @brief
//  221  *
//  222  *   Process all the ZDO commands that are issued by test tool
//  223  *
//  224  * @param   pBuf - pointer to the msg buffer
//  225  *
//  226  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  227  *          |  1   |   1   |   1   |  0-255 |
//  228  *
//  229  * @return  status
//  230  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  231 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
MT_ZdoCommandProcessing:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
        CODE
//  232 {
        FUNCALL MT_ZdoCommandProcessing, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMatchDescRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_UserDescSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_ServerDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoEndDevBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoUnbindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_NetworkDiscoveryReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_JoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtNwkDiscReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 57, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 57, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 58, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 58, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtLeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtDirectJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDP_MgmtPermitJoinReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoMgmtNwkUpdateRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, bdb_StartCommissioning
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoSendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_ZdoNwkAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDO_RemoveRegisteredCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_SetRejoinScanDuration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, ZDApp_SetRejoinBackoffDuration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
//  233   uint8 status = MT_RPC_SUCCESS;
        MOV       ?V12,#0x0
//  234 
//  235   switch (pBuf[MT_RPC_POS_CMD1])
        MOV       A,R2
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        MOV       R4,DPL
        MOV       R5,DPH
        MOV       A,R2
        ADD       A,#0x3
        INC       R0
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,?V0
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_0 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_1 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_2 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_3 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_4 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_5 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_6 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_7 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_8 & 0xFFFF
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_9 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_10 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_11 & 0xFFFF
        ADD       A,#-0x14
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_12 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_13 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_14 & 0xFFFF
        ADD       A,#-0x4
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_15 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_16 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_17 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_18 & 0xFFFF
        ADD       A,#-0x7
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_19 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_20 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_21 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_22 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_23 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_24 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_25 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_26 & 0xFFFF
        ADD       A,#-0x7
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_27 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_28 & 0xFFFF
        DEC       A
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_29 & 0xFFFF
        ADD       A,#0x74
        JNZ       $+5
        LJMP      ??MT_ZdoCommandProcessing_30 & 0xFFFF
        LJMP      ??MT_ZdoCommandProcessing_31 & 0xFFFF
//  236   {
//  237 #if defined ( ZDO_NWKADDR_REQUEST )
//  238     case MT_ZDO_NWK_ADDR_REQ:
//  239       MT_ZdoNWKAddressRequest(pBuf);
??MT_ZdoCommandProcessing_0:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       R2
        INC       R2
        INC       R2
        MOV       A,R1
        MOV       R3,A
        MOV       A,R0
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV       R5,#0x0
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
        LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
//  240       break;
//  241 #endif
//  242 
//  243 #if defined ( ZDO_IEEEADDR_REQUEST )
//  244     case MT_ZDO_IEEE_ADDR_REQ:
//  245       MT_ZdoIEEEAddrRequest(pBuf);
??MT_ZdoCommandProcessing_1:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_34:
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
        LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
//  246       break;
//  247 #endif
//  248 
//  249 #if defined ( ZDO_NODEDESC_REQUEST )
//  250     case MT_ZDO_NODE_DESC_REQ:
//  251       MT_ZdoNodeDescRequest(pBuf);
??MT_ZdoCommandProcessing_2:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R1,#0x2
        LJMP      ??MT_ZdoCommandProcessing_33 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 53)
//  252       break;
//  253 #endif
//  254 
//  255 #if defined ( ZDO_POWERDESC_REQUEST )
//  256     case MT_ZDO_POWER_DESC_REQ:
//  257       MT_ZdoPowerDescRequest(pBuf);
??MT_ZdoCommandProcessing_3:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R1,#0x3
        MOV       A,R1
        LJMP      ??MT_ZdoCommandProcessing_34 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 53)
//  258       break;
//  259 #endif
//  260 
//  261 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  262     case MT_ZDO_SIMPLE_DESC_REQ:
//  263       MT_ZdoSimpleDescRequest(pBuf);
??MT_ZdoCommandProcessing_4:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_145:
        JNC       ??MT_ZdoCommandProcessing_35
        INC       R7
??MT_ZdoCommandProcessing_35:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_123:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
        LJMP      ??MT_ZdoCommandProcessing_36 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 53)
//  264       break;
//  265 #endif
//  266 
//  267 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  268     case MT_ZDO_ACTIVE_EP_REQ:
//  269       MT_ZdoActiveEpRequest(pBuf);
??MT_ZdoCommandProcessing_5:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R1,#0x5
        SJMP      ??MT_ZdoCommandProcessing_33
          CFI CFA_XSP16 add(XSP16, 53)
//  270       break;
//  271 #endif
//  272 
//  273 #if defined ( ZDO_MATCH_REQUEST )
//  274     case MT_ZDO_MATCH_DESC_REQ:
//  275       MT_ZdoMatchDescRequest(pBuf);
??MT_ZdoCommandProcessing_6:
        ; Setup parameters for call to function MT_ZdoMatchDescRequest
        LCALL     `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
//  276       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  277 #endif
//  278 
//  279 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  280     case MT_ZDO_COMPLEX_DESC_REQ:
//  281       MT_ZdoComplexDescRequest(pBuf);
??MT_ZdoCommandProcessing_7:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R1,#0x10
        SJMP      ??MT_ZdoCommandProcessing_33
          CFI CFA_XSP16 add(XSP16, 53)
//  282       break;
//  283 #endif
//  284 
//  285 #if defined ( ZDO_USERDESC_REQUEST )
//  286     case MT_ZDO_USER_DESC_REQ:
//  287       MT_ZdoUserDescRequest(pBuf);
??MT_ZdoCommandProcessing_8:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R1,#0x11
??MT_ZdoCommandProcessing_33:
        MOV       A,#0x3
??MT_ZdoCommandProcessing_34:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        SJMP      ??MT_ZdoCommandProcessing_36
          CFI CFA_XSP16 add(XSP16, 53)
//  288       break;
//  289 #endif
//  290 
//  291 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  292     case MT_ZDO_END_DEV_ANNCE:
//  293       MT_ZdoEndDevAnnce(pBuf);
??MT_ZdoCommandProcessing_9:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??MT_ZdoCommandProcessing_38
        INC       R7
??MT_ZdoCommandProcessing_38:
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        LCALL     `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
??MT_ZdoCommandProcessing_36:
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
//  294       break;
//  295 #endif
//  296 
//  297 #if defined ( ZDO_USERDESCSET_REQUEST )
//  298     case MT_ZDO_USER_DESC_SET:
//  299       MT_ZdoUserDescSet(pBuf);
??MT_ZdoCommandProcessing_10:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,?V0
        ADD       A,#0x2
        MOV       ?V0,A
        JNC       ??MT_ZdoCommandProcessing_39
        INC       ?V1
??MT_ZdoCommandProcessing_39:
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_163:
        MOV       R6,?V2
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_85:
        INC       DPTR
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        ; Setup parameters for call to function ZDP_UserDescSet
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 55)
        MOV       R1,#0x0
        MOV       A,R6
        MOV       R4,A
        MOV       R5,?V3
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
//  300       break;
//  301 #endif
//  302 
//  303 #if defined ( ZDO_SERVERDISC_REQUEST )
//  304     case MT_ZDO_SERVICE_DISC_REQ:
//  305       MT_ZdoServiceDiscRequest(pBuf);
??MT_ZdoCommandProcessing_11:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_113:
        ; Setup parameters for call to function ZDP_ServerDiscReq
        MOV       R1,#0x0
        LCALL     `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
        LJMP      ??MT_ZdoCommandProcessing_32 & 0xFFFF
//  306       break;
//  307 #endif
//  308 
//  309 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  310     case MT_ZDO_END_DEV_BIND_REQ:
//  311       MT_ZdoEndDevBindRequest(pBuf);
??MT_ZdoCommandProcessing_12:
        ; Setup parameters for call to function MT_ZdoEndDevBindRequest
        LCALL     `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
//  312       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  313 #endif
//  314 
//  315 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  316     case MT_ZDO_BIND_REQ:
//  317       MT_ZdoBindRequest(pBuf);
??MT_ZdoCommandProcessing_13:
        ; Setup parameters for call to function MT_ZdoBindRequest
        LCALL     `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
//  318       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  319 #endif
//  320 
//  321 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  322     case MT_ZDO_UNBIND_REQ:
//  323       MT_ZdoUnbindRequest(pBuf);
??MT_ZdoCommandProcessing_14:
        ; Setup parameters for call to function MT_ZdoUnbindRequest
        LCALL     `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
//  324       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  325 #endif
//  326 
//  327 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  328     case MT_ZDO_SET_LINK_KEY:
//  329       MT_ZdoSetLinkKey(pBuf);
//  330       break;
//  331 
//  332     case MT_ZDO_REMOVE_LINK_KEY:
//  333       MT_ZdoRemoveLinkKey(pBuf);
//  334       break;
//  335 
//  336     case MT_ZDO_GET_LINK_KEY:
//  337       MT_ZdoGetLinkKey(pBuf);
//  338       break;
//  339 #endif // MT_SYS_KEY_MANAGEMENT
//  340 
//  341 #if defined ( ZDO_MANUAL_JOIN )
//  342     case MT_ZDO_NWK_DISCOVERY_REQ:
//  343       MT_ZdoNetworkDiscoveryReq(pBuf);
??MT_ZdoCommandProcessing_15:
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_79:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
        MOV       R1,#0x2
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
        MOV       R1,#0x3
        SJMP      ??MT_ZdoCommandProcessing_40
//  344       break;
//  345 
//  346     case MT_ZDO_JOIN_REQ:
//  347       MT_ZdoJoinReq(pBuf);
??MT_ZdoCommandProcessing_16:
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_80:
        ; Setup parameters for call to function osal_build_uint16
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_165:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0xb
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        ; Setup parameters for call to function ZDApp_JoinReq
        MOV       A,R6
        ADD       A,#0xe
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,R6
        ADD       A,#0xd
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 55)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 57)
        MOV       A,R6
        ADD       A,#0x3
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       R2,?V2
        MOV       R3,?V3
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDO_RegisterForZdoCB
        MOV       R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
        MOV       R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
        MOV       R1,#0x4
??MT_ZdoCommandProcessing_40:
        LCALL     `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V0
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
//  348       break;
//  349 #endif
//  350 
//  351 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  352     case MT_ZDO_MGMT_NWKDISC_REQ:
//  353       MT_ZdoMgmtNwkDiscRequest(pBuf);
??MT_ZdoCommandProcessing_19:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_146:
        JNC       ??MT_ZdoCommandProcessing_42
        INC       R7
??MT_ZdoCommandProcessing_42:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       R2,A
        MOV       A,R7
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_96:
        ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 57)
        MOV       R5,#0x0
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
??MT_ZdoCommandProcessing_32:
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_155:
        MOV       A,R3
        LJMP      ??MT_ZdoCommandProcessing_43 & 0xFFFF
//  354       break;
//  355 #endif
//  356 
//  357 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  358     case MT_ZDO_MGMT_LQI_REQ:
//  359       MT_ZdoMgmtLqiRequest(pBuf);
??MT_ZdoCommandProcessing_20:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_52:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_87:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       ?V0,#0x31
        SJMP      ??MT_ZdoCommandProcessing_44
          CFI CFA_XSP16 add(XSP16, 53)
//  360       break;
//  361 #endif
//  362 
//  363 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  364     case MT_ZDO_MGMT_RTG_REQ:
//  365       MT_ZdoMgmtRtgRequest(pBuf);
??MT_ZdoCommandProcessing_21:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_53:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_88:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       ?V0,#0x32
??MT_ZdoCommandProcessing_44:
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 58)
        MOV       R1,#0x1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_131:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV       A,#0xb
??MT_ZdoCommandProcessing_43:
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        LJMP      ??MT_ZdoCommandProcessing_45 & 0xFFFF
//  366       break;
//  367 #endif
//  368 
//  369 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  370     case MT_ZDO_MGMT_BIND_REQ:
//  371       MT_ZdoMgmtBindRequest(pBuf);
??MT_ZdoCommandProcessing_22:
        MOV       ?V15,?V0
        INC       R6
        MOV       A,R1
        MOV       R7,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_54:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       ?V0,#0x33
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 58)
        MOV       R1,#0x1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_132:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_157:
        MOV       R2,?V15
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
//  372       break;
//  373 #endif
//  374 
//  375 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  376     case MT_ZDO_MGMT_LEAVE_REQ:
//  377       MT_ZdoMgmtLeaveRequest(pBuf);
??MT_ZdoCommandProcessing_23:
        MOV       ?V14,?V0
        INC       R6
        MOV       A,R1
        MOV       R7,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_50:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_147:
        JNC       ??MT_ZdoCommandProcessing_46
        INC       R7
??MT_ZdoCommandProcessing_46:
        ADD       A,#0x8
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.1
        JNC       ??MT_ZdoCommandProcessing_47
        SETB      B.0
        SJMP      ??MT_ZdoCommandProcessing_48
??MT_ZdoCommandProcessing_47:
        CLR       B.0
??MT_ZdoCommandProcessing_48:
        ; Setup parameters for call to function ZDP_MgmtLeaveReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        CLR       A
        RLC       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 55)
        MOV       C,B.0
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_158:
        MOV       R2,?V14
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
//  378       break;
//  379 #endif
//  380 
//  381 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  382     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  383       MT_ZdoMgmtDirectJoinRequest(pBuf);
??MT_ZdoCommandProcessing_24:
        MOV       ?V13,?V0
        INC       R6
        MOV       A,R1
        MOV       R7,A
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_148:
        JNC       ??MT_ZdoCommandProcessing_49
        INC       R7
??MT_ZdoCommandProcessing_49:
        ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtDirectJoinReq::?relay`; Banked call to: ZDP_MgmtDirectJoinReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_159:
        MOV       R2,?V13
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
//  384       break;
//  385 #endif
//  386 
//  387 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  388     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  389       MT_ZdoMgmtPermitJoinRequest(pBuf);
??MT_ZdoCommandProcessing_25:
        MOV       ?V7,?V0
        INC       R6
        MOV       A,R1
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x4
        JNZ       ??MT_ZdoCommandProcessing_50
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
        SJMP      ??MT_ZdoCommandProcessing_51
??MT_ZdoCommandProcessing_50:
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV       R6,DPL
        MOV       R7,DPH
??MT_ZdoCommandProcessing_51:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPTR,#ignoreIndication
        MOV       A,#0x1
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
        MOV       R5,#0x0
        INC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPTR,#ignoreIndication
        CLR       A
        LCALL     ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_161:
        MOV       R2,?V7
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
//  390       break;
//  391 #endif
//  392 
//  393 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  394     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  395       MT_ZdoMgmtNwkUpdateRequest(pBuf);
??MT_ZdoCommandProcessing_26:
        ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
        LCALL     `??MT_ZdoMgmtNwkUpdateRequest::?relay`; Banked call to: MT_ZdoMgmtNwkUpdateRequest
//  396       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  397 #endif
//  398 
//  399 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  400     case MT_ZDO_STARTUP_FROM_APP:
//  401       MT_ZdoStartupFromApp(pBuf);
??MT_ZdoCommandProcessing_29:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??MT_ZdoCommandProcessing_52
        MOVX      A,@DPTR
        XRL       A,#0x2
        JZ        ??MT_ZdoCommandProcessing_52
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??MT_ZdoCommandProcessing_53
??MT_ZdoCommandProcessing_52:
        ; Setup parameters for call to function bdb_StartCommissioning
        MOV       R1,#0x2
        LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
??MT_ZdoCommandProcessing_53:
        MOV       A,#-0x20
        ANL       A,?V0
        XRL       A,#0x20
        JZ        $+5
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       A,R6
??MT_ZdoCommandProcessing_45:
        MOV       R2,A
        LJMP      ??MT_ZdoCommandProcessing_41 & 0xFFFF
//  402       break;
//  403 #endif
//  404 
//  405     case MT_ZDO_SEND_DATA:
//  406       MT_ZdoSendData( pBuf );
??MT_ZdoCommandProcessing_17:
        ; Setup parameters for call to function MT_ZdoSendData
        LCALL     `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
//  407       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  408 
//  409     case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
//  410       MT_ZdoNwkAddrOfInterestReq( pBuf );
??MT_ZdoCommandProcessing_18:
        ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
        LCALL     `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
//  411       break;
        LJMP      ??MT_ZdoCommandProcessing_37 & 0xFFFF
//  412 
//  413     case MT_ZDO_MSG_CB_REGISTER:
//  414       MT_ZdoRegisterForZDOMsg(pBuf);
??MT_ZdoCommandProcessing_27:
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       ?V6,?V0
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,#-0x20
        ANL       A,R6
        XRL       A,#0x20
        JNZ       ??MT_ZdoCommandProcessing_37
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V6
        SJMP      ??MT_ZdoCommandProcessing_41
//  415       break;
//  416 
//  417     case MT_ZDO_MSG_CB_REMOVE:
//  418       MT_ZdoRemoveRegisteredCB(pBuf);
??MT_ZdoCommandProcessing_28:
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       ?V5,?V0
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL     `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       A,#-0x20
        ANL       A,R6
        XRL       A,#0x20
        JNZ       ??MT_ZdoCommandProcessing_37
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V5
        SJMP      ??MT_ZdoCommandProcessing_41
//  419       break;
//  420 
//  421     case MT_ZDO_SET_REJOIN_PARAMS:
//  422       MT_ZdoSetRejoinParameters(pBuf);
??MT_ZdoCommandProcessing_30:
        MOV       ?V4,?V0
        INC       R6
        MOV       A,R1
        MOV       R7,A
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        INC       R2
        INC       R2
        INC       R2
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_97:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       A,R6
        ADD       A,R1
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        ; Setup parameters for call to function ZDApp_SetRejoinScanDuration
        LCALL     `??ZDApp_SetRejoinScanDuration::?relay`; Banked call to: ZDApp_SetRejoinScanDuration
        ; Setup parameters for call to function ZDApp_SetRejoinBackoffDuration
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R4,?V2
        MOV       R5,?V3
        LCALL     `??ZDApp_SetRejoinBackoffDuration::?relay`; Banked call to: ZDApp_SetRejoinBackoffDuration
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        LCALL     ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_162:
        MOV       R2,?V4
??MT_ZdoCommandProcessing_41:
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  423       break;
        SJMP      ??MT_ZdoCommandProcessing_37
//  424 
//  425 #if defined ( MT_ZDO_EXTENSIONS )
//  426 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  427     case MT_ZDO_EXT_UPDATE_NWK_KEY:
//  428       MT_ZdoSecUpdateNwkKey( pBuf );
//  429       break;
//  430 
//  431     case MT_ZDO_EXT_SWITCH_NWK_KEY:
//  432       MT_ZdoSecSwitchNwkKey( pBuf );
//  433       break;
//  434 #endif // ZDO_COORDINATOR
//  435     case MT_ZDO_SEC_ADD_LINK_KEY:
//  436       MT_ZdoSecAddLinkKey( pBuf );
//  437       break;
//  438 
//  439     case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
//  440       MT_ZdoSecEntryLookupExt( pBuf );
//  441       break;
//  442 
//  443     case MT_ZDO_SEC_DEVICE_REMOVE:
//  444        MT_ZdoSecDeviceRemove( pBuf );
//  445        break;
//  446 
//  447     case MT_ZDO_EXT_ROUTE_DISC:
//  448        MT_ZdoExtRouteDisc( pBuf );
//  449        break;
//  450 
//  451     case MT_ZDO_EXT_ROUTE_CHECK:
//  452        MT_ZdoExtRouteCheck( pBuf );
//  453        break;
//  454 
//  455     case MT_ZDO_EXT_REMOVE_GROUP:
//  456       MT_ZdoExtRemoveGroup( pBuf );
//  457       break;
//  458 
//  459     case MT_ZDO_EXT_REMOVE_ALL_GROUP:
//  460       MT_ZdoExtRemoveAllGroup( pBuf );
//  461       break;
//  462 
//  463     case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
//  464       MT_ZdoExtFindAllGroupsEndpoint( pBuf );
//  465       break;
//  466 
//  467     case MT_ZDO_EXT_FIND_GROUP:
//  468       MT_ZdoExtFindGroup( pBuf );
//  469       break;
//  470 
//  471     case MT_ZDO_EXT_ADD_GROUP:
//  472       MT_ZdoExtAddGroup( pBuf );
//  473       break;
//  474 
//  475     case MT_ZDO_EXT_COUNT_ALL_GROUPS:
//  476       MT_ZdoExtCountAllGroups( pBuf );
//  477       break;
//  478 
//  479     case MT_ZDO_EXT_RX_IDLE:
//  480       MT_ZdoExtRxIdle( pBuf );
//  481       break;
//  482 
//  483     case MT_ZDO_EXT_NWK_INFO:
//  484       MT_ZdoExtNwkInfo( pBuf );
//  485       break;
//  486 
//  487     case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
//  488       MT_ZdoExtSecApsRemoveReq( pBuf );
//  489       break;
//  490 
//  491     case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
//  492       ZDApp_ForceConcentratorChange();
//  493       break;
//  494 
//  495     case MT_ZDO_EXT_SET_PARAMS:
//  496       MT_ZdoExtSetParams( pBuf );
//  497       break;
//  498 #endif  // MT_ZDO_EXTENSIONS
//  499 
//  500     default:
//  501       status = MT_RPC_ERR_COMMAND_ID;
??MT_ZdoCommandProcessing_31:
        MOV       ?V12,#0x2
//  502       break;
//  503   }
//  504 
//  505   return status;
??MT_ZdoCommandProcessing_37:
        MOV       R1,?V12
        MOV       A,#0x1d
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
//  506 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_131
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function MT_ZdoCommandProcessing
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV       R2,#ZDP_TransID & 0xff
        MOV       R3,#(ZDP_TransID >> 8) & 0xff
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_133
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_ZdoSendData
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function MT_ZdoCommandProcessing
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function MT_ZdoCommandProcessing
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 58)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV       A,#0x5
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_103
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function MT_ZdoCommandProcessing
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 54)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_ZdoCommandProcessing
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        INC       R2
        INC       R2
        INC       R2
        MOV       A,R1
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        ; Setup parameters for call to function ZDO_RemoveRegisteredCB
        MOV       DPTR,#MT_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MT_ZdoCommandProcessing
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_ZdoCommandProcessing
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_ZdoCommandProcessing
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function ZDP_SendData
        ; Setup parameters for call to function ZDP_SendData
        ; Setup parameters for call to function ZDP_SendData
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_ZdoCommandProcessing
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_117:
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       R6
        MOV       A,R1
        MOV       R7,A
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_ZdoCommandProcessing
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       R6
        MOV       A,R1
        MOV       R7,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_ZdoCommandProcessing
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_ZdoCommandProcessing
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_ZdoCommandProcessing
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_ZdoCommandProcessing
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_ZdoCommandProcessing
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_ZdoCommandProcessing
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_ZdoCommandProcessing
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_ZdoCommandProcessing
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       R6
        MOV       A,R1
        MOV       R7,A
        MOV       A,#0xa
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_ZdoCommandProcessing
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MT_ZdoCommandProcessing
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MT_ZdoCommandProcessing
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_ZdoCommandProcessing
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function MT_ZdoCommandProcessing
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function MT_ZdoCommandProcessing
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function MT_ZdoCommandProcessing
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_ZdoCommandProcessing
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_ZdoCommandProcessing
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_ZdoCommandProcessing
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_ZdoCommandProcessing
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOV       A,#0x2
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_114:
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_ZdoCommandProcessing
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_40
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-4
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function MT_ZdoCommandProcessing
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_41
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function MT_ZdoCommandProcessing
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_42
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-4
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function MT_ZdoCommandProcessing
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_43
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function MT_ZdoCommandProcessing
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_44
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond57) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond57) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond57) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function MT_ZdoCommandProcessing
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_45
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function MT_ZdoCommandProcessing
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_46
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function MT_ZdoCommandProcessing
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_47
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function MT_ZdoCommandProcessing
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_48
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function MT_ZdoCommandProcessing
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_49
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function MT_ZdoCommandProcessing
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_50
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function MT_ZdoCommandProcessing
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_114, ??CrossCallReturnLabel_51
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       A,R1
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_ZdoCommandProcessing
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 57)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function MT_ZdoCommandProcessing
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function MT_ZdoCommandProcessing
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_ZdoCommandProcessing
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function MT_ZdoCommandProcessing
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-2
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_152:
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        LCALL     ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_124:
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_123
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function MT_ZdoCommandProcessing
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_0
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function MT_ZdoCommandProcessing
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_1
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_ZdoCommandProcessing
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_2
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-4
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function MT_ZdoCommandProcessing
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_3
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function MT_ZdoCommandProcessing
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_4
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        LCALL     ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_137:
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function ZDP_SimpleDescReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
//  507 
//  508 /***************************************************************************************************
//  509  * @fn      MT_ZdoNwkAddrReq
//  510  *
//  511  * @brief   Handle a nwk address request.
//  512  *
//  513  * @param   pData  - MT message data
//  514  *
//  515  * @return  void
//  516  ***************************************************************************************************/
//  517 static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
//  518 {
//  519   uint8 cmdId;
//  520   uint8 retValue;
//  521   uint8 reqType;
//  522   uint8 startIndex;
//  523   uint8 *pExtAddr;
//  524 
//  525   /* parse header */
//  526   cmdId = pBuf[MT_RPC_POS_CMD1];
//  527   pBuf += MT_RPC_FRAME_HDR_SZ;
//  528 
//  529   /* parse parameters */
//  530   pExtAddr = pBuf;
//  531   pBuf += Z_EXTADDR_LEN;
//  532 
//  533   /* Request type */
//  534   reqType = *pBuf++;
//  535 
//  536   /* Start index */
//  537   startIndex = *pBuf;
//  538 
//  539   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
//  540 
//  541   /* Build and send back the response */
//  542   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  543 
//  544 #if defined ( MT_ZDO_EXTENSIONS )
//  545   {
//  546     // Force a response message if the ext address matches a child of this device
//  547     associated_devices_t *pAssoc;
//  548     uint8 buf[21];
//  549     uint8 *pBuf = buf;
//  550 
//  551     if ( (ZSTACK_ROUTER_BUILD)
//  552       && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
//  553              && (pAssoc->nodeRelation == CHILD_RFD)) )
//  554     {
//  555       uint16 nwkAddr = NLME_GetShortAddr();
//  556 
//  557       *pBuf++ = LO_UINT16(nwkAddr);
//  558       *pBuf++ = HI_UINT16(nwkAddr);
//  559       *pBuf++ = 0;
//  560       *pBuf++ = LO_UINT16(NWK_addr_rsp);
//  561       *pBuf++ = HI_UINT16(NWK_addr_rsp);
//  562       *pBuf++ = 0;
//  563       *pBuf++ = 0;
//  564       *pBuf++ = LO_UINT16(nwkAddr);
//  565       *pBuf++ = HI_UINT16(nwkAddr);
//  566 
//  567       *pBuf++ = ZSuccess;
//  568 
//  569       pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
//  570 
//  571       *pBuf++ = LO_UINT16( pAssoc->shortAddr );
//  572       *pBuf++ = HI_UINT16( pAssoc->shortAddr );
//  573       *pBuf = 0;
//  574 
//  575       MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
//  576                                   MT_ZDO_MSG_CB_INCOMING, 21, buf );
//  577     }
//  578   }
//  579 #endif
//  580 }
//  581 
//  582 /***************************************************************************************************
//  583  * @fn      MT_ZdoIEEEAddrRequest
//  584  *
//  585  * @brief   Handle a IEEE address request.
//  586  *
//  587  * @param   pData  - MT message data
//  588  *
//  589  * @return  void
//  590  ***************************************************************************************************/
//  591 static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
//  592 {
//  593   uint8 cmdId;
//  594   uint8 retValue;
//  595   uint16 shortAddr;
//  596   uint8 reqType;
//  597   uint8 startIndex;
//  598 
//  599   /* parse header */
//  600   cmdId = pBuf[MT_RPC_POS_CMD1];
//  601   pBuf += MT_RPC_FRAME_HDR_SZ;
//  602 
//  603   /* Dev address */
//  604   shortAddr = osal_build_uint16( pBuf );
//  605   pBuf += 2;
//  606 
//  607   /* request type */
//  608   reqType = *pBuf++;
//  609 
//  610   /* start index */
//  611   startIndex = *pBuf;
//  612 
//  613   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
//  614 
//  615   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  616 }
//  617 
//  618 /***************************************************************************************************
//  619  * @fn      MT_ZdoNodeDescRequest
//  620  *
//  621  * @brief   Handle a Node Descriptor request.
//  622  *
//  623  * @param   pData  - MT message data
//  624  *
//  625  * @return  void
//  626  ***************************************************************************************************/
//  627 static void MT_ZdoNodeDescRequest (uint8 *pBuf)
//  628 {
//  629   uint8 cmdId;
//  630   uint8 retValue;
//  631   zAddrType_t destAddr;
//  632   uint16 shortAddr;
//  633 
//  634   /* parse header */
//  635   cmdId = pBuf[MT_RPC_POS_CMD1];
//  636   pBuf += MT_RPC_FRAME_HDR_SZ;
//  637 
//  638   /* Destination address */
//  639   destAddr.addrMode = Addr16Bit;
//  640   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  641   pBuf += 2;
//  642 
//  643   /* Network address of interest */
//  644   shortAddr = osal_build_uint16( pBuf );
//  645 
//  646   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
//  647 
//  648   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  649 }
//  650 
//  651 /***************************************************************************************************
//  652  * @fn      MT_ZdoPowerDescRequest
//  653  *
//  654  * @brief   Handle a Power Descriptor request.
//  655  *
//  656  * @param   pData  - MT message data
//  657  *
//  658  * @return  void
//  659  ***************************************************************************************************/
//  660 static void MT_ZdoPowerDescRequest(uint8 *pBuf)
//  661 {
//  662   uint8 cmdId;
//  663   uint8 retValue;
//  664   zAddrType_t destAddr;
//  665   uint16 shortAddr;
//  666 
//  667   /* parse header */
//  668   cmdId = pBuf[MT_RPC_POS_CMD1];
//  669   pBuf += MT_RPC_FRAME_HDR_SZ;
//  670 
//  671   /* Dev address */
//  672   destAddr.addrMode = Addr16Bit;
//  673   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  674   pBuf += 2;
//  675 
//  676   /* Network address of interest */
//  677   shortAddr = osal_build_uint16( pBuf );
//  678 
//  679   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
//  680 
//  681   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  682 }
//  683 
//  684 /***************************************************************************************************
//  685  * @fn      MT_ZdoSimpleDescRequest
//  686  *
//  687  * @brief   Handle a Simple Descriptor request.
//  688  *
//  689  * @param   pBuf  - MT message data
//  690  *
//  691  * @return  void
//  692  ***************************************************************************************************/
//  693 static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
//  694 {
//  695   uint8 cmdId;
//  696   uint8 retValue;
//  697   uint8 epInt;
//  698   zAddrType_t destAddr;
//  699   uint16 shortAddr;
//  700 
//  701   /* parse header */
//  702   cmdId = pBuf[MT_RPC_POS_CMD1];
//  703   pBuf += MT_RPC_FRAME_HDR_SZ;
//  704 
//  705   /* Dev address */
//  706   destAddr.addrMode = Addr16Bit;
//  707   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  708   pBuf += 2;
//  709 
//  710   /* Network address of interest */
//  711   shortAddr = osal_build_uint16( pBuf );
//  712   pBuf += 2;
//  713 
//  714   /* endpoint/interface */
//  715   epInt = *pBuf;
//  716 
//  717   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
//  718 
//  719   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  720 }
//  721 
//  722 /***************************************************************************************************
//  723  * @fn      MT_ZdoActiveEpRequest
//  724  *
//  725  * @brief   Handle a Active EP request.
//  726  *
//  727  * @param   pBuf  - MT message data
//  728  *
//  729  * @return  void
//  730  ***************************************************************************************************/
//  731 static void MT_ZdoActiveEpRequest(uint8 *pBuf)
//  732 {
//  733   uint8 cmdId;
//  734   uint8 retValue;
//  735   zAddrType_t destAddr;
//  736   uint16 shortAddr;
//  737 
//  738   /* parse header */
//  739   cmdId = pBuf[MT_RPC_POS_CMD1];
//  740   pBuf += MT_RPC_FRAME_HDR_SZ;
//  741 
//  742   /* Dev address */
//  743   destAddr.addrMode = Addr16Bit;
//  744   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  745   pBuf += 2;
//  746 
//  747   /* Network address of interest */
//  748   shortAddr = osal_build_uint16( pBuf );
//  749 
//  750   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
//  751 
//  752   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  753 }
//  754 
//  755 /***************************************************************************************************
//  756  * @fn      MT_ZdoMatchDescRequest
//  757  *
//  758  * @brief   Handle a Match Descriptor request.
//  759  *
//  760  * @param   pBuf  - MT message data
//  761  *
//  762  * @return  void
//  763  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  764 static void MT_ZdoMatchDescRequest(uint8 *pBuf)
MT_ZdoMatchDescRequest:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
        CODE
//  765 {
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 100, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 100, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMatchDescRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV       A,#-0x12
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 74
        MOV       A,#-0x4a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        LCALL     ?Subroutine13 & 0xFFFF
//  766   uint8 cmdId;
//  767   uint8 retValue = 0;
//  768   uint8 i, numInClusters, numOutClusters;
//  769   uint16 profileId;
//  770   zAddrType_t destAddr;
//  771   uint16 shortAddr;
//  772   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  773 
//  774   /* parse header */
//  775   cmdId = pBuf[MT_RPC_POS_CMD1];
//  776   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_138:
        JNC       ??MT_ZdoMatchDescRequest_0
        INC       R7
//  777 
//  778   /* Dev address */
//  779   destAddr.addrMode = Addr16Bit;
??MT_ZdoMatchDescRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
//  780   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_66:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
//  781   pBuf += 2;
??CrossCallReturnLabel_149:
        JNC       ??MT_ZdoMatchDescRequest_1
        INC       R7
//  782 
//  783   /* Network address of interest */
//  784   shortAddr = osal_build_uint16( pBuf );
??MT_ZdoMatchDescRequest_1:
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine60 & 0xFFFF
//  785   pBuf += 2;
??CrossCallReturnLabel_135:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??MT_ZdoMatchDescRequest_2
        INC       R7
//  786 
//  787   /* Profile ID */
//  788   profileId = osal_build_uint16( pBuf );
??MT_ZdoMatchDescRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine58 & 0xFFFF
//  789   pBuf += 2;
//  790 
//  791   /* NumInClusters */
//  792   numInClusters = *pBuf++;
??CrossCallReturnLabel_125:
        MOV       ?V6,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoMatchDescRequest_3
        INC       R7
//  793   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
??MT_ZdoMatchDescRequest_3:
        MOV       A,?V6
        CLR       C
        SUBB      A,#0x11
        JNC       ??MT_ZdoMatchDescRequest_4
//  794   {
//  795     /* IN clusters */
//  796     for ( i = 0; i < numInClusters; i++ )
        MOV       ?V3,#0x0
??MT_ZdoMatchDescRequest_5:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V6
        JNC       ??MT_ZdoMatchDescRequest_6
//  797     {
//  798       inClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine40 & 0xFFFF
//  799       pBuf += 2;
//  800     }
??CrossCallReturnLabel_92:
        MOV       A,#0x2a
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_141:
        JNC       ??MT_ZdoMatchDescRequest_7
        INC       R7
??MT_ZdoMatchDescRequest_7:
        INC       ?V3
        SJMP      ??MT_ZdoMatchDescRequest_5
//  801   }
//  802   else
//  803   {
//  804     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        MOVX      @DPTR,A
//  805   }
//  806 
//  807   /* NumOutClusters */
//  808   numOutClusters = *pBuf++;
??MT_ZdoMatchDescRequest_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V7,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
//  809   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
        CLR       C
        SUBB      A,#0x11
        JNC       ??MT_ZdoMatchDescRequest_8
//  810   {
//  811     /* OUT Clusters */
//  812     for ( i = 0; i < numOutClusters; i++ )
        MOV       ?V3,#0x0
??MT_ZdoMatchDescRequest_9:
        MOV       A,?V3
        CLR       C
        SUBB      A,?V7
        JNC       ??MT_ZdoMatchDescRequest_10
//  813     {
//  814       outClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine40 & 0xFFFF
//  815       pBuf += 2;
//  816     }
??CrossCallReturnLabel_93:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_142:
        JNC       ??MT_ZdoMatchDescRequest_11
        INC       R7
??MT_ZdoMatchDescRequest_11:
        INC       ?V3
        SJMP      ??MT_ZdoMatchDescRequest_9
//  817   }
//  818   else
//  819   {
//  820     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoMatchDescRequest_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        SJMP      ??MT_ZdoMatchDescRequest_12
//  821   }
//  822 
//  823   if ( retValue == 0 )
??MT_ZdoMatchDescRequest_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoMatchDescRequest_13
//  824   {
//  825     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  826                                        inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV       ?V3,#0x0
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 95)
        MOV       A,?V7
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 96)
        MOV       A,#0x2e
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 98)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 100)
        MOV       R1,?V6
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoMatchDescRequest_12:
        MOVX      @DPTR,A
//  827   }
//  828 
//  829   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMatchDescRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  830 }
        MOV       A,#0x4a
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R7,#0xa
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine60:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_90
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_91
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOV       R2,A
        MOV       A,R7
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_123
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_ZdoCommandProcessing
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_0
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-6
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function MT_ZdoCommandProcessing
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_1
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-6
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function MT_ZdoCommandProcessing
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_2
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-6
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function MT_ZdoCommandProcessing
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_3
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-6
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function MT_ZdoCommandProcessing
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_4
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-6
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function MT_ZdoMatchDescRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_90
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_91
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V0,R2
        MOV       ?V1,R3
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function MT_ZdoMatchDescRequest
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       R0,?V3
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function MT_ZdoNwkAddrOfInterestReq
          CFI Conditional ??CrossCallReturnLabel_140
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function MT_ZdoMatchDescRequest
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R6,A
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106
//  831 
//  832 /***************************************************************************************************
//  833  * @fn      MT_ZdoComplexDescRequest
//  834  *
//  835  * @brief   Handle a Complex Descriptor request.
//  836  *
//  837  * @param   pBuf  - MT message data
//  838  *
//  839  * @return  void
//  840  ***************************************************************************************************/
//  841 static void MT_ZdoComplexDescRequest(uint8 *pBuf)
//  842 {
//  843   uint8 cmdId;
//  844   uint8 retValue;
//  845   zAddrType_t destAddr;
//  846   uint16 shortAddr;
//  847 
//  848   /* parse header */
//  849   cmdId = pBuf[MT_RPC_POS_CMD1];
//  850   pBuf += MT_RPC_FRAME_HDR_SZ;
//  851 
//  852   /* Dev address */
//  853   destAddr.addrMode = Addr16Bit;
//  854   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  855   pBuf += 2;
//  856 
//  857   /* Network address of interest */
//  858   shortAddr = osal_build_uint16( pBuf );
//  859 
//  860   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
//  861 
//  862   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  863 }
//  864 
//  865 /***************************************************************************************************
//  866  * @fn      MT_ZdoUserDescRequest
//  867  *
//  868  * @brief   Handle a User Descriptor request.
//  869  *
//  870  * @param   pBuf  - MT message data
//  871  *
//  872  * @return  void
//  873  ***************************************************************************************************/
//  874 static void MT_ZdoUserDescRequest(uint8 *pBuf)
//  875 {
//  876   uint8 cmdId;
//  877   uint8 retValue;
//  878   zAddrType_t destAddr;
//  879   uint16 shortAddr;
//  880 
//  881   /* parse header */
//  882   cmdId = pBuf[MT_RPC_POS_CMD1];
//  883   pBuf += MT_RPC_FRAME_HDR_SZ;
//  884 
//  885   /* Dev address */
//  886   destAddr.addrMode = Addr16Bit;
//  887   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  888   pBuf += 2;
//  889 
//  890   /* Network address of interest */
//  891   shortAddr = osal_build_uint16( pBuf );
//  892 
//  893   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
//  894 
//  895   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  896 }
//  897 
//  898 /***************************************************************************************************
//  899  * @fn      MT_ZdoEndDevAnnce
//  900  *
//  901  * @brief   Handle a End Device Announce Descriptor request.
//  902  *
//  903  * @param   pBuf  - MT message data
//  904  *
//  905  * @return  void
//  906  ***************************************************************************************************/
//  907 static void MT_ZdoEndDevAnnce(uint8 *pBuf)
//  908 {
//  909   uint8 cmdId;
//  910   uint8 retValue;
//  911   uint16 shortAddr;
//  912   uint8 *pIEEEAddr;
//  913 
//  914   /* parse header */
//  915   cmdId = pBuf[MT_RPC_POS_CMD1];
//  916   pBuf += MT_RPC_FRAME_HDR_SZ;
//  917 
//  918   /* network address */
//  919   shortAddr = osal_build_uint16( pBuf );
//  920   pBuf += 2;
//  921 
//  922   /* extended address */
//  923   pIEEEAddr = pBuf;
//  924   pBuf += Z_EXTADDR_LEN;
//  925 
//  926   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
//  927 
//  928   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  929 }
//  930 
//  931 /***************************************************************************************************
//  932  * @fn      MT_ZdoUserDescSet
//  933  *
//  934  * @brief   Handle a User Descriptor Set.
//  935  *
//  936  * @param   pBuf  - MT message data
//  937  *
//  938  * @return  void
//  939  ***************************************************************************************************/
//  940 static void MT_ZdoUserDescSet(uint8 *pBuf)
//  941 {
//  942   uint8 cmdId;
//  943   uint8 retValue;
//  944   zAddrType_t destAddr;
//  945   uint16 shortAddr;
//  946   UserDescriptorFormat_t userDesc;
//  947 
//  948   /* parse header */
//  949   cmdId = pBuf[MT_RPC_POS_CMD1];
//  950   pBuf += MT_RPC_FRAME_HDR_SZ;
//  951 
//  952   /* Dev address */
//  953   destAddr.addrMode = Addr16Bit;
//  954   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  955   pBuf += 2;
//  956 
//  957   /* Network address of interest */
//  958   shortAddr = osal_build_uint16( pBuf );
//  959   pBuf += 2;
//  960 
//  961   /* User descriptor */
//  962   userDesc.len = *pBuf++;
//  963   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
//  964 
//  965   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
//  966 
//  967   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  968 }
//  969 
//  970 /***************************************************************************************************
//  971  * @fn      MT_ZdoServiceDiscRequest
//  972  *
//  973  * @brief   Handle a Server Discovery request.
//  974  *
//  975  * @param   pBuf  - MT message data
//  976  *
//  977  * @return  void
//  978  ***************************************************************************************************/
//  979 static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
//  980 {
//  981   uint8 cmdId;
//  982   uint8 retValue;
//  983   uint16 serviceMask;
//  984 
//  985   /* parse header */
//  986   cmdId = pBuf[MT_RPC_POS_CMD1];
//  987   pBuf += MT_RPC_FRAME_HDR_SZ;
//  988 
//  989   /* Service Mask */
//  990   serviceMask = osal_build_uint16( pBuf );
//  991 
//  992   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
//  993 
//  994   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  995 }
//  996 
//  997 /***************************************************************************************************
//  998  * @fn      MT_ZdoEndDevBindRequest
//  999  *
// 1000  * @brief   Handle a End Device Bind request.
// 1001  *
// 1002  * @param   pBuf  - MT message data
// 1003  *
// 1004  * @return  void
// 1005  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1006 static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
MT_ZdoEndDevBindRequest:
          CFI Block cfiBlock107 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
        CODE
// 1007 {
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 99, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 99, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoEndDevBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 70
        MOV       A,#-0x46
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 90)
        LCALL     ?Subroutine13 & 0xFFFF
// 1008   uint8 cmdId;
// 1009   uint8 retValue = 0;
// 1010   uint8 i, epInt, numInClusters, numOutClusters;
// 1011   zAddrType_t destAddr;
// 1012   uint16 shortAddr;
// 1013   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
// 1014 
// 1015   /* parse header */
// 1016   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1017   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_139:
        JNC       ??MT_ZdoEndDevBindRequest_0
        INC       R7
// 1018 
// 1019   /* Dev address */
// 1020   destAddr.addrMode = Addr16Bit;
??MT_ZdoEndDevBindRequest_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
// 1021   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_67:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
// 1022   pBuf += 2;
??CrossCallReturnLabel_150:
        JNC       ??MT_ZdoEndDevBindRequest_1
        INC       R7
// 1023 
// 1024   /* Local coordinator of the binding */
// 1025   shortAddr = osal_build_uint16( pBuf );
??MT_ZdoEndDevBindRequest_1:
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine38 & 0xFFFF
// 1026   pBuf += 2;
// 1027 
// 1028   /* For now, skip past the extended address */
// 1029   pBuf += Z_EXTADDR_LEN;
// 1030 
// 1031   /* Endpoint */
// 1032   epInt = *pBuf++;
??CrossCallReturnLabel_90:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R6
        ADD       A,#0xb
        MOV       R6,A
        JNC       ??MT_ZdoEndDevBindRequest_2
        INC       R7
// 1033 
// 1034   /* Profile ID */
// 1035   profileID = osal_build_uint16( pBuf );
??MT_ZdoEndDevBindRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V6,R2
        MOV       ?V7,R3
// 1036   pBuf += 2;
// 1037 
// 1038   /* NumInClusters */
// 1039   numInClusters = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V4,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoEndDevBindRequest_3
        INC       R7
// 1040   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
??MT_ZdoEndDevBindRequest_3:
        MOV       A,?V4
        CLR       C
        SUBB      A,#0x10
        JNC       ??MT_ZdoEndDevBindRequest_4
// 1041   {
// 1042     for ( i = 0; i < numInClusters; i++ )
        MOV       ?V5,#0x0
??MT_ZdoEndDevBindRequest_5:
        MOV       A,?V5
        CLR       C
        SUBB      A,?V4
        JNC       ??MT_ZdoEndDevBindRequest_6
// 1043     {
// 1044       inClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine41 & 0xFFFF
// 1045       pBuf += 2;
// 1046     }
??CrossCallReturnLabel_94:
        MOV       A,#0x28
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_143:
        JNC       ??MT_ZdoEndDevBindRequest_7
        INC       R7
??MT_ZdoEndDevBindRequest_7:
        INC       ?V5
        SJMP      ??MT_ZdoEndDevBindRequest_5
// 1047   }
// 1048   else
// 1049   {
// 1050     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_4:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        MOVX      @DPTR,A
// 1051   }
// 1052 
// 1053   /* NumOutClusters */
// 1054   numOutClusters = *pBuf++;
??MT_ZdoEndDevBindRequest_6:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
// 1055   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
        CLR       C
        SUBB      A,#0x10
        JNC       ??MT_ZdoEndDevBindRequest_8
// 1056   {
// 1057     for ( i = 0; i < numOutClusters; i++ )
        MOV       ?V5,#0x0
??MT_ZdoEndDevBindRequest_9:
        MOV       A,?V5
        CLR       C
        SUBB      A,?V8
        JNC       ??MT_ZdoEndDevBindRequest_10
// 1058     {
// 1059       outClusters[i] = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine41 & 0xFFFF
// 1060       pBuf += 2;
// 1061     }
??CrossCallReturnLabel_95:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_144:
        JNC       ??MT_ZdoEndDevBindRequest_11
        INC       R7
??MT_ZdoEndDevBindRequest_11:
        INC       ?V5
        SJMP      ??MT_ZdoEndDevBindRequest_9
// 1062   }
// 1063   else
// 1064   {
// 1065     retValue = ZDP_INVALID_REQTYPE;
??MT_ZdoEndDevBindRequest_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#-0x80
        SJMP      ??MT_ZdoEndDevBindRequest_12
// 1066   }
// 1067 
// 1068   if ( retValue == 0 )
??MT_ZdoEndDevBindRequest_10:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??MT_ZdoEndDevBindRequest_13
// 1069   {
// 1070     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
// 1071                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV       ?V5,#0x0
        MOV       R0,#?V5
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 91)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V10,R0
        MOV       ?V11,R1
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 93)
        MOV       A,?V8
        MOV       ?V5,A
        MOV       R0,#?V5
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 94)
        MOV       A,#0x2c
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V8,R0
        MOV       ?V9,R1
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 96)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 97)
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 99)
        MOV       R1,?V3
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 90)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
??MT_ZdoEndDevBindRequest_12:
        MOVX      @DPTR,A
// 1072   }
// 1073 
// 1074   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoEndDevBindRequest_13:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1075 }
        MOV       A,#0x46
          CFI EndBlock cfiBlock107
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock108 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 90)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Valid
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock108

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker111 Using cfiCommon1
          CFI (cfiPicker111) NoFunction
          CFI (cfiPicker111) Picker
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       R0,?V5
        MOV       A,R0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        RET
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond112 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_141
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function MT_ZdoMatchDescRequest
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-2
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        MOV       A,DPL
        ADD       A,R0
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       DPH,A
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_145
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function MT_ZdoCommandProcessing
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function MT_ZdoCommandProcessing
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function MT_ZdoCommandProcessing
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function MT_ZdoMatchDescRequest
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function MT_ZdoMatchDescRequest
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond128) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function MT_ZdoMatchDescRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_153:
        MOV       R6,A
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function MT_ZdoCommandProcessing
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_1
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-4
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function MT_ZdoCommandProcessing
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_2
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-4
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function MT_ZdoCommandProcessing
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_3
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-4
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function MT_ZdoCommandProcessing
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_4
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function MT_ZdoMatchDescRequest
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_141
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function MT_ZdoMatchDescRequest
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_142
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_143
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-4
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_144
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-4
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function MT_ZdoCommandProcessing
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_145
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function MT_ZdoCommandProcessing
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_146
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-4
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function MT_ZdoCommandProcessing
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_147
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function MT_ZdoCommandProcessing
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_148
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function MT_ZdoMatchDescRequest
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_149
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_150
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-4
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_153, ??CrossCallReturnLabel_151
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-4
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function MT_ZdoBindRequest
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_5
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function MT_ZdoUnbindRequest
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_154, ??CrossCallReturnLabel_6
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x2
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151
// 1076 
// 1077 /***************************************************************************************************
// 1078  * @fn      MT_ZdoBindRequest
// 1079  *
// 1080  * @brief   Handle a Bind request.
// 1081  *
// 1082  * @param   pBuf  - MT message data
// 1083  *
// 1084  * @return  void
// 1085  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1086 static void MT_ZdoBindRequest(uint8 *pBuf)
MT_ZdoBindRequest:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
        CODE
// 1087 {
        FUNCALL MT_ZdoBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine12 & 0xFFFF
// 1088   uint8 cmdId;
// 1089   uint8 retValue;
// 1090   zAddrType_t destAddr, devAddr;
// 1091   uint8 *pSrcAddr, *ptr;
// 1092   uint8 srcEPInt, dstEPInt;
// 1093   uint16 clusterID;
// 1094 
// 1095   /* parse header */
// 1096   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1097   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_20:
        JNC       ??MT_ZdoBindRequest_0
        INC       R7
// 1098 
// 1099   /* Dev address */
// 1100   destAddr.addrMode = Addr16Bit;
??MT_ZdoBindRequest_0:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
// 1101   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_77:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
// 1102   pBuf += 2;
// 1103 
// 1104   /* SrcAddress */
// 1105   pSrcAddr = pBuf;
// 1106   pBuf += Z_EXTADDR_LEN;
// 1107 
// 1108   /* SrcEPInt */
// 1109   srcEPInt = *pBuf++;
// 1110 
// 1111   /* ClusterID */
// 1112   clusterID = osal_build_uint16( pBuf );
// 1113   pBuf += 2;
// 1114 
// 1115   /* Destination Address mode */
// 1116   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_5:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoBindRequest_1
        INC       R7
// 1117 
// 1118   /* Destination Address */
// 1119   if ( devAddr.addrMode == Addr64Bit )
??MT_ZdoBindRequest_1:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_ZdoBindRequest_2
// 1120   {
// 1121     ptr = pBuf;
// 1122     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??MT_ZdoBindRequest_3
// 1123   }
// 1124   else
// 1125   {
// 1126     devAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_ZdoBindRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1127   }
// 1128   /* The short address occupies LSB two bytes */
// 1129   pBuf += Z_EXTADDR_LEN;
// 1130 
// 1131   /* DstEPInt */
// 1132   dstEPInt = *pBuf;
// 1133 
// 1134   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoBindRequest_3:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV       ?V6,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R1,?V1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x21
          CFI EndBlock cfiBlock152
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1135 
// 1136   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1137 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 43)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R3,#0x0
        LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_160:
        MOV       R2,?V0
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV       A,#0x13
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_155
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function MT_ZdoCommandProcessing
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function MT_ZdoCommandProcessing
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function MT_ZdoCommandProcessing
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function MT_ZdoCommandProcessing
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function MT_ZdoBindRequest
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function MT_ZdoUnbindRequest
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_161
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function MT_ZdoCommandProcessing
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond163) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond163) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond163) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function MT_ZdoCommandProcessing
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function MT_ZdoCommandProcessing
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function MT_ZdoCommandProcessing
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function MT_ZdoCommandProcessing
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function MT_ZdoCommandProcessing
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function MT_ZdoBindRequest
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function MT_ZdoUnbindRequest
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171
// 1138 
// 1139 /***************************************************************************************************
// 1140  * @fn      MT_ZdoUnbindRequest
// 1141  *
// 1142  * @brief   Handle a Unbind request.
// 1143  *
// 1144  * @param   pBuf  - MT message data
// 1145  *
// 1146  * @return  void
// 1147  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1148 static void MT_ZdoUnbindRequest(uint8 *pBuf)
MT_ZdoUnbindRequest:
          CFI Block cfiBlock172 Using cfiCommon0
          CFI Function MT_ZdoUnbindRequest
        CODE
// 1149 {
        FUNCALL MT_ZdoUnbindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoUnbindRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        LCALL     ?Subroutine12 & 0xFFFF
// 1150   uint8 cmdId;
// 1151   uint8 retValue;
// 1152   zAddrType_t destAddr, devAddr;
// 1153   uint8 *pSrcAddr, *ptr;
// 1154   uint8 srcEPInt, dstEPInt;
// 1155   uint16 clusterID;
// 1156 
// 1157   /* parse header */
// 1158   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1159   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_21:
        JNC       ??MT_ZdoUnbindRequest_0
        INC       R7
// 1160 
// 1161   /* dev address */
// 1162   destAddr.addrMode = Addr16Bit;
??MT_ZdoUnbindRequest_0:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine32 & 0xFFFF
// 1163   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_78:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine5 & 0xFFFF
// 1164   pBuf += 2;
// 1165 
// 1166   /* SrcAddress */
// 1167   pSrcAddr = pBuf;
// 1168   pBuf += Z_EXTADDR_LEN;
// 1169 
// 1170   /* SrcEPInt */
// 1171   srcEPInt = *pBuf++;
// 1172 
// 1173   /* ClusterID */
// 1174   clusterID = osal_build_uint16( pBuf );
// 1175   pBuf += 2;
// 1176 
// 1177   /* Destination Address mode */
// 1178   devAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_6:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoUnbindRequest_1
        INC       R7
// 1179 
// 1180   /* Destination Address */
// 1181   if ( devAddr.addrMode == Addr64Bit )
??MT_ZdoUnbindRequest_1:
        MOV       A,#0x3
        XRL       A,R0
        JNZ       ??MT_ZdoUnbindRequest_2
// 1182   {
// 1183     ptr = pBuf;
// 1184     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??MT_ZdoUnbindRequest_3
// 1185   }
// 1186   else
// 1187   {
// 1188     devAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_ZdoUnbindRequest_2:
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
// 1189   }
// 1190   /* The short address occupies LSB two bytes */
// 1191   pBuf += Z_EXTADDR_LEN;
// 1192 
// 1193   /* dstEPInt */
// 1194   dstEPInt = *pBuf;
// 1195 
// 1196   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
??MT_ZdoUnbindRequest_3:
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV       ?V6,#0x0
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V6,A
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V6,R0
        MOV       ?V7,R1
        MOV       R0,#?V6
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R1,?V1
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x22
        LJMP      ?Subroutine1 & 0xFFFF
// 1197 
// 1198   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1199 }
          CFI EndBlock cfiBlock172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function MT_ZdoUnbindRequest
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_116:
        MOV       A,#0xa
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function MT_ZdoEndDevBindRequest
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_67
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-4
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_115, ??CrossCallReturnLabel_68
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-4
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function MT_ZdoBindRequest
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_77
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-4
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function MT_ZdoUnbindRequest
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_116, ??CrossCallReturnLabel_78
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-4
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        RET
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond182 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function MT_ZdoUnbindRequest
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker185 Using cfiCommon1
          CFI (cfiPicker185) NoFunction
          CFI (cfiPicker185) Picker
        MOV       A,R3
        MOV       R7,A
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       A,R2
        ADD       A,#0x3
        MOV       R6,A
        RET
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiPicker185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function MT_ZdoBindRequest
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function MT_ZdoUnbindRequest
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond187) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond187) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond187) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_154:
        MOV       ?V2,A
        CLR       A
        ADDC      A,R7
        MOV       ?V3,A
        MOV       A,?V2
        ADD       A,#0x8
        MOV       R6,A
        CLR       A
        ADDC      A,?V3
        MOV       DPL,R6
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V1,A
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        LCALL     ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV       R0,A
        MOV       A,#0x9
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function MT_ZdoMatchDescRequest
          CFI Conditional ??CrossCallReturnLabel_125
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 92)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function MT_ZdoBindRequest
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_5
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function MT_ZdoUnbindRequest
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_6
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192
// 1200 
// 1201 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1202 /***************************************************************************************************
// 1203  * @fn      MT_ZdoSetLinkKey
// 1204  *
// 1205  * @brief   Set an application or trust center link key.
// 1206  *
// 1207  * @param   pBuf  - MT message data
// 1208  *
// 1209  * @return  void
// 1210  ***************************************************************************************************/
// 1211 static void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1212 {
// 1213   uint8 cmdId;
// 1214   uint8 retValue;
// 1215   uint8 *pExtAddr;
// 1216   uint8 *pKey;
// 1217   uint16 shortAddr;
// 1218 
// 1219   /* parse header */
// 1220   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1221   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1222 
// 1223   /* ShortAddr */
// 1224   shortAddr = osal_build_uint16( pBuf );
// 1225   pBuf += 2;
// 1226 
// 1227   /* Extended Addr */
// 1228   pExtAddr = pBuf;
// 1229   pBuf += Z_EXTADDR_LEN;
// 1230 
// 1231   /* Key data */
// 1232   pKey = pBuf;
// 1233 
// 1234   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1235 
// 1236   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1237 }
// 1238 
// 1239 /***************************************************************************************************
// 1240  * @fn      MT_ZdoRemoveLinkKey
// 1241  *
// 1242  * @brief   Remove an application or trust center link key.
// 1243  *
// 1244  * @param   pBuf  - MT message data
// 1245  *
// 1246  * @return  void
// 1247  ***************************************************************************************************/
// 1248 static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1249 {
// 1250   uint8 cmdId;
// 1251   uint8 retValue = ZNwkUnknownDevice;
// 1252   uint8 *pExtAddr;
// 1253 
// 1254   /* parse header */
// 1255   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1256   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1257 
// 1258   /* ShortAddr */
// 1259   pExtAddr = pBuf;
// 1260   
// 1261   if( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ))
// 1262   {
// 1263     uint16 tempIndex;
// 1264     APSME_TCLKDevEntry_t TCLKDevEntry;
// 1265     uint8 found;
// 1266                                                    //Reset the frame counter associated to this device  TCLinkKeyFrmCntr
// 1267     tempIndex = APSME_SearchTCLinkKeyEntry(pExtAddr,&found, &TCLKDevEntry);
// 1268     
// 1269     if(found)
// 1270     {
// 1271       uint16 i;
// 1272       
// 1273       i = tempIndex - ZCD_NV_TCLK_TABLE_START;
// 1274       
// 1275       TCLinkKeyFrmCntr[i].txFrmCntr = 0;
// 1276       TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
// 1277       
// 1278       if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
// 1279       {
// 1280         APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
// 1281       }
// 1282       
// 1283       osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
// 1284       osal_nv_write( ( tempIndex), 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
// 1285       retValue = ZSuccess;
// 1286     }
// 1287   }
// 1288   else
// 1289   {
// 1290     retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1291   }
// 1292   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1293 }
// 1294 
// 1295 /***************************************************************************************************
// 1296  * @fn      MT_ZdoGetLinkKey
// 1297  *
// 1298  * @brief   Get the application link key.
// 1299  *
// 1300  * @param   pBuf  - MT message data
// 1301  *
// 1302  * @return  void
// 1303  ***************************************************************************************************/
// 1304 static void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1305 {
// 1306   uint8 cmdId;
// 1307   uint8 retValue;
// 1308   uint8 *pExtAddr;
// 1309   uint8 *retBuf = NULL;
// 1310   uint8 len;
// 1311   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1312   uint16 apsLinkKeyNvId;
// 1313 
// 1314   // parse header
// 1315   len = pBuf[MT_RPC_POS_LEN];
// 1316   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1317   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1318 
// 1319   // Extended Address
// 1320   pExtAddr = pBuf;
// 1321 
// 1322   // Check for illegal extended address -- indicating network address lookup
// 1323   if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
// 1324        ( len >= Z_EXTADDR_LEN )            )
// 1325   {
// 1326     uint16 nwkAddr;
// 1327     nwkAddr = osal_build_uint16( pExtAddr );
// 1328     (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
// 1329   }
// 1330 
// 1331   // Fetch the key NV ID
// 1332   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1333 
// 1334   if (retValue == ZSuccess)
// 1335   {
// 1336     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1337     {
// 1338       // retrieve key from NV
// 1339       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1340                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1341       {
// 1342         retValue = ZNwkUnknownDevice;
// 1343       }
// 1344     }
// 1345     else
// 1346     {
// 1347       retValue = ZNwkUnknownDevice;
// 1348     }
// 1349   }
// 1350 
// 1351   // Construct the response message
// 1352   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1353   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1354   {
// 1355     if (retValue == ZSuccess)
// 1356     {
// 1357       // Extended Address
// 1358       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1359 
// 1360       // Key data
// 1361       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1362     }
// 1363     else
// 1364     {
// 1365       // Failed case - set the rest fields to all FF
// 1366       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1367     }
// 1368 
// 1369     retBuf[0] = retValue;  // Status
// 1370 
// 1371     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1372 
// 1373     // clear retBuf because it contains key data and free allocated memory
// 1374     osal_memset(retBuf, 0x00, len);
// 1375 
// 1376     osal_mem_free(retBuf);
// 1377   }
// 1378 
// 1379   // clear copy of key in RAM
// 1380   if (pApsLinkKey != NULL)
// 1381   {
// 1382     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1383 
// 1384     osal_mem_free(pApsLinkKey);
// 1385   }
// 1386 
// 1387   return;
// 1388 }
// 1389 #endif // MT_SYS_KEY_MANAGEMENT
// 1390 
// 1391 #if defined (MT_ZDO_MGMT)
// 1392 /***************************************************************************************************
// 1393  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1394  *
// 1395  * @brief   Handle a Mgmt Nwk Discovery request.
// 1396  *
// 1397  * @param   pBuf  - MT message data
// 1398  *
// 1399  * @return  void
// 1400  ***************************************************************************************************/
// 1401 static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1402 {
// 1403   uint8 cmdId;
// 1404   uint8 retValue;
// 1405   zAddrType_t destAddr;
// 1406   uint32 scanChannels;
// 1407   uint8 scanDuration, startIndex;
// 1408 
// 1409   /* parse header */
// 1410   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1411   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1412 
// 1413   /* Dev address */
// 1414   destAddr.addrMode = Addr16Bit;
// 1415   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1416   pBuf += 2;
// 1417 
// 1418   /* Scan Channels */
// 1419   scanChannels = osal_build_uint32(pBuf, 4);
// 1420   pBuf += 4;
// 1421 
// 1422   /* Scan Duration */
// 1423   scanDuration = *pBuf++;
// 1424 
// 1425   /* Start Index */
// 1426   startIndex = *pBuf;
// 1427 
// 1428   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1429 
// 1430   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1431 }
// 1432 
// 1433 /***************************************************************************************************
// 1434  * @fn      MT_ZdoMgmtLqiRequest
// 1435  *
// 1436  * @brief   Handle a Mgmt Lqi request.
// 1437  *
// 1438  * @param   pBuf  - MT message data
// 1439  *
// 1440  * @return  void
// 1441  ***************************************************************************************************/
// 1442 static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1443 {
// 1444   uint8 cmdId;
// 1445   uint8 retValue;
// 1446   zAddrType_t destAddr;
// 1447   uint8 startIndex;
// 1448 
// 1449   /* parse header */
// 1450   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1451   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1452 
// 1453   /* Dev address */
// 1454   destAddr.addrMode = Addr16Bit;
// 1455   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1456   pBuf += 2;
// 1457 
// 1458   /* Start Index */
// 1459   startIndex = *pBuf;
// 1460 
// 1461   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1462 
// 1463   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1464 }
// 1465 
// 1466 /***************************************************************************************************
// 1467  * @fn      MT_ZdoMgmtRtgRequest
// 1468  *
// 1469  * @brief   Handle a Mgmt Rtg request.
// 1470  *
// 1471  * @param   pBuf  - MT message data
// 1472  *
// 1473  * @return  void
// 1474  ***************************************************************************************************/
// 1475 static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1476 {
// 1477   uint8 cmdId;
// 1478   uint8 retValue;
// 1479   zAddrType_t destAddr;
// 1480   uint8 startIndex;
// 1481 
// 1482   /* parse header */
// 1483   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1484   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1485 
// 1486   /* Dev Address */
// 1487   destAddr.addrMode = Addr16Bit;
// 1488   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1489   pBuf += 2;
// 1490 
// 1491   /* Start Index */
// 1492   startIndex = *pBuf;
// 1493 
// 1494   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1495 
// 1496   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1497 }
// 1498 
// 1499 /***************************************************************************************************
// 1500  * @fn      MT_ZdoMgmtBindRequest
// 1501  *
// 1502  * @brief   Handle a Mgmt Bind request.
// 1503  *
// 1504  * @param   pBuf  - MT message data
// 1505  *
// 1506  * @return  void
// 1507  ***************************************************************************************************/
// 1508 static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1509 {
// 1510   uint8 cmdId;
// 1511   uint8 retValue;
// 1512   zAddrType_t destAddr;
// 1513   uint8 startIndex;
// 1514 
// 1515   /* parse header */
// 1516   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1517   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1518 
// 1519   /* Dev Address */
// 1520   destAddr.addrMode = Addr16Bit;
// 1521   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1522   pBuf += 2;
// 1523 
// 1524   /* Start Index */
// 1525   startIndex = *pBuf;
// 1526 
// 1527   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1528 
// 1529   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1530 }
// 1531 
// 1532 /***************************************************************************************************
// 1533  * @fn      MT_ZdoMgmtLeaveRequest
// 1534  *
// 1535  * @brief   Handle a Mgmt Leave request.
// 1536  *
// 1537  * @param   pBuf  - MT message data
// 1538  *
// 1539  * @return  void
// 1540  ***************************************************************************************************/
// 1541 static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1542 {
// 1543   uint8 cmdId;
// 1544   uint8 retValue;
// 1545   zAddrType_t destAddr;
// 1546   uint8 *pIEEEAddr;
// 1547   uint8 removeChildren;
// 1548   uint8 rejoin;
// 1549 
// 1550   /* parse header */
// 1551   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1552   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1553 
// 1554   /* Destination Address */
// 1555   destAddr.addrMode = Addr16Bit;
// 1556   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1557   pBuf += 2;
// 1558 
// 1559   /* IEEE address */
// 1560   pIEEEAddr = pBuf;
// 1561   pBuf += Z_EXTADDR_LEN;
// 1562 
// 1563   /* Rejoin if bit0 is set */
// 1564   rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
// 1565 
// 1566   /* Remove Children if bit1 is set */
// 1567   removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
// 1568 
// 1569   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1570 
// 1571   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1572 }
// 1573 
// 1574 /***************************************************************************************************
// 1575  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1576  *
// 1577  * @brief   Handle a Mgmt Direct Join request.
// 1578  *
// 1579  * @param   pBuf  - MT message data
// 1580  *
// 1581  * @return  void
// 1582  ***************************************************************************************************/
// 1583 static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1584 {
// 1585   uint8 cmdId;
// 1586   uint8 retValue;
// 1587   zAddrType_t destAddr;
// 1588   uint8 *deviceAddr;
// 1589   uint8 capInfo;
// 1590 
// 1591   /* parse header */
// 1592   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1593   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1594 
// 1595   /* Destination Address */
// 1596   destAddr.addrMode = Addr16Bit;
// 1597   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1598   pBuf += 2;
// 1599 
// 1600   /* Device Address */
// 1601   deviceAddr = pBuf;
// 1602   pBuf += Z_EXTADDR_LEN;
// 1603 
// 1604   /* Capability information */
// 1605   capInfo = *pBuf;
// 1606 
// 1607   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1608 
// 1609   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1610 }
// 1611 
// 1612 /***************************************************************************************************
// 1613  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1614  *
// 1615  * @brief   Handle a Mgmt Permit Join request.
// 1616  *
// 1617  * @param   pBuf  - MT message data
// 1618  *
// 1619  * @return  void
// 1620  ***************************************************************************************************/
// 1621 static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1622 {
// 1623   uint8 cmdId;
// 1624   uint8 dataLn;
// 1625   uint8 retValue;
// 1626   uint8 duration;
// 1627   uint8 tcSignificance;
// 1628   zAddrType_t destAddr;
// 1629 
// 1630   /* parse header */
// 1631   dataLn = pBuf[MT_RPC_POS_LEN];
// 1632   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1633   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1634 
// 1635   if ( 4 == dataLn )
// 1636   {
// 1637     /* addrMode was hardwired up to Z-Stack 2.6.0 */
// 1638     destAddr.addrMode = afAddr16Bit;
// 1639   }
// 1640   else
// 1641   {
// 1642     /* addrMode is a parameter after Z-Stack 2.6.0 */
// 1643     destAddr.addrMode = *pBuf++;
// 1644   }
// 1645 
// 1646   /* Destination Address */
// 1647   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1648   pBuf += 2;
// 1649 
// 1650   /* Duration */
// 1651   duration = *pBuf++;
// 1652 
// 1653   /* Trust center significance */
// 1654   tcSignificance = *pBuf;
// 1655 
// 1656   ignoreIndication = TRUE;
// 1657   retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1658   ignoreIndication = FALSE;
// 1659 
// 1660   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1661 }
// 1662 
// 1663 /***************************************************************************************************
// 1664  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1665  *
// 1666  * @brief   Handle a Mgmt Nwk Update request.
// 1667  *
// 1668  * @param   pBuf  - MT message data
// 1669  *
// 1670  * @return  void
// 1671  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1672 static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
MT_ZdoMgmtNwkUpdateRequest:
          CFI Block cfiBlock193 Using cfiCommon0
          CFI Function MT_ZdoMgmtNwkUpdateRequest
        CODE
// 1673 {
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, ZDP_MgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, ZDP_MgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoMgmtNwkUpdateRequest, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        LCALL     ?Subroutine12 & 0xFFFF
// 1674   uint8 cmdId;
// 1675   uint8 retValue;
// 1676   zAddrType_t destAddr;
// 1677   uint32 channelMask;
// 1678   uint8 scanDuration, scanCount;
// 1679   uint16 nwkManagerAddr;
// 1680 
// 1681     /* parse header */
// 1682   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1683   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_22:
        JNC       ??MT_ZdoMgmtNwkUpdateRequest_0
        INC       R7
// 1684 
// 1685   /* Destination address */
// 1686   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??MT_ZdoMgmtNwkUpdateRequest_0:
        ; Setup parameters for call to function osal_build_uint16
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
// 1687   pBuf += 2;
// 1688 
// 1689   /* Destination address mode */
// 1690   destAddr.addrMode = *pBuf++;
??CrossCallReturnLabel_56:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??MT_ZdoMgmtNwkUpdateRequest_1
        INC       R7
// 1691 
// 1692   channelMask = osal_build_uint32(pBuf, 4);
??MT_ZdoMgmtNwkUpdateRequest_1:
        ; Setup parameters for call to function osal_build_uint32
        MOV       R1,#0x4
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V6,R4
        MOV       ?V7,R5
// 1693   pBuf += 4;
// 1694 
// 1695   /* Scan duration */
// 1696   scanDuration = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
// 1697 
// 1698   /* Scan count */
// 1699   scanCount = *pBuf++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
// 1700 
// 1701   /* NWK manager address */
// 1702   nwkManagerAddr = osal_build_uint16( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V8,R2
        MOV       ?V9,R3
// 1703 
// 1704   /* Send the Management Network Update request */
// 1705   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1706                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1707 
// 1708   /*
// 1709     Since we don't recevied our own broadcast messages, we should
// 1710     send a unicast copy of the message to ourself.
// 1711   */
// 1712   if ( destAddr.addrMode == AddrBroadcast )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??MT_ZdoMgmtNwkUpdateRequest_2
// 1713   {
// 1714     destAddr.addrMode = Addr16Bit;
        LCALL     ?Subroutine34 & 0xFFFF
// 1715     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_81:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1716     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1717                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL     ?Subroutine17 & 0xFFFF
// 1718   }
??CrossCallReturnLabel_31:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
        MOV       A,#0x6
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1719 
// 1720   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoMgmtNwkUpdateRequest_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V0
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1721 }
        MOV       A,#0xa
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock193

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond194 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function MT_ZdoCommandProcessing
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function MT_ZdoCommandProcessing
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function MT_ZdoCommandProcessing
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond197) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond197) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond197) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond197) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond197) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond197) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond197) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+-2
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond198) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond198) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond198) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_118:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond200 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function MT_ZdoCommandProcessing
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_117, ??CrossCallReturnLabel_80
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond201) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond201) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond201) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond201) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond201) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond201) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond201) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond201) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond201) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond201) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond201) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond201) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond201) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-4
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function MT_ZdoCommandProcessing
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_52
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-4
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function MT_ZdoCommandProcessing
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_53
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-4
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function MT_ZdoCommandProcessing
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_54
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-4
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function MT_ZdoCommandProcessing
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_55
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-4
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_118, ??CrossCallReturnLabel_56
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond206) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond206) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond206) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond206) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond206) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond206) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond206) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-4
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function MT_ZdoBeaconIndCB
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function MT_ZdoBeaconIndCB
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function MT_ZdoMgmtNwkUpdateRequest
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOV       DPTR,#_NIB + 109
        MOVX      A,@DPTR
        INC       A
        MOV       R5,A
        MOV       R4,?V2
        MOV       R1,?V1
        MOV       A,#0x7
        RET
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212
// 1722 #endif /* MT_ZDO_MGMT */
// 1723 
// 1724 /***************************************************************************************************
// 1725  * @fn      MT_ZdoSendData
// 1726  *
// 1727  * @brief   Handle a ZDO Send Data request.
// 1728  *
// 1729  * @param   pBuf  - MT message data
// 1730  *
// 1731  * @return  void
// 1732  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1733 static void MT_ZdoSendData( uint8 *pBuf )
MT_ZdoSendData:
          CFI Block cfiBlock213 Using cfiCommon0
          CFI Function MT_ZdoSendData
        CODE
// 1734 {
        FUNCALL MT_ZdoSendData, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendData, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 11
        MOV       A,#-0xb
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V1,R3
// 1735   uint8 cmdId;
// 1736   uint8 retValue;
// 1737   zAddrType_t destAddr;
// 1738   uint8 transSeq;
// 1739   uint8 len;
// 1740   uint16 cmd;
// 1741 
// 1742     /* parse header */
// 1743   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
// 1744   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV       A,R2
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_ZdoSendData_0
        INC       ?V1
// 1745 
// 1746   /* Destination address */
// 1747   destAddr.addrMode = Addr16Bit;
??MT_ZdoSendData_0:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine31 & 0xFFFF
// 1748   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_76:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine36 & 0xFFFF
// 1749   pBuf += 2;
// 1750 
// 1751   /* Destination address mode */
// 1752   transSeq = *pBuf++;
??CrossCallReturnLabel_86:
        LCALL     ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_ZdoSendData_1
        INC       ?V1
// 1753 
// 1754   /* cmd */
// 1755   cmd = osal_build_uint16( pBuf );
??MT_ZdoSendData_1:
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine39 & 0xFFFF
// 1756   pBuf += 2;
// 1757   len = *pBuf++;
??CrossCallReturnLabel_164:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        MOV       A,?V0
        ADD       A,#0x3
        MOV       ?V0,A
        JNC       ??MT_ZdoSendData_2
        INC       ?V1
// 1758 
// 1759   /* Send the Generic ZDO message request */
// 1760   retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
??MT_ZdoSendData_2:
        ; Setup parameters for call to function ZDP_SendData
        MOV       ?V4,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine62_0 & 0xFFFF
??CrossCallReturnLabel_133:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 1761   /*
// 1762     Since we don't recevied our own broadcast messages, we should
// 1763     send a unicast copy of the message to ourself.
// 1764   */
// 1765   if ( destAddr.addrMode == AddrBroadcast )
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??MT_ZdoSendData_3
// 1766   {
// 1767     destAddr.addrMode = Addr16Bit;
        LCALL     ?Subroutine56 & 0xFFFF
// 1768     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_121:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1769     retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
        ; Setup parameters for call to function ZDP_SendData
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine62_0 & 0xFFFF
// 1770   }
??CrossCallReturnLabel_134:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 1771 
// 1772   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoSendData_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       R3,#0x1
        MOV       A,R7
        MOV       R2,A
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1773 }
        MOV       A,#0xb
          CFI EndBlock cfiBlock213
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock214 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Valid
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock214

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond215 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_163
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function MT_ZdoSendData
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        MOV       R2,A
        MOV       R3,?V1
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_165
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function MT_ZdoCommandProcessing
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function MT_ZdoSendData
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker221 Using cfiCommon1
          CFI (cfiPicker221) NoFunction
          CFI (cfiPicker221) Picker
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       ?V2,R2
        MOV       ?V3,R3
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiPicker221

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond222 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function MT_ZdoSendData
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function MT_ZdoSendData
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_build_uint16
        ; Setup parameters for call to function osal_build_uint16
        INC       R2
        INC       R2
        INC       R2
        MOV       R3,?V1
        LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227
// 1774 
// 1775 /***************************************************************************************************
// 1776  * @fn      MT_ZdoNwkAddrOfInterestReq
// 1777  *
// 1778  * @brief   Handle a ZDO Network Address of Interest request.
// 1779  *
// 1780  * @param   pBuf  - MT message data
// 1781  *
// 1782  * @return  void
// 1783  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1784 static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
MT_ZdoNwkAddrOfInterestReq:
          CFI Block cfiBlock228 Using cfiCommon0
          CFI Function MT_ZdoNwkAddrOfInterestReq
        CODE
// 1785 {
        FUNCALL MT_ZdoNwkAddrOfInterestReq, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkAddrOfInterestReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R3
        MOV       R7,A
// 1786   uint8 cmdId;
// 1787   uint8 retValue;
// 1788   zAddrType_t destAddr;
// 1789   uint16 nwkAddr;
// 1790   uint8 cmd;
// 1791 
// 1792     /* parse header */
// 1793   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV       DPL,R2
        MOV       DPH,A
        LCALL     ??Subroutine64_0 & 0xFFFF
// 1794   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_140:
        JNC       ??MT_ZdoNwkAddrOfInterestReq_0
        INC       R7
// 1795 
// 1796   /* Destination address */
// 1797   destAddr.addrMode = Addr16Bit;
??MT_ZdoNwkAddrOfInterestReq_0:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine28 & 0xFFFF
// 1798   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
??CrossCallReturnLabel_68:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
// 1799   pBuf += 2;
??CrossCallReturnLabel_151:
        JNC       ??MT_ZdoNwkAddrOfInterestReq_1
        INC       R7
// 1800 
// 1801   /* Network Address of Interest */
// 1802   nwkAddr = osal_build_uint16( pBuf );
??MT_ZdoNwkAddrOfInterestReq_1:
        ; Setup parameters for call to function osal_build_uint16
        LCALL     ?Subroutine38 & 0xFFFF
// 1803   pBuf += 2;
// 1804 
// 1805   cmd = *pBuf++;
??CrossCallReturnLabel_91:
        MOVX      A,@DPTR
        MOV       R6,A
// 1806 
// 1807   /* Send the Generic ZDO message request */
// 1808   retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       ?V3,#0x0
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R6
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1809 
// 1810 
// 1811   /*
// 1812     Since we don't recevied our own broadcast messages, we should
// 1813     send a unicast copy of the message to ourself.
// 1814   */
// 1815   if ( destAddr.addrMode == AddrBroadcast )
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??MT_ZdoNwkAddrOfInterestReq_2
// 1816   {
// 1817     destAddr.addrMode = Addr16Bit;
        LCALL     ?Subroutine34 & 0xFFFF
// 1818     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
??CrossCallReturnLabel_82:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
// 1819     retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R6
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
        MOV       A,#0x1
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 1820   }
// 1821 
// 1822   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
??MT_ZdoNwkAddrOfInterestReq_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x1
        MOV       R2,?V2
        MOV       R1,#0x65
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1823 }
        MOV       A,#0xa
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock228

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function MT_ZdoEndDevBindRequest
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 90)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker231 Using cfiCommon1
          CFI (cfiPicker231) NoFunction
          CFI (cfiPicker231) Picker
        LCALL     ?Subroutine60 & 0xFFFF
??CrossCallReturnLabel_136:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiPicker231

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function MT_ZdoMgmtNwkUpdateRequest
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker234 Using cfiCommon1
          CFI (cfiPicker234) NoFunction
          CFI (cfiPicker234) Picker
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_122:
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiPicker234

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond235 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_121
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function MT_ZdoMgmtNwkUpdateRequest
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_81
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+-4
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function MT_ZdoNwkAddrOfInterestReq
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_82
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-4
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        MOV       A,#0x2
        MOVX      @DPTR,A
        MOV       DPTR,#_NIB + 20
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238
// 1824 
// 1825 /***************************************************************************************************
// 1826  * @fn      MT_ZdoStartupFromApp
// 1827  *
// 1828  * @brief   Handle a Startup from App request.
// 1829  *
// 1830  * @param   pBuf  - MT message data
// 1831  *
// 1832  * @return  void
// 1833  ***************************************************************************************************/
// 1834 static void MT_ZdoStartupFromApp(uint8 *pBuf)
// 1835 {
// 1836   uint8 cmd0, cmd1, retValue;
// 1837   retValue = ZSuccess;
// 1838 
// 1839   /* parse header */
// 1840   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 1841   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1842   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1843   
// 1844   if(ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE)
// 1845   {
// 1846     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION);
// 1847   }
// 1848   else if (ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE)
// 1849   {
// 1850     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
// 1851   }
// 1852   else
// 1853   {
// 1854      retValue = ZFailure;
// 1855   }
// 1856 
// 1857   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 1858   {
// 1859     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
// 1860   }
// 1861 }
// 1862 
// 1863 
// 1864 /***************************************************************************************************
// 1865  * @fn      MT_ZdoNetworkDiscoveryReq
// 1866  *
// 1867  * @brief   Handle a ZDO Network Discovery request.
// 1868  *
// 1869  * @param   pBuf  - MT message data
// 1870  *
// 1871  * @return  void
// 1872  ***************************************************************************************************/
// 1873 static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
// 1874 {
// 1875   uint8  retValue = ZFailure;
// 1876   uint8  cmdId;
// 1877   uint32 scanChannels;
// 1878 
// 1879   /* parse header */
// 1880   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1881   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1882 
// 1883   /* Packet format */
// 1884   /* scan channels (4) | scan duration (1) */
// 1885 
// 1886   /* Scan channels */
// 1887   scanChannels = osal_build_uint32(pBuf, 4);
// 1888   pBuf += 4;
// 1889 
// 1890   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
// 1891 
// 1892   // Register ZDO callback for MT to handle the network discovery confirm
// 1893   // and beacon notification confirm
// 1894   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
// 1895   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
// 1896 
// 1897   /* Build and send back the response */
// 1898   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1899 }
// 1900 
// 1901 
// 1902 /***************************************************************************************************
// 1903  * @fn      MT_ZdoJoinReq
// 1904  *
// 1905  * @brief   Handle a ZDO Join request.
// 1906  *
// 1907  * @param   pBuf  - MT message data
// 1908  *
// 1909  * @return  void
// 1910  ***************************************************************************************************/
// 1911 static void MT_ZdoJoinReq(uint8 *pBuf)
// 1912 {
// 1913   uint8  retValue = ZFailure;
// 1914   uint8  cmdId;
// 1915   uint16 panId;
// 1916   uint16 chosenParent;
// 1917 
// 1918   /* parse header */
// 1919   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1920   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1921 
// 1922   /* Packet format */
// 1923   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1924    * parentDepth (1) | stackProfile  (1)
// 1925    */
// 1926 
// 1927   panId        = osal_build_uint16( &pBuf[1] );
// 1928   chosenParent = osal_build_uint16( &pBuf[11] );
// 1929 
// 1930   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
// 1931 
// 1932   /* Register for MT to receive Join Confirm */
// 1933   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
// 1934 
// 1935   /* Build and send back the response */
// 1936   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1937 
// 1938 }
// 1939 
// 1940 
// 1941 /***************************************************************************************************
// 1942  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1943  *
// 1944  * @brief       Send an indication to inform host device the completion of
// 1945  *              network discovery scan
// 1946  *
// 1947  * @param       pStr - pointer to a parameter and a structure of parameters
// 1948  *
// 1949  * @return      void
// 1950  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1951 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
MT_ZdoNwkDiscoveryCnfCB:
          CFI Block cfiBlock239 Using cfiCommon0
          CFI Function MT_ZdoNwkDiscoveryCnfCB
        CODE
// 1952 {
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_ZdoBeaconIndCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoNwkDiscoveryCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1953   /* pStr: status (uint8) */
// 1954   /* Packet Format */
// 1955   /* Status (1) */
// 1956 
// 1957   // Scan completed. De-register the callback with ZDO
// 1958   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x2
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1959   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x3
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 1960 
// 1961   // Send the buffered beacon indication
// 1962   MT_ZdoBeaconIndCB ( NULL );
        ; Setup parameters for call to function MT_ZdoBeaconIndCB
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
// 1963 
// 1964   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1965                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R3,#0x1
        MOV       R2,#-0x39
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1966   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
          CFI EndBlock cfiBlock239
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 1967 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock240 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock240
// 1968 
// 1969 /***************************************************************************************************
// 1970  * @fn          MT_ZdoBeaconIndCB
// 1971  *
// 1972  * @brief       Send an indication to host device of a beacon notification
// 1973  *
// 1974  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1975  *
// 1976  * @return      void
// 1977  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1978 void *MT_ZdoBeaconIndCB ( void *pStr )
MT_ZdoBeaconIndCB:
          CFI Block cfiBlock241 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
        CODE
// 1979 {
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoBeaconIndCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1980   zdoBeaconInd_t *pBeacon = pStr;
// 1981   uint8 *pTmp;
// 1982 
// 1983   /* Packet Format */
// 1984   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1985 
// 1986   if( pStr != NULL)
        MOV       A,R2
        ORL       A,R7
        MOV       DPTR,#pBeaconIndBuf
        JNZ       $+5
        LJMP      ??MT_ZdoBeaconIndCB_0 & 0xFFFF
// 1987   {
// 1988     if( pBeaconIndBuf == NULL )
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        JNZ       ??MT_ZdoBeaconIndCB_1
// 1989     {
// 1990       // If pBeaconIndBuf has not been allocated yet
// 1991       // allocate memory now with MAX_UART_TX_BUFF
// 1992       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x7b
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#pBeaconIndBuf
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       R1,A
        MOV       A,R2
        ORL       A,R1
        JNZ       $+5
        LJMP      ??MT_ZdoBeaconIndCB_2 & 0xFFFF
// 1993       {
// 1994         // Memory failure
// 1995         return NULL;
// 1996       }
// 1997       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        CLR       A
        MOVX      @DPTR,A
// 1998     }
// 1999 
// 2000     // Fill in the buffer with the beacon indication
// 2001     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
??MT_ZdoBeaconIndCB_1:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV       B,#0x15
        MUL       AB
        MOV       R0,A
        MOV       R1,B
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
// 2002     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_169:
        LCALL     ?Subroutine55 & 0xFFFF
// 2003     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
??CrossCallReturnLabel_119:
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_167:
        MOVX      @DPTR,A
// 2004     *pTmp++ = LO_UINT16(pBeacon->panID);
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine30 & 0xFFFF
// 2005     *pTmp++ = HI_UINT16(pBeacon->panID);
??CrossCallReturnLabel_71:
        LCALL     ?Subroutine18 & 0xFFFF
// 2006     *pTmp++ = pBeacon->logicalChannel;
??CrossCallReturnLabel_32:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine16 & 0xFFFF
// 2007     *pTmp++ = pBeacon->permitJoining;
??CrossCallReturnLabel_28:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine15 & 0xFFFF
// 2008     *pTmp++ = pBeacon->routerCapacity;
??CrossCallReturnLabel_26:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine11 & 0xFFFF
// 2009     *pTmp++ = pBeacon->deviceCapacity;
??CrossCallReturnLabel_18:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine10 & 0xFFFF
// 2010     *pTmp++ = pBeacon->protocolVersion;
??CrossCallReturnLabel_16:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine8 & 0xFFFF
// 2011     *pTmp++ = pBeacon->stackProfile;
??CrossCallReturnLabel_12:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?Subroutine55 & 0xFFFF
// 2012     *pTmp++ = pBeacon->LQI;
??CrossCallReturnLabel_120:
        INC       DPTR
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_15:
        INC       DPTR
        LCALL     ?Subroutine35 & 0xFFFF
// 2013     *pTmp++ = pBeacon->depth;
??CrossCallReturnLabel_83:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2014     *pTmp++ = pBeacon->updateID;
        MOV       A,R6
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R2
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2015     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0xd
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0xd
        MOV       R2,A
        JNC       ??MT_ZdoBeaconIndCB_3
        INC       R3
??MT_ZdoBeaconIndCB_3:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 2016 
// 2017     pBeaconIndBuf[0] += 1; // Increment the devCnt
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        INC       A
        MOVX      @DPTR,A
// 2018 
// 2019     // Check if the buffer can fit in another beacon
// 2020     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV       R2,A
        MOV       B,#0x15
        MUL       AB
        MOV       R1,B
        ADD       A,#0x16
        JNC       ??MT_ZdoBeaconIndCB_4
        INC       R1
??MT_ZdoBeaconIndCB_4:
        CLR       C
        SUBB      A,#0x7c
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??MT_ZdoBeaconIndCB_2
// 2021     {
// 2022       // Packet full, send the packet over MT
// 2023       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2024                                    MT_ZDO_BEACON_NOTIFY_IND,
// 2025                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        MOV       A,R2
        MUL       AB
        INC       A
        MOV       R3,A
        MOV       R2,#-0x3b
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2026       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
        LCALL     ?Subroutine51 & 0xFFFF
// 2027     }
// 2028   }
??CrossCallReturnLabel_111:
        CLR       A
        SJMP      ??MT_ZdoBeaconIndCB_5
// 2029   else
// 2030   {
// 2031     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
??MT_ZdoBeaconIndCB_0:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        JZ        ??MT_ZdoBeaconIndCB_2
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R0,A
        JZ        ??MT_ZdoBeaconIndCB_6
// 2032     {
// 2033       // End of beacon indication, send the packet over MT
// 2034       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2035                                    MT_ZDO_BEACON_NOTIFY_IND,
// 2036                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LCALL     ?Subroutine21 & 0xFFFF
// 2037     }
??CrossCallReturnLabel_37:
        MOV       A,R0
        MUL       AB
        INC       A
        MOV       R3,A
        MOV       R2,#-0x3b
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2038     // Free the allocated memory
// 2039     if(pBeaconIndBuf != NULL)
        MOV       DPTR,#pBeaconIndBuf
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        JZ        ??MT_ZdoBeaconIndCB_2
// 2040     {
// 2041       osal_mem_free(pBeaconIndBuf);
??MT_ZdoBeaconIndCB_6:
        ; Setup parameters for call to function osal_mem_free
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2042       pBeaconIndBuf = NULL;
        MOV       DPTR,#pBeaconIndBuf
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??MT_ZdoBeaconIndCB_5:
        MOVX      @DPTR,A
// 2043     }
// 2044   }
// 2045 
// 2046   return NULL;
??MT_ZdoBeaconIndCB_2:
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
// 2047 }
          CFI EndBlock cfiBlock241

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond242 Using cfiCommon0
          CFI Function MT_ZdoCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function MT_ZdoBeaconIndCB
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function MT_ZdoJoinCnfCB
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function MT_ZdoJoinCnfCB
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker246 Using cfiCommon1
          CFI (cfiPicker246) NoFunction
          CFI (cfiPicker246) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        RET
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiPicker246

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond247 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function MT_ZdoBeaconIndCB
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker249 Using cfiCommon1
          CFI (cfiPicker249) NoFunction
          CFI (cfiPicker249) Picker
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       B,#0x15
        RET
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiPicker249

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond250 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_167
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function MT_ZdoSendMsgCB
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond251) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond251) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond251) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond251) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond251) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond251) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond251) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond251) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond251) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond251) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond251) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond251) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond251) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond251) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond251) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond251) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond251) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond251) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond251) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond251) CFA_SP SP+-2
          CFI (cfiCond251) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker252 Using cfiCommon1
          CFI (cfiPicker252) NoFunction
          CFI (cfiPicker252) Picker
        INC       DPTR
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiPicker252
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
          CFI Conditional ??CrossCallReturnLabel_166
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function MT_ZdoBeaconIndCB
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function MT_ZdoSendMsgCB
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_172:
        INC       DPTR
        RET
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond257 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function MT_ZdoBeaconIndCB
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function MT_ZdoBeaconIndCB
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+-2
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker260 Using cfiCommon1
          CFI (cfiPicker260) NoFunction
          CFI (cfiPicker260) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiPicker260

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond261 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function MT_ZdoBeaconIndCB
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_106:
        INC       DPTR
        RET
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function MT_ZdoBeaconIndCB
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function MT_ZdoBeaconIndCB
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker267 Using cfiCommon1
          CFI (cfiPicker267) NoFunction
          CFI (cfiPicker267) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_112:
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiPicker267

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond268 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function MT_ZdoBeaconIndCB
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_9
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-4
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function MT_ZdoBeaconIndCB
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_10
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-4
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function MT_ZdoBeaconIndCB
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_112, ??CrossCallReturnLabel_11
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-4
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker272 Using cfiCommon1
          CFI (cfiPicker272) NoFunction
          CFI (cfiPicker272) Picker
        MOV       DPTR,#pBeaconIndBuf
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiPicker272
// 2048 
// 2049 /***************************************************************************************************
// 2050  * @fn          MT_ZdoJoinCnfCB
// 2051  *
// 2052  * @brief       Handle the ZDO Join Confirm from ZDO
// 2053  *
// 2054  * @param       pStr - pointer to a parameter and a structure of parameters
// 2055  *
// 2056  * @return      void
// 2057  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2058 void *MT_ZdoJoinCnfCB ( void *pStr )
MT_ZdoJoinCnfCB:
          CFI Block cfiBlock273 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
        CODE
// 2059 {
        FUNCALL MT_ZdoJoinCnfCB, ZDO_DeregisterForZdoCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoJoinCnfCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV       A,#-0x5
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2060   /* pStr: zdoJoinCnf_t* */
// 2061   /* Packet Format */
// 2062   /* Status (1) | device addr (2) | parent addr (2) */
// 2063 
// 2064   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 2065   zdoJoinCnf_t *joinCnf = pStr;
// 2066 
// 2067   /* Join Complete. De-register the callback with ZDO */
// 2068   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
        ; Setup parameters for call to function ZDO_DeregisterForZdoCB
        MOV       R1,#0x4
        LCALL     `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
// 2069 
// 2070   buf[0] = joinCnf->status;
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine22 & 0xFFFF
// 2071   buf[1] = LO_UINT16( joinCnf->deviceAddr );
??CrossCallReturnLabel_39:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine30 & 0xFFFF
// 2072   buf[2] = HI_UINT16( joinCnf->deviceAddr );
??CrossCallReturnLabel_72:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2073   buf[3] = LO_UINT16( joinCnf->parentAddr );
        MOV       A,R6
        ADD       A,#0x3
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_98:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine30 & 0xFFFF
// 2074   buf[4] = HI_UINT16( joinCnf->parentAddr );
??CrossCallReturnLabel_73:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2075 
// 2076   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2077                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R3,#0x5
        MOV       R2,#-0x3a
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2078 
// 2079   return NULL;
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       A,#0x5
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP      ?Subroutine3 & 0xFFFF
// 2080 }
          CFI EndBlock cfiBlock273

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond274 Using cfiCommon0
          CFI Function MT_ZdoSendData
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function MT_ZdoJoinCnfCB
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker276 Using cfiCommon1
          CFI (cfiPicker276) NoFunction
          CFI (cfiPicker276) Picker
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiPicker276
// 2081 
// 2082 /*************************************************************************************************
// 2083  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 2084  *
// 2085  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 2086  *
// 2087  * @param   pBuf  - MT message data
// 2088  *
// 2089  * @return  void
// 2090  *************************************************************************************************/
// 2091 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
// 2092 {
// 2093   uint8 cmd0, cmd1, tmp;
// 2094   uint16 cId;
// 2095 
// 2096   /* parse header */
// 2097   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2098   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2099   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2100 
// 2101   cId = osal_build_uint16( pBuf );
// 2102   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
// 2103 
// 2104   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2105   {
// 2106     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2107   }
// 2108 }
// 2109 
// 2110 /*************************************************************************************************
// 2111  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 2112  *
// 2113  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 2114  *
// 2115  * @param   pBuf  - MT message data
// 2116  *
// 2117  * @return  void
// 2118  *************************************************************************************************/
// 2119 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
// 2120 {
// 2121   uint8 cmd0, cmd1, tmp;
// 2122   uint16 cId;
// 2123 
// 2124   /* parse header */
// 2125   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2126   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2127   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2128 
// 2129   cId = osal_build_uint16( pBuf );
// 2130   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
// 2131 
// 2132   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2133   {
// 2134     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2135   }
// 2136 }
// 2137 
// 2138 /*************************************************************************************************
// 2139  * @fn      MT_ZdoSetRejoinParameters(pBuf);
// 2140  *
// 2141  * @brief   Set Rejoin backoff and scan duration from MT
// 2142  *
// 2143  * @param   pBuf  - MT message data
// 2144  *
// 2145  * @return  void
// 2146  *************************************************************************************************/
// 2147 static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
// 2148 {
// 2149   uint8 cmdId;
// 2150   uint8 retValue;
// 2151   uint32 rejoinBackoffDuration, rejoinScanDuration;
// 2152 
// 2153   // parse header
// 2154   cmdId = pBuf[MT_RPC_POS_CMD1];
// 2155   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2156 
// 2157   //Rejoin Backoff Duration
// 2158   rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
// 2159   pBuf += 4;
// 2160 
// 2161   //Rejoin Scan Duration
// 2162   rejoinScanDuration = osal_build_uint32(pBuf, 4);
// 2163 
// 2164   ZDApp_SetRejoinScanDuration(rejoinScanDuration);
// 2165   ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
// 2166 
// 2167   retValue = ZSuccess;
// 2168 
// 2169   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 2170 
// 2171 }
// 2172 
// 2173 #endif /* MT_ZDO_FUNC */
// 2174 
// 2175 
// 2176 /***************************************************************************************************
// 2177  * Callback handling function
// 2178  ***************************************************************************************************/
// 2179 
// 2180 #if defined (MT_ZDO_CB_FUNC)
// 2181 
// 2182 /***************************************************************************************************
// 2183  * @fn      MT_ZdoStateChangeCB
// 2184  *
// 2185  * @brief   Handle state change OSAL message from ZDO.
// 2186  *
// 2187  * @param   pMsg  - Message data
// 2188  *
// 2189  * @return  void
// 2190  */
// 2191 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 2192 {
// 2193   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2194                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 2195 }
// 2196 
// 2197 /***************************************************************************************************
// 2198  * @fn     MT_ZdoDirectCB()
// 2199  *
// 2200  * @brief  ZDO direct callback.  Build an MT message directly from the
// 2201  *         over-the-air ZDO message.
// 2202  *
// 2203  * @param  pData - Incoming AF frame.
// 2204  *
// 2205  * @return  none
// 2206  ***************************************************************************************************/
// 2207 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2208 {
// 2209   uint8 len, *pBuf;
// 2210   uint16 origClusterId;
// 2211 
// 2212   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 2213   origClusterId = pData->clusterId;
// 2214 
// 2215   // Is the message an exception or not a response?
// 2216   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 2217   {
// 2218     return;  // Handled somewhere else or not needed.
// 2219   }
// 2220 
// 2221   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 2222    * two bytes for srcAddr.
// 2223    */
// 2224   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 2225 
// 2226   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2227   {
// 2228     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 2229 
// 2230     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 2231     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 2232 
// 2233     /* copy ZDO data, skipping one-byte sequence number */
// 2234     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 2235 
// 2236     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2237     osal_mem_free(pBuf);
// 2238   }
// 2239 }
// 2240 
// 2241 /***************************************************************************************************
// 2242  * @fn     MT_ZdoHandleExceptions()
// 2243  *
// 2244  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 2245  *
// 2246  * @param  pData - Incoming AF frame.
// 2247  *
// 2248  * @return  TRUE if handled by this function, FALSE if not
// 2249  ***************************************************************************************************/
// 2250 static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2251 {
// 2252   uint8 ret = TRUE;
// 2253   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 2254   ZDO_DeviceAnnce_t devAnnce;
// 2255   uint8 doDefault = FALSE;
// 2256 
// 2257   switch ( inMsg->clusterID )
// 2258   {
// 2259     case NWK_addr_rsp:
// 2260     case IEEE_addr_rsp:
// 2261       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 2262       {
// 2263         if ( nwkRsp->status == ZDO_SUCCESS )
// 2264         {
// 2265           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 2266         }
// 2267         osal_mem_free( nwkRsp );
// 2268       }
// 2269       break;
// 2270 
// 2271     case Device_annce:
// 2272       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 2273       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 2274       break;
// 2275 
// 2276     case Simple_Desc_rsp:
// 2277       if ( pData->cmd.DataLength > 5 )
// 2278       {
// 2279         ret = FALSE;
// 2280       }
// 2281       else
// 2282       {
// 2283         doDefault = TRUE;
// 2284       }
// 2285       break;
// 2286 
// 2287     default:
// 2288       ret = FALSE;
// 2289       break;
// 2290   }
// 2291 
// 2292   if ( doDefault )
// 2293   {
// 2294     ret = FALSE;
// 2295     pData->clusterId = MtZdoDef_rsp;
// 2296     pData->cmd.DataLength = 2;
// 2297   }
// 2298 
// 2299   return ( ret );
// 2300 }
// 2301 
// 2302 /***************************************************************************************************
// 2303  * @fn      MT_ZdoAddrRspCB
// 2304  *
// 2305  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 2306  *
// 2307  * @param   pMsg  - Message data
// 2308  *
// 2309  * @return  void
// 2310  */
// 2311 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 2312 {
// 2313   uint8   listLen, len, *pBuf;
// 2314 
// 2315   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 2316 
// 2317   /* get length, sanity check length */
// 2318   listLen = pMsg->numAssocDevs;
// 2319 
// 2320   /* calculate msg length */
// 2321   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 2322 
// 2323   /* get buffer */
// 2324   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2325   {
// 2326     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 2327     uint8 *pTmp = pBuf;
// 2328 
// 2329     *pTmp++ = pMsg->status;
// 2330 
// 2331     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2332     pTmp += Z_EXTADDR_LEN;
// 2333 
// 2334     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2335     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2336 
// 2337     *pTmp++ = pMsg->startIndex;
// 2338     *pTmp++ = listLen;
// 2339 
// 2340     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 2341 
// 2342     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2343     osal_mem_free(pBuf);
// 2344   }
// 2345 }
// 2346 
// 2347 /***************************************************************************************************
// 2348  * @fn      MT_ZdoEndDevAnnceCB
// 2349  *
// 2350  * @brief   Handle end device announce OSAL message from ZDO.
// 2351  *
// 2352  * @param   pMsg  - Message data
// 2353  *
// 2354  * @return  void
// 2355  */
// 2356 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 2357 {
// 2358   uint8 *pBuf;
// 2359 
// 2360   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 2361   {
// 2362     uint8 *pTmp = pBuf;
// 2363 
// 2364     *pTmp++ = LO_UINT16(srcAddr);
// 2365     *pTmp++ = HI_UINT16(srcAddr);
// 2366 
// 2367     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2368     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2369 
// 2370     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2371     pTmp += Z_EXTADDR_LEN;
// 2372 
// 2373     *pTmp = pMsg->capabilities;
// 2374 
// 2375     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2376                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2377                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 2378     osal_mem_free(pBuf);
// 2379   }
// 2380 }
// 2381 
// 2382 /***************************************************************************************************
// 2383  * @fn      MT_ZdoSrcRtgCB
// 2384  *
// 2385  * @brief   Handle Src Route from ZDO.
// 2386  *
// 2387  * @param   pStr  - pointer to the data structure for the src route
// 2388  *
// 2389  * @return  void*
// 2390  */
// 2391 void* MT_ZdoSrcRtgCB( void *pStr )
// 2392 {
// 2393   uint8 len, *pBuf;
// 2394   zdoSrcRtg_t *pSrcRtg = pStr;
// 2395 
// 2396   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2397   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 2398 
// 2399   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2400   {
// 2401     uint8 idx, *pTmp = pBuf;
// 2402     uint16 *pRelay;
// 2403 
// 2404     // Packet payload
// 2405     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 2406     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 2407     *pTmp++ = pSrcRtg->relayCnt;
// 2408 
// 2409     // Relay List
// 2410     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 2411     {
// 2412       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 2413       {
// 2414         *pTmp++ = LO_UINT16(*pRelay);
// 2415         *pTmp++ = HI_UINT16(*pRelay);
// 2416         pRelay++;
// 2417       }
// 2418     }
// 2419     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2420                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 2421     osal_mem_free(pBuf);
// 2422   }
// 2423 
// 2424   return NULL;
// 2425 }
// 2426 
// 2427 /***************************************************************************************************
// 2428  * @fn          MT_ZdoConcentratorIndCB
// 2429  *
// 2430  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2431  *
// 2432  * @param       pStr - pointer to a parameter and a structure of parameters
// 2433  *
// 2434  * @return      NULL
// 2435  ***************************************************************************************************/
// 2436 void *MT_ZdoConcentratorIndCB(void *pStr)
// 2437 {
// 2438   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2439   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2440 
// 2441   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2442   *pTmp++ = HI_UINT16(pInd->nwkAddr);
// 2443   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
// 2444   *pTmp = pInd->pktCost;
// 2445 
// 2446   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2447                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
// 2448   return NULL;
// 2449 }
// 2450 
// 2451 /***************************************************************************************************
// 2452  * @fn          MT_ZdoLeaveInd
// 2453  *
// 2454  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2455  *
// 2456  * @param       vPtr - Pointer to the received Leave Indication message.
// 2457  *
// 2458  * @return      NULL
// 2459  ***************************************************************************************************/
// 2460 static void *MT_ZdoLeaveInd(void *vPtr)
// 2461 {
// 2462   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2463   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2464 
// 2465   buf[0] = LO_UINT16(pInd->srcAddr);
// 2466   buf[1] = HI_UINT16(pInd->srcAddr);
// 2467   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
// 2468   buf[2+Z_EXTADDR_LEN] = pInd->request;
// 2469   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
// 2470   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
// 2471 
// 2472   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2473                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
// 2474   return NULL;
// 2475 }
// 2476 
// 2477 /***************************************************************************************************
// 2478  * @fn          MT_ZdoTcDeviceInd
// 2479  *
// 2480  * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
// 2481  *
// 2482  * @param       params - pointer to Trust Center joining device information
// 2483  *
// 2484  * @return      NULL
// 2485  ***************************************************************************************************/
// 2486 void *MT_ZdoTcDeviceInd( void *params )
// 2487 {
// 2488   ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
// 2489   uint8 buf[12];
// 2490 
// 2491   buf[0] = LO_UINT16( pDev->nwkAddr );
// 2492   buf[1] = HI_UINT16( pDev->nwkAddr );
// 2493   (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
// 2494   buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
// 2495   buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
// 2496 
// 2497   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2498                                        MT_ZDO_TC_DEVICE_IND, 12, buf );
// 2499 
// 2500   return ( NULL );
// 2501 }
// 2502 
// 2503 /***************************************************************************************************
// 2504  * @fn          MT_ZdoPermitJoinInd
// 2505  *
// 2506  * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
// 2507  *
// 2508  * @param       duration - permit join duration
// 2509  *
// 2510  * @return      NULL
// 2511  ***************************************************************************************************/
// 2512 void *MT_ZdoPermitJoinInd( void *duration )
// 2513 {
// 2514   if ( ignoreIndication == FALSE )
// 2515   {
// 2516     // The following condition was moved here from NLME_PermitJoiningSet. It was removed there to
// 2517     // support calling the callback for every time a permit join command is processed, and let the
// 2518     // callback decide how to act.
// 2519     if ((( *(uint8*)duration == 0x00 ) && ( NLME_PermitJoining )) || (( *(uint8*)duration != 0x00 ) && ( ! NLME_PermitJoining )))
// 2520     {  
// 2521       MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2522                                        MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
// 2523     }
// 2524   }
// 2525 
// 2526   return ( NULL );
// 2527 }
// 2528 #endif // MT_ZDO_CB_FUNC
// 2529 
// 2530 /***************************************************************************************************
// 2531  * @fn      MT_ZdoSendMsgCB
// 2532  *
// 2533  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2534  *
// 2535  * @param   pMsg  - Message data
// 2536  *
// 2537  * @return  void
// 2538  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2539 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
MT_ZdoSendMsgCB:
          CFI Block cfiBlock277 Using cfiCommon0
          CFI Function MT_ZdoSendMsgCB
        CODE
// 2540 {
        FUNCALL MT_ZdoSendMsgCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ZdoSendMsgCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV       A,#-0x13
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2541   uint8 len = pMsg->asduLen + 9;
        MOV       A,R2
        ADD       A,#0x10
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V4,R0
        MOV       ?V5,A
        MOV       DPL,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x9
        MOV       ?V2,A
// 2542   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2543 
// 2544   if (pBuf != NULL)
        MOV       A,R2
        ORL       A,R3
        JNZ       $+5
        LJMP      ??MT_ZdoSendMsgCB_0 & 0xFFFF
// 2545   {
// 2546     uint8 *pTmp = pBuf;
// 2547 
// 2548     // Assuming exclusive use of network short addresses.
// 2549     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX      @DPTR,A
// 2550     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_168:
        LCALL     ?Subroutine35 & 0xFFFF
// 2551     *pTmp++ = pMsg->wasBroadcast;
??CrossCallReturnLabel_84:
        LCALL     ??Subroutine68_0 & 0xFFFF
??CrossCallReturnLabel_166:
        INC       DPTR
        MOVX      @DPTR,A
// 2552     *pTmp++ = LO_UINT16(pMsg->clusterID);
        MOV       A,R6
        ADD       A,#0xc
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL     ?Subroutine18 & 0xFFFF
// 2553     *pTmp++ = HI_UINT16(pMsg->clusterID);
??CrossCallReturnLabel_33:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine16 & 0xFFFF
// 2554     *pTmp++ = pMsg->SecurityUse;
??CrossCallReturnLabel_29:
        MOV       A,R6
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine15 & 0xFFFF
// 2555     *pTmp++ = pMsg->TransSeq;
??CrossCallReturnLabel_27:
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine11 & 0xFFFF
// 2556     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2557     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_19:
        MOV       A,R6
        ADD       A,#0x11
        LCALL     ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL     ?Subroutine10 & 0xFFFF
// 2558     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
??CrossCallReturnLabel_17:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine8 & 0xFFFF
// 2559     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R6
        ADD       A,#0x13
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x9
        MOV       R2,A
        CLR       A
        ADDC      A,?V1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2560 
// 2561     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2562                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,?V2
        MOV       R2,#-0x1
        MOV       R1,#0x45
        LCALL     `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 2563 
// 2564     osal_mem_free(pBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2565   }
// 2566 }
??MT_ZdoSendMsgCB_0:
        MOV       R7,#0xb
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock277

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond278 Using cfiCommon0
          CFI Function MT_ZdoJoinCnfCB
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function MT_ZdoSendMsgCB
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function MT_ZdoSendMsgCB
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker281 Using cfiCommon1
          CFI (cfiPicker281) NoFunction
          CFI (cfiPicker281) Picker
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiPicker281

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond282 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function MT_ZdoSendMsgCB
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+-2
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker284 Using cfiCommon1
          CFI (cfiPicker284) NoFunction
          CFI (cfiPicker284) Picker
        MOVX      @DPTR,A
        MOV       A,R6
        ADD       A,#0xb
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiPicker284

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond285 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function MT_ZdoSendMsgCB
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond286) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond286) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond286) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond286) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond286) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond286) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond286) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond286) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-2
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker287 Using cfiCommon1
          CFI (cfiPicker287) NoFunction
          CFI (cfiPicker287) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_171:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiPicker287

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond288 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function MT_ZdoSendMsgCB
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond289) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond289) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond289) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond289) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond289) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond289) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond289) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond289) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-2
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker290 Using cfiCommon1
          CFI (cfiPicker290) NoFunction
          CFI (cfiPicker290) Picker
        INC       DPTR
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_110:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiPicker290

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond291 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function MT_ZdoSendMsgCB
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-2
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker293 Using cfiCommon1
          CFI (cfiPicker293) NoFunction
          CFI (cfiPicker293) Picker
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_109:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiPicker293

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function MT_ZdoSendMsgCB
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_29
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond295) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond295) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function MT_ZdoBeaconIndCB
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_26
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-4
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function MT_ZdoSendMsgCB
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_27
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond297) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond297) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond297) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond297) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond297) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond297) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond297) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond297) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-4
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker298 Using cfiCommon1
          CFI (cfiPicker298) NoFunction
          CFI (cfiPicker298) Picker
        LCALL     ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_129:
        RET
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiPicker298

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine61:
          CFI Block cfiCond299 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function MT_ZdoSendMsgCB
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_29
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond300) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond300) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond300) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond300) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond300) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-6
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function MT_ZdoBeaconIndCB
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_26
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-6
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function MT_ZdoSendMsgCB
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_27
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+-6
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function MT_ZdoBeaconIndCB
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_18
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-8
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function MT_ZdoSendMsgCB
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_19
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond304) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond304) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-8
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function MT_ZdoBeaconIndCB
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_16
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-8
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function MT_ZdoSendMsgCB
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_17
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond306) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond306) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond306) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-8
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function MT_ZdoBeaconIndCB
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_14
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-8
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function MT_ZdoBeaconIndCB
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_15
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-8
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function MT_ZdoBeaconIndCB
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_12
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-8
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function MT_ZdoSendMsgCB
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_13
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-8
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker311 Using cfiCommon1
          CFI (cfiPicker311) NoFunction
          CFI (cfiPicker311) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiPicker311

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond312 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function MT_ZdoSendMsgCB
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond313) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond313) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond313) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond313) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond313) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond313) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-2
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker314 Using cfiCommon1
          CFI (cfiPicker314) NoFunction
          CFI (cfiPicker314) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_108:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiPicker314

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond315 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function MT_ZdoSendMsgCB
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond316) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond316) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-2
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker317 Using cfiCommon1
          CFI (cfiPicker317) NoFunction
          CFI (cfiPicker317) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_107:
        INC       DPTR
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiPicker317

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond318 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function MT_ZdoSendMsgCB
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_19
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond319) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond319) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond319) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond319) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond319) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond319) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-4
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function MT_ZdoBeaconIndCB
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_16
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-4
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function MT_ZdoSendMsgCB
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_17
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-4
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker322 Using cfiCommon1
          CFI (cfiPicker322) NoFunction
          CFI (cfiPicker322) Picker
        LCALL     ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_128:
        RET
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiPicker322

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine59:
          CFI Block cfiCond323 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function MT_ZdoSendMsgCB
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_19
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond324) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond324) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond324) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond324) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond324) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+-6
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function MT_ZdoBeaconIndCB
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_16
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-6
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function MT_ZdoSendMsgCB
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_17
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond326) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond326) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond326) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-6
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function MT_ZdoBeaconIndCB
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_14
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-6
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function MT_ZdoBeaconIndCB
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_15
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+-6
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function MT_ZdoBeaconIndCB
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_12
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-6
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function MT_ZdoSendMsgCB
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_127, ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_13
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond330) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-6
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker331 Using cfiCommon1
          CFI (cfiPicker331) NoFunction
          CFI (cfiPicker331) Picker
        LCALL     ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_130:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiPicker331

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond332 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function MT_ZdoSendMsgCB
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-2
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker334 Using cfiCommon1
          CFI (cfiPicker334) NoFunction
          CFI (cfiPicker334) Picker
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_105:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiPicker334

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond335 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function MT_ZdoBeaconIndCB
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_15
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+-4
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function MT_ZdoBeaconIndCB
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_12
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+-4
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function MT_ZdoSendMsgCB
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_105, ??CrossCallReturnLabel_13
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+-4
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker339 Using cfiCommon1
          CFI (cfiPicker339) NoFunction
          CFI (cfiPicker339) Picker
        INC       DPTR
        LCALL     ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_127:
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiPicker339

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function MT_ZdoSendMsgCB
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond341) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond341) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond341) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-2
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker342 Using cfiCommon1
          CFI (cfiPicker342) NoFunction
          CFI (cfiPicker342) Picker
        MOV       A,R6
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,A
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_170:
        RET
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiPicker342

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond343 Using cfiCommon0
          CFI Function MT_ZdoBeaconIndCB
          CFI Conditional ??CrossCallReturnLabel_169
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function MT_ZdoBeaconIndCB
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_167
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+-4
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function MT_ZdoSendMsgCB
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_168
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond345) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond345) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond345) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+-4
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function MT_ZdoSendMsgCB
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_172, ??CrossCallReturnLabel_166
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-4
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function MT_ZdoBeaconIndCB
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_32
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+-4
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function MT_ZdoSendMsgCB
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_171, ??CrossCallReturnLabel_33
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-4
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function MT_ZdoBeaconIndCB
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_7
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-4
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function MT_ZdoSendMsgCB
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_170, ??CrossCallReturnLabel_8
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+-4
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker351 Using cfiCommon1
          CFI (cfiPicker351) NoFunction
          CFI (cfiPicker351) Picker
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiPicker351

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoMatchDescRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMatchDescRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoEndDevBindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoEndDevBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoBindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoUnbindRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoUnbindRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoMgmtNwkUpdateRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoMgmtNwkUpdateRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSendData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNwkAddrOfInterestReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkAddrOfInterestReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoNwkDiscoveryCnfCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoNwkDiscoveryCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoBeaconIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoBeaconIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoJoinCnfCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoJoinCnfCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ZdoSendMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ZdoSendMsgCB

        END
// 2567 
// 2568 
// 2569 #if defined ( MT_ZDO_EXTENSIONS )
// 2570 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2571 /***************************************************************************************************
// 2572  * @fn          MT_ZdoSecUpdateNwkKey
// 2573  *
// 2574  * @brief       Handle the ZDO Security Update Network Key extension message
// 2575  *
// 2576  * @param       pBuf - Pointer to the received message data.
// 2577  *
// 2578  * @return      NULL
// 2579  ***************************************************************************************************/
// 2580 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
// 2581 {
// 2582   uint16 dstAddr;
// 2583   uint8 keySeqNum;
// 2584   uint8 status;
// 2585 
// 2586   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2587 
// 2588   dstAddr = osal_build_uint16( pBuf );
// 2589   pBuf += 2;
// 2590   keySeqNum = *pBuf++;
// 2591 
// 2592   status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
// 2593 
// 2594   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2595                                        MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
// 2596 }
// 2597 
// 2598 /***************************************************************************************************
// 2599  * @fn          MT_ZdoSecSwitchNwkKey
// 2600  *
// 2601  * @brief       Handle the ZDO Security Switch Network Key extension message
// 2602  *
// 2603  * @param       pBuf - Pointer to the received message data.
// 2604  *
// 2605  * @return      NULL
// 2606  ***************************************************************************************************/
// 2607 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
// 2608 {
// 2609   uint16 dstAddr;
// 2610   uint8 keySeqNum;
// 2611   uint8 status;
// 2612 
// 2613   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2614 
// 2615   dstAddr = osal_build_uint16( pBuf );
// 2616   pBuf += 2;
// 2617   keySeqNum = *pBuf++;
// 2618 
// 2619   status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
// 2620 
// 2621   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2622                                        MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
// 2623 }
// 2624 #endif // ZG_BUILD_COORDINATOR_TYPE
// 2625 
// 2626 /***************************************************************************************************
// 2627  * @fn          MT_ZdoSecAddLinkKey
// 2628  *
// 2629  * @brief       Handle the ZDO Security Add Link Key extension message
// 2630  *
// 2631  * @param       pBuf - Pointer to the received message data.
// 2632  *
// 2633  * @return      NULL
// 2634  ***************************************************************************************************/
// 2635 static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
// 2636 {
// 2637   uint16 shortAddr;
// 2638   uint8 *pExtAddr;
// 2639   uint8 status;
// 2640 
// 2641   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2642 
// 2643   shortAddr = osal_build_uint16( pBuf );
// 2644   pBuf += 2;
// 2645   pExtAddr = pBuf;
// 2646   pBuf += Z_EXTADDR_LEN;
// 2647 
// 2648   status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
// 2649 
// 2650   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2651                                        MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
// 2652 }
// 2653 
// 2654 /***************************************************************************************************
// 2655  * @fn          MT_ZdoSecEntryLookupExt
// 2656  *
// 2657  * @brief       Handle the ZDO Security Entry Lookup Extended extension message
// 2658  *
// 2659  * @param       pBuf - Pointer to the received message data.
// 2660  *
// 2661  * @return      NULL
// 2662  ***************************************************************************************************/
// 2663 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
// 2664 {
// 2665   ZDSecMgrEntry_t *pEntry = NULL;
// 2666   uint8 buf[6] = {0};
// 2667 
// 2668   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2669 
// 2670   // lookup entry index for specified EXT address
// 2671   buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
// 2672   if ( pEntry )
// 2673   {
// 2674     buf[1] = LO_UINT16( pEntry->ami );
// 2675     buf[2] = HI_UINT16( pEntry->ami );
// 2676     buf[3] = LO_UINT16( pEntry->keyNvId );
// 2677     buf[4] = HI_UINT16( pEntry->keyNvId );
// 2678     buf[5] = (uint8)pEntry->authenticateOption;
// 2679   }
// 2680 
// 2681   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2682                                        MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
// 2683 }
// 2684 
// 2685 /***************************************************************************************************
// 2686  * @fn          MT_ZdoSecDeviceRemove
// 2687  *
// 2688  * @brief       Handle the ZDO Security Remove Device extension message
// 2689  *
// 2690  * @param       pBuf - Pointer to the received message data.
// 2691  *
// 2692  * @return      NULL
// 2693  ***************************************************************************************************/
// 2694 static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
// 2695 {
// 2696   ZStatus_t status;
// 2697 
// 2698   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2699 
// 2700   // lookup entry index for specified EXT address
// 2701   status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
// 2702 
// 2703   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2704                                        MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
// 2705 }
// 2706 
// 2707 /***************************************************************************************************
// 2708  * @fn          MT_ZdoExtRouteDisc
// 2709  *
// 2710  * @brief       Handle the ZDO Route Discovery extension message
// 2711  *
// 2712  * @param       pBuf - Pointer to the received message data.
// 2713  *
// 2714  * @return      NULL
// 2715  ***************************************************************************************************/
// 2716 static void MT_ZdoExtRouteDisc( uint8 *pBuf )
// 2717 {
// 2718   ZStatus_t status;
// 2719   uint16 dstAddr;
// 2720 
// 2721   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2722 
// 2723   dstAddr = osal_build_uint16( pBuf );
// 2724 
// 2725   status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
// 2726 
// 2727 
// 2728   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2729                                        MT_ZDO_EXT_ROUTE_DISC, 1, &status );
// 2730 }
// 2731 
// 2732 /***************************************************************************************************
// 2733  * @fn          MT_ZdoExtRouteCheck
// 2734  *
// 2735  * @brief       Handle the ZDO Route Check extension message
// 2736  *
// 2737  * @param       pBuf - Pointer to the received message data.
// 2738  *
// 2739  * @return      NULL
// 2740  ***************************************************************************************************/
// 2741 static void MT_ZdoExtRouteCheck( uint8 *pBuf )
// 2742 {
// 2743   ZStatus_t status;
// 2744   uint16 dstAddr;
// 2745 
// 2746   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2747 
// 2748   dstAddr = osal_build_uint16( pBuf );
// 2749 
// 2750   status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
// 2751 
// 2752   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2753                                        MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
// 2754 }
// 2755 
// 2756 /***************************************************************************************************
// 2757  * @fn          MT_ZdoExtRemoveGroup
// 2758  *
// 2759  * @brief       Handle the ZDO extension Remove Group message
// 2760  *
// 2761  * @param       pBuf - Pointer to the received message data.
// 2762  *
// 2763  * @return      NULL
// 2764  ***************************************************************************************************/
// 2765 static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
// 2766 {
// 2767   ZStatus_t status;
// 2768   uint8 endpoint;
// 2769   uint16 groupID;
// 2770 
// 2771   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2772 
// 2773   endpoint = *pBuf++;
// 2774   groupID = osal_build_uint16( pBuf );
// 2775 
// 2776   if ( aps_RemoveGroup( endpoint, groupID ) )
// 2777   {
// 2778     status = ZSuccess;
// 2779   }
// 2780   else
// 2781   {
// 2782     status = ZFailure;
// 2783   }
// 2784 
// 2785   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2786                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2787 }
// 2788 
// 2789 /***************************************************************************************************
// 2790  * @fn          MT_ZdoExtRemoveAllGroup
// 2791  *
// 2792  * @brief       Handle the ZDO extension Remove All Groups message
// 2793  *
// 2794  * @param       pBuf - Pointer to the received message data.
// 2795  *
// 2796  * @return      NULL
// 2797  ***************************************************************************************************/
// 2798 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
// 2799 {
// 2800   ZStatus_t status = ZSuccess;
// 2801 
// 2802   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2803 
// 2804   aps_RemoveAllGroup( *pBuf );
// 2805 
// 2806   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2807                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2808 }
// 2809 
// 2810 /***************************************************************************************************
// 2811  * @fn          MT_ZdoExtFindAllGroupsEndpoint
// 2812  *
// 2813  * @brief       Handle the ZDO extension Find All Groups for Endpoint message
// 2814  *
// 2815  * @param       pBuf - Pointer to the received message data.
// 2816  *
// 2817  * @return      NULL
// 2818  ***************************************************************************************************/
// 2819 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
// 2820 {
// 2821   uint16 groupList[ APS_MAX_GROUPS ];
// 2822   uint8 groups;
// 2823   uint8 msgLen;
// 2824   uint8 *pMsg;
// 2825 
// 2826   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2827 
// 2828   groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
// 2829 
// 2830   msgLen = 1 + (2 * groups);
// 2831   pMsg = osal_mem_alloc( msgLen );
// 2832   if ( pMsg )
// 2833   {
// 2834     uint8 x;
// 2835     uint8 *pBuf = pMsg;
// 2836 
// 2837     *pBuf++ = groups;
// 2838     for ( x = 0; x < groups; x++ )
// 2839     {
// 2840       *pBuf++ = LO_UINT16( groupList[x] );
// 2841       *pBuf++ = HI_UINT16( groupList[x] );
// 2842     }
// 2843 
// 2844     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2845                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
// 2846     osal_mem_free( pMsg );
// 2847   }
// 2848   else
// 2849   {
// 2850     groups = 0;
// 2851     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2852                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
// 2853   }
// 2854 }
// 2855 
// 2856 /***************************************************************************************************
// 2857  * @fn          MT_ZdoExtFindGroup
// 2858  *
// 2859  * @brief       Handle the ZDO extension Find Group message
// 2860  *
// 2861  * @param       pBuf - Pointer to the received message data.
// 2862  *
// 2863  * @return      NULL
// 2864  ***************************************************************************************************/
// 2865 static void MT_ZdoExtFindGroup( uint8 *pBuf )
// 2866 {
// 2867   uint8 endpoint;
// 2868   uint16 groupID;
// 2869   aps_Group_t *pGroup;
// 2870   uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
// 2871 
// 2872   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2873 
// 2874   endpoint = *pBuf++;
// 2875   groupID = osal_build_uint16( pBuf );
// 2876 
// 2877   pGroup = aps_FindGroup( endpoint, groupID );
// 2878   if ( pGroup  )
// 2879   {
// 2880     buf[0] = ZSuccess;
// 2881     buf[1] = LO_UINT16( pGroup->ID );
// 2882     buf[2] = HI_UINT16( pGroup->ID );
// 2883     buf[3] = pGroup->name[0];
// 2884     osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
// 2885   }
// 2886   else
// 2887   {
// 2888     buf[0] = ZFailure;
// 2889   }
// 2890 
// 2891   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2892                       MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
// 2893 }
// 2894 
// 2895 /***************************************************************************************************
// 2896  * @fn          MT_ZdoExtAddGroup
// 2897  *
// 2898  * @brief       Handle the ZDO extension Add Group message
// 2899  *
// 2900  * @param       pBuf - Pointer to the received message data.
// 2901  *
// 2902  * @return      NULL
// 2903  ***************************************************************************************************/
// 2904 static void MT_ZdoExtAddGroup( uint8 *pBuf )
// 2905 {
// 2906   ZStatus_t status = ZSuccess;
// 2907   aps_Group_t group = {0};
// 2908   uint8 endpoint;
// 2909 
// 2910   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2911 
// 2912   endpoint = *pBuf++;
// 2913   group.ID = osal_build_uint16( pBuf );
// 2914   group.name[0] = pBuf[2];
// 2915   if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
// 2916   {
// 2917     group.name[0] = (APS_GROUP_NAME_LEN-1);
// 2918   }
// 2919 
// 2920   if (group.name[0] > 0 )
// 2921   {
// 2922     osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
// 2923   }
// 2924 
// 2925   status = aps_AddGroup( endpoint, &group );
// 2926 
// 2927   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2928                                        MT_ZDO_EXT_ADD_GROUP, 1, &status );
// 2929 }
// 2930 
// 2931 /***************************************************************************************************
// 2932  * @fn          MT_ZdoExtCountAllGroups
// 2933  *
// 2934  * @brief       Handle the ZDO extension Count All Groups message
// 2935  *
// 2936  * @param       pBuf - Pointer to the received message data.
// 2937  *
// 2938  * @return      NULL
// 2939  ***************************************************************************************************/
// 2940 static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
// 2941 {
// 2942   ZStatus_t status = 0;
// 2943 
// 2944   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2945 
// 2946   status = (ZStatus_t)aps_CountAllGroups();
// 2947 
// 2948   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2949                                        MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
// 2950 }
// 2951 
// 2952 
// 2953 /***************************************************************************************************
// 2954  * @fn          MT_ZdoExtRxIdle
// 2955  *
// 2956  * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
// 2957  *
// 2958  * @param       pBuf - Pointer to the received message data.
// 2959  *
// 2960  * @return      NULL
// 2961  ***************************************************************************************************/
// 2962 static void MT_ZdoExtRxIdle( uint8 *pBuf )
// 2963 {
// 2964   uint8 setFlag;
// 2965   uint8 setValue;
// 2966 
// 2967   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2968 
// 2969   setFlag = *pBuf++;
// 2970   setValue = *pBuf++;
// 2971 
// 2972   if ( setFlag )
// 2973   {
// 2974     ZMacSetReq( ZMacRxOnIdle, &setValue );
// 2975   }
// 2976   else
// 2977   {
// 2978     ZMacGetReq( ZMacRxOnIdle, &setValue );
// 2979   }
// 2980 
// 2981   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2982                                        MT_ZDO_EXT_RX_IDLE, 1, &setValue );
// 2983 }
// 2984 
// 2985 /***************************************************************************************************
// 2986  * @fn          MT_ZdoExtNwkInfo
// 2987  *
// 2988  * @brief       Handle the ZDO extension Network Info Request message
// 2989  *
// 2990  * @param       pBuf - Pointer to the received message data.
// 2991  *
// 2992  * @return      NULL
// 2993  ***************************************************************************************************/
// 2994 static void MT_ZdoExtNwkInfo( uint8 *pBuf )
// 2995 {
// 2996   uint8 buf[24];
// 2997   uint8 *pMsg;
// 2998 
// 2999   pMsg = buf;
// 3000 
// 3001   *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
// 3002   *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
// 3003 
// 3004   *pMsg++ = devState;
// 3005   *pMsg++ = LO_UINT16( _NIB.nwkPanId );
// 3006   *pMsg++ = HI_UINT16( _NIB.nwkPanId );
// 3007   *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
// 3008   *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
// 3009   osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
// 3010   pMsg += 8;
// 3011   osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
// 3012   pMsg += 8;
// 3013   *pMsg++ = _NIB.nwkLogicalChannel;
// 3014 
// 3015   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3016                                        MT_ZDO_EXT_NWK_INFO, 24, buf );
// 3017 }
// 3018 
// 3019 /***************************************************************************************************
// 3020  * @fn          MT_ZdoExtSecApsRemoveReq
// 3021  *
// 3022  * @brief       Handle the ZDO extension Security Manager APS Remove Request message
// 3023  *
// 3024  * @param       pBuf - Pointer to the received message data.
// 3025  *
// 3026  * @return      NULL
// 3027  ***************************************************************************************************/
// 3028 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
// 3029 {
// 3030   ZStatus_t status = 0;
// 3031   uint16 parentAddr;
// 3032   uint16 nwkAddr;
// 3033 
// 3034   pBuf += MT_RPC_FRAME_HDR_SZ;
// 3035 
// 3036   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 3037   {
// 3038     parentAddr = osal_build_uint16( pBuf );
// 3039     pBuf += 2;
// 3040 
// 3041     nwkAddr = osal_build_uint16( pBuf );
// 3042     pBuf += 2;
// 3043 
// 3044     status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
// 3045   }
// 3046   else
// 3047   {
// 3048     status = ZUnsupportedMode;
// 3049   }
// 3050 
// 3051   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3052                                        MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
// 3053 }
// 3054 
// 3055 /***************************************************************************************************
// 3056  * @fn          MT_ZdoExtSetParams
// 3057  *
// 3058  * @brief       Set Parameters not settable through NV.
// 3059  *
// 3060  * @param       pBuf - Pointer to the received message data.
// 3061  *
// 3062  * @return      NULL
// 3063  ***************************************************************************************************/
// 3064 static void MT_ZdoExtSetParams( uint8 *pBuf )
// 3065 {
// 3066   ZStatus_t status = ZSuccess;
// 3067   uint8 useMultiCast;
// 3068 
// 3069   pBuf += MT_RPC_FRAME_HDR_SZ;
// 3070 
// 3071   // Is the useMulticast in this message
// 3072   useMultiCast = *pBuf++;
// 3073   if ( useMultiCast & 0x80 )
// 3074   {
// 3075     if ( useMultiCast & 0x7F )
// 3076     {
// 3077       _NIB.nwkUseMultiCast = TRUE;
// 3078     }
// 3079     else
// 3080     {
// 3081       _NIB.nwkUseMultiCast = FALSE;
// 3082     }
// 3083   }
// 3084 
// 3085   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3086                                        MT_ZDO_EXT_SET_PARAMS, 1, &status );
// 3087 }
// 3088 #endif // MT_ZDO_EXTENSIONS
// 3089 
// 3090 #endif   /*ZDO Command Processing in MT*/
// 3091 /***************************************************************************************************
// 3092 ***************************************************************************************************/
// 
// 4 492 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     7 bytes in segment XDATA_Z
// 
//    78 bytes of CODE     memory
// 4 492 bytes of HUGECODE memory
//     7 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
