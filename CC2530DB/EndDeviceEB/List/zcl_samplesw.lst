###############################################################################
#
# IAR C/C++ Compiler V10.30.1.6000 for 8051               16/Mar/2020  15:56:08
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation edition 10.30
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\monster\AppData\Local\Temp\EWC65A.tmp ("C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\Source\zcl_samplesw.c" -D
#        NV_INIT -D xNV_RESTORE -D TC_LINKKEY_JOIN -D ZBA_FALLBACK_NWKKEY -D
#        xPOWER_SAVING -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_MGMT -D xZCL_EZMODE -D
#        MT_APP_CNF_FUNC -D MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER
#        -D ZCL_WRITE -D ZCL_REPORT -D ZCL_BASIC -D ZCL_IDENTIFY -D ZCL_ON_OFF
#        -D ZCL_GROUPS -D ZCL_DIAGNOSTIC -D FEATURE_SYSTEM_STATS -D
#        HAL_KEY=FALSE -D HAL_LED=FALSE -D HAL_LCD=FALSE -D HAL_UART=FALSE -D
#        BDB_REPORTING -lC "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List"
#        -lA "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=MAX_CHANNELS_24GHZ -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\" -I "C:\Texas
#        Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\Source\" -I
#        "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Russian_RUS.1251
#    List file          =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\List\zcl_samplesw.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack
#        3.0.1\Projects\zstack\HomeAutomation\zigIt\CC2530DB\EndDeviceEB\Obj\zcl_samplesw.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack 3.0.1\Projects\zstack\HomeAutomation\zigIt\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclZigIt_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "zcl.h"
     70          #include "ZComDef.h"
     71          #include "OSAL.h"
     72          #include "AF.h"
     73          #include "ZDApp.h"
     74          #include "ZDObject.h"
     75          #include "ZDProfile.h"
     76          #include "MT_SYS.h"
     77          
     78          #include "zcl.h"
     79          #include "zcl_general.h"
     80          #include "zcl_ha.h"
     81          #include "zcl_samplesw.h"
     82          #include "zcl_diagnostic.h"
     83          
     84          #include "onboard.h"
     85          
     86          /* HAL */
     87          #include "hal_lcd.h"
     88          #include "hal_led.h"
     89          #include "hal_key.h"
     90          
     91          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
     92          #include "zcl_ota.h"
     93          #include "hal_ota.h"
     94          #endif
     95          
     96          #include "bdb.h"
     97          #include "bdb_interface.h"
     98          
     99          #include "zcl_sampleapps_ui.h"
    100          
    101          /*********************************************************************
    102           * MACROS
    103           */
    104          #define UI_STATE_TOGGLE_LIGHT 1 //UI_STATE_BACK_FROM_APP_MENU is item #0, so app item numbers should start from 1
    105          
    106          #define APP_TITLE "TI Sample Switch"
    107          
    108          /*********************************************************************
    109           * TYPEDEFS
    110           */
    111          
    112          /*********************************************************************
    113           * GLOBAL VARIABLES
    114           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          byte zclZigIt_TaskID;
   \                     zclZigIt_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 zclZigItSeqNum;
   \                     zclZigItSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    119          uint8 zclZigIt_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclZigIt_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclZigIt_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 zclZigIt_OnOffSwitchActions;
   \                     zclZigIt_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint16 zclZigUPSeqNum=0;
   \                     zclZigUPSeqNum:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          volatile uint8 STATE_LIGHT=0;
   \                     STATE_LIGHT:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    124          
    125          #define REPORT_REASON_TIMER     0
    126          
    127          /*********************************************************************
    128           * GLOBAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          afAddrType_t zclZigIt_DstAddr;
   \                     zclZigIt_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    135          
    136          // Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    137          static endPointDesc_t sampleSw_TestEp =
   \                     sampleSw_TestEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_TestEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    138          {
    139            SAMPLESW_ENDPOINT,                  // endpoint
    140            0,
    141            &zclZigIt_TaskID,
    142            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    143            (afNetworkLatencyReq_t)0            // No Network Latency req
    144          };
    145          
    146          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          devStates_t zclZigIt_NwkState = DEV_INIT;
   \                     zclZigIt_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclZigIt_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    149          
    150          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    151          #define DEVICE_POLL_RATE                 8000   // Poll rate for end device
    152          #endif
    153          
    154          #define ZIGIT_REPORTING_EVT 0x1000
    155          /*********************************************************************
    156           * LOCAL FUNCTIONS
    157           */
    158          static void zclZigIt_HandleKeys( byte shift, byte keys );
    159          static void zclZigIt_BasicResetCB( void );
    160          
    161          static void zclZigIt_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    162          #define ZCLSAMPLELIGHT_BINDINGLIST       2
    163          static cId_t bindingInClusters[ZCLSAMPLELIGHT_BINDINGLIST] =
                              ^
Warning[Pe177]: variable "bindingInClusters" was declared but never referenced
    164          {
    165            ZCL_CLUSTER_ID_GEN_ON_OFF,
    166            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
    167          };
    168          
    169          //// Test Endpoint to allow SYS_APP_MSGs
    170          //static endPointDesc_t sampleLight_TestEp =
    171          //{
    172          //  20,                                 // Test endpoint
    173          //  &zclZigIt_TaskID,
    174          //  (SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    175          //  (afNetworkLatencyReq_t)0            // No Network Latency req
    176          //};
    177          
    178          // Functions to process ZCL Foundation incoming Command/Response messages
    179          static void zclZigIt_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    180          #ifdef ZCL_READ
    181          static uint8 zclZigIt_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    182          #endif
    183          #ifdef ZCL_WRITE
    184          static uint8 zclZigIt_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    185          #endif
    186          static uint8 zclZigIt_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    187          #ifdef ZCL_DISCOVER
    188          static uint8 zclZigIt_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg );
    189          static uint8 zclZigIt_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg );
    190          static uint8 zclZigIt_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg );
    191          #endif
    192          
    193          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    194          static void zclZigIt_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg );
    195          #endif
    196          
    197          void zclZigIt_UiActionToggleLight(uint16 keys);
    198          void zclZigIt_UiUpdateLcd(uint8 uiCurrentState, char * line[3]);
    199            
    200          /*********************************************************************
    201           * REFERENCED EXTERNALS
    202           */
    203          extern int16 zdpExternalStateTaskID;
    204          
    205          /*********************************************************************
    206           * ZCL General Profile Callback table
    207           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    208          static zclGeneral_AppCallbacks_t zclZigIt_CmdCallbacks =
   \                     zclZigIt_CmdCallbacks:
   \   000000                DS 18
   \   000012                REQUIRE `?<Initializer for zclZigIt_CmdCallbacks>`
   \   000012                REQUIRE __INIT_XDATA_I
    209          {
    210            zclZigIt_BasicResetCB,               // Basic Cluster Reset command
    211            NULL,                                   // Identify Trigger Effect command
    212            NULL,                                   // On/Off cluster commands, zclSampleLight_OnOffCB
    213            NULL,                                   // On/Off cluster enhanced command Off with Effect
    214            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    215            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    216          #ifdef ZCL_LEVEL_CTRL
    217            NULL,                                   // Level Control Move to Level command
    218            NULL,                                   // Level Control Move command
    219            NULL,                                   // Level Control Step command
    220            NULL,                                   // Level Control Stop command
    221          #endif
    222          #ifdef ZCL_GROUPS
    223            NULL,                                   // Group Response commands
    224          #endif
    225          #ifdef ZCL_SCENES
    226            NULL,                                   // Scene Store Request command
    227            NULL,                                   // Scene Recall Request command
    228            NULL,                                   // Scene Response command
    229          #endif
    230          #ifdef ZCL_ALARMS
    231            NULL,                                   // Alarm (Response) commands
    232          #endif
    233          #ifdef SE_UK_EXT
    234            NULL,                                   // Get Event Log command
    235            NULL,                                   // Publish Event Log command
    236          #endif
    237            NULL,                                   // RSSI Location command
    238            NULL                                    // RSSI Location Response command
    239          };
    240          
    241          
    242          /*********************************************************************
    243           * @fn          zclZigIt_Init
    244           *
    245           * @brief       Initialization function for the zclGeneral layer.
    246           *
    247           * @param       none
    248           *
    249           * @return      none
    250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    251          void zclZigIt_Init( byte task_id )
   \                     zclZigIt_Init:
    252          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    253            zclZigIt_TaskID = task_id;
   \   000006   90....       MOV       DPTR,#zclZigIt_TaskID
   \   000009   F0           MOVX      @DPTR,A
    254          
    255            // Set destination address to indirect
    256            zclZigIt_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV       DPTR,#zclZigIt_DstAddr + 8
   \   00000D   E4           CLR       A
   \   00000E   F0           MOVX      @DPTR,A
    257            zclZigIt_DstAddr.endPoint = 0;
   \   00000F   A3           INC       DPTR
   \   000010   F0           MOVX      @DPTR,A
    258            zclZigIt_DstAddr.addr.shortAddr = 0xFFFF;
   \   000011   90....       MOV       DPTR,#zclZigIt_DstAddr
   \   000014   74FF         MOV       A,#-0x1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   F0           MOVX      @DPTR,A
    259          
    260            // Register the Simple Descriptor for this application
    261            bdb_RegisterSimpleDescriptor( &zclZigIt_SimpleDesc );
   \   000019                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000019   7A..         MOV       R2,#zclZigIt_SimpleDesc & 0xff
   \   00001B   7B..         MOV       R3,#(zclZigIt_SimpleDesc >> 8) & 0xff
   \   00001D   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    262          
    263            // Register the ZCL General Cluster Library callback functions
    264            zclGeneral_RegisterCmdCallbacks( SAMPLESW_ENDPOINT, &zclZigIt_CmdCallbacks );
   \   000020                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000020   7A..         MOV       R2,#zclZigIt_CmdCallbacks & 0xff
   \   000022   7B..         MOV       R3,#(zclZigIt_CmdCallbacks >> 8) & 0xff
   \   000024   7908         MOV       R1,#0x8
   \   000026   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    265          
    266            zclZigIt_ResetAttributesToDefaultValues();
   \   000029                ; Setup parameters for call to function zclZigIt_ResetAttributesToDefaultValues
   \   000029   12....       LCALL     `??zclZigIt_ResetAttributesToDefaultValues::?rel`; Banked call to: zclZigIt_ResetAttributesToDefaultValues
    267            
    268            // Register the application's attribute list
    269            zcl_registerAttrList( SAMPLESW_ENDPOINT, zclZigIt_NumAttributes, zclZigIt_Attrs );
   \   00002C                ; Setup parameters for call to function zcl_registerAttrList
   \   00002C   7C..         MOV       R4,#zclZigIt_Attrs & 0xff
   \   00002E   7D..         MOV       R5,#(zclZigIt_Attrs >> 8) & 0xff
   \   000030   90....       MOV       DPTR,#zclZigIt_NumAttributes
   \   000033   E4           CLR       A
   \   000034   93           MOVC      A,@A+DPTR
   \   000035   FA           MOV       R2,A
   \   000036   7908         MOV       R1,#0x8
   \   000038   12....       LCALL     `??zcl_registerAttrList::?relay`; Banked call to: zcl_registerAttrList
    270          
    271            // Register the Application to receive the unprocessed Foundation command/response messages
    272            zcl_registerForMsg( zclZigIt_TaskID );
   \   00003B                ; Setup parameters for call to function zcl_registerForMsg
   \   00003B   90....       MOV       DPTR,#zclZigIt_TaskID
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    273            
    274            // Register for all key events - This app will handle all key events
    275            RegisterForKeys( zclZigIt_TaskID );
   \   000043                ; Setup parameters for call to function RegisterForKeys
   \   000043   90....       MOV       DPTR,#zclZigIt_TaskID
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
   \   000048   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    276            
    277            bdb_RegisterCommissioningStatusCB( zclZigIt_ProcessCommissioningStatus );
   \   00004B                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   00004B   7A..         MOV       R2,#`??zclZigIt_ProcessCommissioningStatus::?relay` & 0xff
   \   00004D   7B..         MOV       R3,#(`??zclZigIt_ProcessCommissioningStatus::?relay` >> 8) & 0xff
   \   00004F   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    278          
    279            // Register for a test endpoint
    280            afRegister( &sampleSw_TestEp );
   \   000052                ; Setup parameters for call to function afRegister
   \   000052   7A..         MOV       R2,#sampleSw_TestEp & 0xff
   \   000054   7B..         MOV       R3,#(sampleSw_TestEp >> 8) & 0xff
   \   000056   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    281            
    282          #ifdef ZCL_DIAGNOSTIC
    283            // Register the application's callback function to read/write attribute data.
    284            // This is only required when the attribute data format is unknown to ZCL.
    285            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
   \   000059                ; Setup parameters for call to function zcl_registerReadWriteCB
   \   000059   7C00         MOV       R4,#0x0
   \   00005B   7D00         MOV       R5,#0x0
   \   00005D   7A..         MOV       R2,#`??zclDiagnostic_ReadWriteAttrCB::?relay` & 0xff
   \   00005F   7B..         MOV       R3,#(`??zclDiagnostic_ReadWriteAttrCB::?relay` >> 8) & 0xff
   \   000061   7908         MOV       R1,#0x8
   \   000063   12....       LCALL     `??zcl_registerReadWriteCB::?relay`; Banked call to: zcl_registerReadWriteCB
    286          
    287            if ( zclDiagnostic_InitStats() == ZSuccess )
   \   000066                ; Setup parameters for call to function zclDiagnostic_InitStats
   \   000066   12....       LCALL     `??zclDiagnostic_InitStats::?relay`; Banked call to: zclDiagnostic_InitStats
    288            {
    289              // Here the user could start the timer to save Diagnostics to NV
    290            }
    291          #endif
    292          
    293          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    294            // Register for callback events from the ZCL OTA
    295            zclOTA_Register(zclZigIt_TaskID);
    296          #endif
    297          
    298            zdpExternalStateTaskID = zclZigIt_TaskID;
   \   000069   90....       MOV       DPTR,#zclZigIt_TaskID
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   E4           CLR       A
   \   000073   F0           MOVX      @DPTR,A
    299          
    300            //UI_Init(zclZigIt_TaskID, SAMPLEAPP_LCD_AUTO_UPDATE_EVT, SAMPLEAPP_KEY_AUTO_REPEAT_EVT, &zclZigIt_IdentifyTime, APP_TITLE, &zclZigIt_UiUpdateLcd, zclZigIt_UiStatesMain);
    301          
    302            //UI_UpdateLcd();
    303            osal_start_timerEx(zclZigIt_TaskID,ZIGIT_REPORTING_EVT,5000);
   \   000074                ; Setup parameters for call to function osal_start_timerEx
   \   000074   90....       MOV       DPTR,#__Constant_1388
   \   000077   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00007A   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    304            
    305            //bdb_StartCommissioning(BDB_COMMISSIONING_REJOIN_EXISTING_NETWORK_ON_STARTUP);
    306            bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
   \   000080                ; Setup parameters for call to function bdb_StartCommissioning
   \   000080   7902         MOV       R1,#0x2
   \   000082   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    307              //bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
    308              // Initiate an End Device Bind Request, this bind request will
    309              // only use a cluster list that is important to binding.
    310          
    311          //    zAddrType_t dstAddr;
    312          //    dstAddr.addrMode = afAddr16Bit;
    313          //    dstAddr.addr.shortAddr = 0;   // Coordinator makes the match
    314          //    ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(),
    315          //                           SAMPLESW_ENDPOINT,
    316          //                           ZCL_HA_PROFILE_ID,
    317          //                           ZCLSAMPLELIGHT_BINDINGLIST, bindingInClusters,
    318          //                           0, NULL,   // No Outgoing clusters to bind
    319          //                           TRUE );
    320          
    321          }
   \   000085                REQUIRE ?Subroutine0
   \   000085                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7A00         MOV       R2,#0x0
   \   000002   7B10         MOV       R3,#0x10
   \   000004                REQUIRE ??Subroutine11_0
   \   000004                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   90....       MOV       DPTR,#zclZigIt_TaskID
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000008   7404         MOV       A,#0x4
   \   00000A   22           RET
    322          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          void zclZigIt_Reporting(uint16 REPORT_REASON)
   \                     zclZigIt_Reporting:
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    325            const uint8 NUM_ATTRIBUTES = 2;
    326            
    327            // send report
    328            zclReportCmd_t *pReportCmd;
    329            
    330            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + ( NUM_ATTRIBUTES * sizeof(zclReport_t) ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A0B         MOV       R2,#0xb
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
    331            if ( pReportCmd != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??zclZigIt_Reporting_0 & 0xFFFF
    332            {
    333              if (STATE_LIGHT) {
   \   00001C   90....       MOV       DPTR,#STATE_LIGHT
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6003         JZ        ??zclZigIt_Reporting_1
    334                STATE_LIGHT=false;
   \   000022   E4           CLR       A
   \   000023   8002         SJMP      ??zclZigIt_Reporting_2
    335              }else {
    336                STATE_LIGHT=true;
   \                     ??zclZigIt_Reporting_1:
   \   000025   7401         MOV       A,#0x1
   \                     ??zclZigIt_Reporting_2:
   \   000027   F0           MOVX      @DPTR,A
    337              }
    338              uint8 TEST = STATE_LIGHT;
   \   000028   E0           MOVX      A,@DPTR
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   F0           MOVX      @DPTR,A
    339              
    340              pReportCmd->numAttr = NUM_ATTRIBUTES;
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   7402         MOV       A,#0x2
   \   000036   F0           MOVX      @DPTR,A
    341              
    342              pReportCmd->attrList[0].attrID = ATTRID_ON_OFF;
   \   000037   A3           INC       DPTR
   \   000038   E4           CLR       A
   \   000039   F0           MOVX      @DPTR,A
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine10 & 0xFFFF
    343              pReportCmd->attrList[0].dataType = ZCL_DATATYPE_BOOLEAN;
   \                     ??CrossCallReturnLabel_11:
   \   00003E   7410         MOV       A,#0x10
   \   000040   12....       LCALL     ?Subroutine7 & 0xFFFF
    344              pReportCmd->attrList[0].attrData = (void *)(&TEST);
   \                     ??CrossCallReturnLabel_4:
   \   000043   E5..         MOV       A,?XSP + 0
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   E5..         MOV       A,?XSP + 1
   \   000049   12....       LCALL     ?Subroutine7 & 0xFFFF
    345          
    346              pReportCmd->attrList[1].attrID = ATTRID_ON_OFF;
   \                     ??CrossCallReturnLabel_5:
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   12....       LCALL     ?Subroutine3 & 0xFFFF
    347              pReportCmd->attrList[1].dataType = ZCL_DATATYPE_BOOLEAN;
   \                     ??CrossCallReturnLabel_0:
   \   000054   7410         MOV       A,#0x10
   \   000056   12....       LCALL     ?Subroutine3 & 0xFFFF
    348              pReportCmd->attrList[1].attrData = (void *)(&TEST);
   \                     ??CrossCallReturnLabel_1:
   \   000059   A3           INC       DPTR
   \   00005A   E5..         MOV       A,?XSP + 0
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   A3           INC       DPTR
   \   00005E   E5..         MOV       A,?XSP + 1
   \   000060   F0           MOVX      @DPTR,A
    349              
    350              
    351              zclZigIt_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000061   90....       MOV       DPTR,#zclZigIt_DstAddr + 8
   \   000064   7402         MOV       A,#0x2
   \   000066   F0           MOVX      @DPTR,A
    352              zclZigIt_DstAddr.addr.shortAddr = 0;
   \   000067   90....       MOV       DPTR,#zclZigIt_DstAddr
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
    353              zclZigIt_DstAddr.endPoint=1;
   \   00006E   90....       MOV       DPTR,#zclZigIt_DstAddr + 9
   \   000071   04           INC       A
   \   000072   F0           MOVX      @DPTR,A
    354              
    355              zcl_SendReportCmd( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF, pReportCmd, ZCL_FRAME_CLIENT_SERVER_DIR, false, zclZigUPSeqNum++ );
   \   000073   90....       MOV       DPTR,#zclZigUPSeqNum
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F8           MOV       R0,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   E8           MOV       A,R0
   \   00007C   2401         ADD       A,#0x1
   \   00007E   FA           MOV       R2,A
   \   00007F   E4           CLR       A
   \   000080   39           ADDC      A,R1
   \   000081   FB           MOV       R3,A
   \   000082   90....       MOV       DPTR,#zclZigUPSeqNum
   \   000085   EA           MOV       A,R2
   \   000086   F0           MOVX      @DPTR,A
   \   000087   A3           INC       DPTR
   \   000088   EB           MOV       A,R3
   \   000089   F0           MOVX      @DPTR,A
   \   00008A                ; Setup parameters for call to function zcl_SendReportCmd
   \   00008A   E8           MOV       A,R0
   \   00008B   F5..         MOV       ?V2,A
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000092   75..00       MOV       ?V2,#0x0
   \   000095   78..         MOV       R0,#?V2
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   7C06         MOV       R4,#0x6
   \   0000A6   7D00         MOV       R5,#0x0
   \   0000A8   7A..         MOV       R2,#zclZigIt_DstAddr & 0xff
   \   0000AA   7B..         MOV       R3,#(zclZigIt_DstAddr >> 8) & 0xff
   \   0000AC   7908         MOV       R1,#0x8
   \   0000AE   12....       LCALL     `??zcl_SendReportCmd::?relay`; Banked call to: zcl_SendReportCmd
   \   0000B1   7405         MOV       A,#0x5
   \   0000B3   12....       LCALL     ?DEALLOC_XSTACK8
    356            }
    357            
    358            osal_mem_free( pReportCmd );
   \                     ??zclZigIt_Reporting_0:
   \   0000B6                ; Setup parameters for call to function osal_mem_free
   \   0000B6   AA..         MOV       R2,?V0
   \   0000B8   AB..         MOV       R3,?V1
   \   0000BA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    359          }
   \   0000BD   7401         MOV       A,#0x1
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C2                REQUIRE ?Subroutine1
   \   0000C2                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET
    360          
    361          
    362          
    363          /*********************************************************************
    364           * @fn          zclSample_event_loop
    365           *
    366           * @brief       Event Loop Processor for zclGeneral.
    367           *
    368           * @param       none
    369           *
    370           * @return      none
    371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          uint16 zclZigIt_event_loop( uint8 task_id, uint16 events )
   \                     zclZigIt_event_loop:
    373          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    374            afIncomingMSGPacket_t *MSGpkt;
    375            (void)task_id;  // Intentionally unreferenced parameter
    376          
    377            //Send toggle every 500ms
    378          //  if( events & SAMPLESW_TOGGLE_TEST_EVT )
    379          //  {
    380          //    osal_start_timerEx(zclZigIt_TaskID,SAMPLESW_TOGGLE_TEST_EVT,5000);
    381          //    //zclGeneral_SendOnOff_CmdToggle( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, FALSE, bdb_getZCLFrameCounter() );
    382          //    zclGeneral_SendOnOff_CmdOn( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, FALSE, bdb_getZCLFrameCounter() );
    383          //    
    384          //    zclGeneral_SendOnOff_CmdOff( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, FALSE, bdb_getZCLFrameCounter() );
    385          //   
    386          //    // return unprocessed events
    387          //    return (events ^ SAMPLESW_TOGGLE_TEST_EVT);
    388          //  }
    389          //  
    390            if ( events & ZIGIT_REPORTING_EVT )
   \   000009   EB           MOV       A,R3
   \   00000A   5410         ANL       A,#0x10
   \   00000C   601B         JZ        ??zclZigIt_event_loop_0
    391            {
    392              // report states
    393              zclZigIt_Reporting(REPORT_REASON_TIMER);
   \   00000E                ; Setup parameters for call to function zclZigIt_Reporting
   \   00000E   7A00         MOV       R2,#0x0
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     `??zclZigIt_Reporting::?relay`; Banked call to: zclZigIt_Reporting
    394              osal_start_timerEx(zclZigIt_TaskID,ZIGIT_REPORTING_EVT,5000);
   \   000015                ; Setup parameters for call to function osal_start_timerEx
   \   000015   90....       MOV       DPTR,#__Constant_1388
   \   000018   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001B   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00001E   12....       LCALL     ?DEALLOC_XSTACK8
    395              
    396              return ( events ^ ZIGIT_REPORTING_EVT );
   \   000021   AA..         MOV       R2,?V0
   \   000023   E5..         MOV       A,?V1
   \   000025   6410         XRL       A,#0x10
   \   000027   8041         SJMP      ??zclZigIt_event_loop_1
    397            }      
    398            
    399            if ( events & SYS_EVENT_MSG )
   \                     ??zclZigIt_event_loop_0:
   \   000029   EB           MOV       A,R3
   \   00002A   5480         ANL       A,#0x80
   \   00002C   7024         JNZ       ??zclZigIt_event_loop_2
    400            {
    401              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclZigIt_TaskID )) )
    402              {
    403                switch ( MSGpkt->hdr.event )
    404                {
    405                  case ZCL_INCOMING_MSG:
    406                    // Incoming ZCL Foundation command/response messages
    407                    zclZigIt_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
    408                    break;
    409          
    410                  case KEY_CHANGE:
    411                    zclZigIt_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    412                    break;
    413          
    414                  case ZDO_STATE_CHANGE:
    415                    //UI_DeviceStateUpdated((devStates_t)(MSGpkt->hdr.status));
    416                    break;
    417          
    418          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    419                  case ZCL_OTA_CALLBACK_IND:
    420                    zclZigIt_ProcessOTAMsgs( (zclOTA_CallbackMsg_t*)MSGpkt  );
    421                    break;
    422          #endif
    423          
    424                  default:
    425                    break;
    426                }
    427          
    428                // Release the memory
    429                osal_msg_deallocate( (uint8 *)MSGpkt );
    430              }
    431          
    432              // return unprocessed events
    433              return (events ^ SYS_EVENT_MSG);
    434            }
    435          
    436          #if ZG_BUILD_ENDDEVICE_TYPE    
    437            if ( events & SAMPLEAPP_END_DEVICE_REJOIN_EVT )
   \   00002E   EA           MOV       A,R2
   \   00002F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000031   503A         JNC       ??zclZigIt_event_loop_3
    438            {
    439              bdb_ZedAttemptRecoverNwk();
   \   000033                ; Setup parameters for call to function bdb_ZedAttemptRecoverNwk
   \   000033   12....       LCALL     `??bdb_ZedAttemptRecoverNwk::?relay`; Banked call to: bdb_ZedAttemptRecoverNwk
    440              return ( events ^ SAMPLEAPP_END_DEVICE_REJOIN_EVT );
   \   000036   E5..         MOV       A,?V0
   \   000038   6401         XRL       A,#0x1
   \   00003A   FA           MOV       R2,A
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   8032         SJMP      ??zclZigIt_event_loop_4
    441            }
   \                     ??zclZigIt_event_loop_5:
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6434         XRL       A,#0x34
   \   000046   7003         JNZ       ??zclZigIt_event_loop_6
   \   000048                ; Setup parameters for call to function zclZigIt_ProcessIncomingMsg
   \   000048   12....       LCALL     `??zclZigIt_ProcessIncomingMsg::?relay`; Banked call to: zclZigIt_ProcessIncomingMsg
   \                     ??zclZigIt_event_loop_6:
   \   00004B                ; Setup parameters for call to function osal_msg_deallocate
   \   00004B   AA..         MOV       R2,?V2
   \   00004D   EF           MOV       A,R7
   \   00004E   FB           MOV       R3,A
   \   00004F   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclZigIt_event_loop_2:
   \   000052                ; Setup parameters for call to function osal_msg_receive
   \   000052   90....       MOV       DPTR,#zclZigIt_TaskID
   \   000055   E0           MOVX      A,@DPTR
   \   000056   F9           MOV       R1,A
   \   000057   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00005A   8A..         MOV       ?V2,R2
   \   00005C   8B..         MOV       ?V3,R3
   \   00005E   AF..         MOV       R7,?V3
   \   000060   EA           MOV       A,R2
   \   000061   4F           ORL       A,R7
   \   000062   70DB         JNZ       ??zclZigIt_event_loop_5
   \   000064   AA..         MOV       R2,?V0
   \   000066   E5..         MOV       A,?V1
   \   000068   6480         XRL       A,#0x80
   \                     ??zclZigIt_event_loop_1:
   \   00006A   FB           MOV       R3,A
   \   00006B   8004         SJMP      ??zclZigIt_event_loop_4
    442          #endif
    443          
    444            // Discard unknown events
    445            return 0;
   \                     ??zclZigIt_event_loop_3:
   \   00006D   7A00         MOV       R2,#0x0
   \   00006F   7B00         MOV       R3,#0x0
   \                     ??zclZigIt_event_loop_4:
   \   000071   02....       LJMP      ?Subroutine1 & 0xFFFF
    446          }
    447          
    448          /*********************************************************************
    449           * @fn      zclZigIt_HandleKeys
    450           *
    451           * @brief   Handles all key events for this device.
    452           *
    453           * @param   shift - true if in shift/alt.
    454           * @param   keys - bit field for key events. Valid entries:
    455           *                 HAL_KEY_SW_5
    456           *                 HAL_KEY_SW_4
    457           *                 HAL_KEY_SW_2
    458           *                 HAL_KEY_SW_1
    459           *
    460           * @return  none
    461           */
    462          static void zclZigIt_HandleKeys( byte shift, byte keys )
    463          {
    464            //UI_MainStateMachine(keys);
    465          }
    466          
    467          
    468          /*********************************************************************
    469           * @fn      zclZigIt_ProcessCommissioningStatus
    470           *
    471           * @brief   Callback in which the status of the commissioning process are reported
    472           *
    473           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    474           *
    475           * @return  none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          static void zclZigIt_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclZigIt_ProcessCommissioningStatus:
    478          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    479            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   24FE         ADD       A,#-0x2
   \   00000C   6006         JZ        ??zclZigIt_ProcessCommissioningStatus_0
   \   00000E   24FD         ADD       A,#-0x3
   \   000010   6014         JZ        ??zclZigIt_ProcessCommissioningStatus_1
   \   000012   802B         SJMP      ??zclZigIt_ProcessCommissioningStatus_2
    480            {
    481              case BDB_COMMISSIONING_FORMATION:
    482                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \                     ??zclZigIt_ProcessCommissioningStatus_0:
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   E0           MOVX      A,@DPTR
   \   000019   7024         JNZ       ??zclZigIt_ProcessCommissioningStatus_2
    483                {
    484                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    485                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   00001B                ; Setup parameters for call to function bdb_StartCommissioning
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   4402         ORL       A,#0x2
   \   000020   F9           MOV       R1,A
   \   000021   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
   \   000024   8019         SJMP      ??zclZigIt_ProcessCommissioningStatus_2
    486                }
    487                else
    488                {
    489                  //Want to try other channels?
    490                  //try with bdb_setChannelAttribute
    491                }
    492              break;
    493              case BDB_COMMISSIONING_NWK_STEERING:
    494                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    495                {
    496                  //YOUR JOB:
    497                  //We are on the nwk, what now?
    498                }
    499                else
    500                {
    501                  //See the possible errors for nwk steering procedure
    502                  //No suitable networks found
    503                  //Want to try other channels?
    504                  //try with bdb_setChannelAttribute
    505                }
    506              break;
    507              case BDB_COMMISSIONING_FINDING_BINDING:
    508                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    509                {
    510                  //YOUR JOB:
    511                }
    512                else
    513                {
    514                  //YOUR JOB:
    515                  //retry?, wait for user interaction?
    516                }
    517              break;
    518              case BDB_COMMISSIONING_INITIALIZATION:
    519                //Initialization notification can only be successful. Failure on initialization 
    520                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    521                
    522                //YOUR JOB:
    523                //We are on a network, what now?
    524                
    525              break;
    526          #if ZG_BUILD_ENDDEVICE_TYPE    
    527              case BDB_COMMISSIONING_PARENT_LOST:
    528                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
   \                     ??zclZigIt_ProcessCommissioningStatus_1:
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   640D         XRL       A,#0xd
   \   00002D   6010         JZ        ??zclZigIt_ProcessCommissioningStatus_2
    529                {
    530                  //We did recover from losing parent
    531                }
    532                else
    533                {
    534                  //Parent not found, attempt to rejoin again after a fixed delay
    535                  osal_start_timerEx(zclZigIt_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
   \   00002F                ; Setup parameters for call to function osal_start_timerEx
   \   00002F   90....       MOV       DPTR,#__Constant_2710
   \   000032   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000035   7A01         MOV       R2,#0x1
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     ??Subroutine11_0 & 0xFFFF
    536                }
    537              break;
    538          #endif 
    539            }
   \                     ??CrossCallReturnLabel_15:
   \   00003C   12....       LCALL     ?DEALLOC_XSTACK8
    540            
    541            //UI_UpdateComissioningStatus(bdbCommissioningModeMsg);
    542          }
   \                     ??zclZigIt_ProcessCommissioningStatus_2:
   \   00003F   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    543          
    544          /*********************************************************************
    545           * @fn      zclZigIt_BasicResetCB
    546           *
    547           * @brief   Callback from the ZCL General Cluster Library
    548           *          to set all the Basic Cluster attributes to  default values.
    549           *
    550           * @param   none
    551           *
    552           * @return  none
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          static void zclZigIt_BasicResetCB( void )
   \                     zclZigIt_BasicResetCB:
    555          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 5
   \   000004   74FB         MOV       A,#-0x5
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    556            zclZigIt_ResetAttributesToDefaultValues();
   \   000009                ; Setup parameters for call to function zclZigIt_ResetAttributesToDefaultValues
   \   000009   12....       LCALL     `??zclZigIt_ResetAttributesToDefaultValues::?rel`; Banked call to: zclZigIt_ResetAttributesToDefaultValues
    557            NLME_LeaveReq_t leaveReq;
    558            // Set every field to 0
    559            osal_memset( &leaveReq, 0, sizeof( NLME_LeaveReq_t ) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C05         MOV       R4,#0x5
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    560            
    561            // This will enable the device to rejoin the network after reset.
    562            leaveReq.rejoin = TRUE;
   \   000019   7403         MOV       A,#0x3
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   7401         MOV       A,#0x1
   \   000020   F0           MOVX      @DPTR,A
    563            
    564            // Set the NV startup option to force a "new" join.
    565            zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000021                ; Setup parameters for call to function zgWriteStartupOptions
   \   000021   7A02         MOV       R2,#0x2
   \   000023   79FF         MOV       R1,#-0x1
   \   000025   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    566            
    567            // Leave the network, and reset afterwards
    568            if ( NLME_LeaveReq( &leaveReq ) != ZSuccess )
   \   000028                ; Setup parameters for call to function NLME_LeaveReq
   \   000028   AA..         MOV       R2,?XSP + 0
   \   00002A   AB..         MOV       R3,?XSP + 1
   \   00002C   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00002F   E9           MOV       A,R1
   \   000030   6005         JZ        ??zclZigIt_BasicResetCB_0
    569            {
    570              // Couldn't send out leave; prepare to reset anyway
    571              ZDApp_LeaveReset( FALSE );
   \   000032                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000032   7900         MOV       R1,#0x0
   \   000034   12....       LCALL     `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
    572            }
    573          }
   \                     ??zclZigIt_BasicResetCB_0:
   \   000037   7405         MOV       A,#0x5
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   \   00003C   02....       LJMP      ?Subroutine2 & 0xFFFF
    574          
    575          /******************************************************************************
    576           *
    577           *  Functions for processing ZCL Foundation incoming Command/Response messages
    578           *
    579           *****************************************************************************/
    580          
    581          /*********************************************************************
    582           * @fn      zclZigIt_ProcessIncomingMsg
    583           *
    584           * @brief   Process ZCL Foundation incoming message
    585           *
    586           * @param   pInMsg - pointer to the received message
    587           *
    588           * @return  none
    589           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    590          static void zclZigIt_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
   \                     zclZigIt_ProcessIncomingMsg:
    591          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    592            switch ( pInMsg->zclHdr.commandID )
   \   000005   EA           MOV       A,R2
   \   000006   2417         ADD       A,#0x17
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   FE           MOV       R6,A
   \   00000E   E9           MOV       A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   14           DEC       A
   \   00001D   6016         JZ        ??zclZigIt_ProcessIncomingMsg_0
   \   00001F   24FD         ADD       A,#-0x3
   \   000021   601F         JZ        ??zclZigIt_ProcessIncomingMsg_1
   \   000023   24F7         ADD       A,#-0x9
   \   000025   602D         JZ        ??zclZigIt_ProcessIncomingMsg_2
   \   000027   24FB         ADD       A,#-0x5
   \   000029   6024         JZ        ??zclZigIt_ProcessIncomingMsg_3
   \   00002B   24FE         ADD       A,#-0x2
   \   00002D   6020         JZ        ??zclZigIt_ProcessIncomingMsg_3
   \   00002F   24FE         ADD       A,#-0x2
   \   000031   6033         JZ        ??zclZigIt_ProcessIncomingMsg_4
   \   000033   8043         SJMP      ??zclZigIt_ProcessIncomingMsg_5
    593            {
    594          #ifdef ZCL_READ
    595              case ZCL_CMD_READ_RSP:
    596                zclZigIt_ProcessInReadRspCmd( pInMsg );
   \                     ??zclZigIt_ProcessIncomingMsg_0:
   \   000035   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F9           MOV       R1,A
   \   00003A   E8           MOV       A,R0
   \   00003B   C3           CLR       C
   \   00003C   99           SUBB      A,R1
   \   00003D   5039         JNC       ??zclZigIt_ProcessIncomingMsg_5
   \   00003F   08           INC       R0
   \   000040   80F6         SJMP      ??CrossCallReturnLabel_2
    597                break;
    598          #endif
    599          #ifdef ZCL_WRITE
    600              case ZCL_CMD_WRITE_RSP:
    601                zclZigIt_ProcessInWriteRspCmd( pInMsg );
   \                     ??zclZigIt_ProcessIncomingMsg_1:
   \   000042   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F9           MOV       R1,A
   \   000047   E8           MOV       A,R0
   \   000048   C3           CLR       C
   \   000049   99           SUBB      A,R1
   \   00004A   502C         JNC       ??zclZigIt_ProcessIncomingMsg_5
   \   00004C   08           INC       R0
   \   00004D   80F6         SJMP      ??CrossCallReturnLabel_3
    602                break;
    603          #endif
    604          #ifdef ZCL_REPORT
    605              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    606              case ZCL_CMD_CONFIG_REPORT:
    607                //zclZigIt_ProcessInConfigReportCmd( pInMsg );
    608                break;
    609          
    610              case ZCL_CMD_CONFIG_REPORT_RSP:
    611                //zclZigIt_ProcessInConfigReportRspCmd( pInMsg );
    612                break;
    613          
    614              case ZCL_CMD_READ_REPORT_CFG:
    615                //zclZigIt_ProcessInReadReportCfgCmd( pInMsg );
    616                break;
    617          
    618              case ZCL_CMD_READ_REPORT_CFG_RSP:
    619                //zclZigIt_ProcessInReadReportCfgRspCmd( pInMsg );
    620                break;
    621          
    622              case ZCL_CMD_REPORT:
    623                //zclZigIt_ProcessInReportCmd( pInMsg );
    624                break;
    625          #endif
    626              case ZCL_CMD_DEFAULT_RSP:
    627                zclZigIt_ProcessInDefaultRspCmd( pInMsg );
    628                break;
    629          #ifdef ZCL_DISCOVER
    630              case ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP:
    631                zclZigIt_ProcessInDiscCmdsRspCmd( pInMsg );
   \                     ??zclZigIt_ProcessIncomingMsg_3:
   \   00004F                ; Setup parameters for call to function zclZigIt_ProcessInDiscCmdsRspCmd
    632                break;
    633          
    634              case ZCL_CMD_DISCOVER_CMDS_GEN_RSP:
    635                zclZigIt_ProcessInDiscCmdsRspCmd( pInMsg );
   \   00004F                ; Setup parameters for call to function zclZigIt_ProcessInDiscCmdsRspCmd
   \   00004F   12....       LCALL     `??zclZigIt_ProcessInDiscCmdsRspCmd::?relay`; Banked call to: zclZigIt_ProcessInDiscCmdsRspCmd
    636                break;
   \   000052   8024         SJMP      ??zclZigIt_ProcessIncomingMsg_5
    637          
    638              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    639                zclZigIt_ProcessInDiscAttrsRspCmd( pInMsg );
   \                     ??zclZigIt_ProcessIncomingMsg_2:
   \   000054   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000057   8882         MOV       DPL,R0
   \   000059   8983         MOV       DPH,R1
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FB           MOV       R3,A
   \   00005E   EA           MOV       A,R2
   \   00005F   C3           CLR       C
   \   000060   9B           SUBB      A,R3
   \   000061   5015         JNC       ??zclZigIt_ProcessIncomingMsg_5
   \   000063   0A           INC       R2
   \   000064   80F1         SJMP      ??CrossCallReturnLabel_17
    640                break;
    641          
    642              case ZCL_CMD_DISCOVER_ATTRS_EXT_RSP:
    643                zclZigIt_ProcessInDiscAttrsExtRspCmd( pInMsg );
   \                     ??zclZigIt_ProcessIncomingMsg_4:
   \   000066   12....       LCALL     ?Subroutine5 & 0xFFFF
    644                break;
    645          #endif
    646              default:
    647                break;
    648            }
   \                     ??CrossCallReturnLabel_18:
   \   000069   8001         SJMP      ??zclZigIt_ProcessIncomingMsg_6
   \                     ??zclZigIt_ProcessIncomingMsg_7:
   \   00006B   0A           INC       R2
   \                     ??zclZigIt_ProcessIncomingMsg_6:
   \   00006C   8882         MOV       DPL,R0
   \   00006E   8983         MOV       DPH,R1
   \   000070   A3           INC       DPTR
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FB           MOV       R3,A
   \   000073   EA           MOV       A,R2
   \   000074   C3           CLR       C
   \   000075   9B           SUBB      A,R3
   \   000076   40F3         JC        ??zclZigIt_ProcessIncomingMsg_7
    649          
    650            if ( pInMsg->attrCmd )
   \                     ??zclZigIt_ProcessIncomingMsg_5:
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FA           MOV       R2,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   FB           MOV       R3,A
   \   000081   EA           MOV       A,R2
   \   000082   4B           ORL       A,R3
   \   000083   6003         JZ        ??zclZigIt_ProcessIncomingMsg_8
    651              osal_mem_free( pInMsg->attrCmd );
   \   000085                ; Setup parameters for call to function osal_mem_free
   \   000085   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    652          }
   \                     ??zclZigIt_ProcessIncomingMsg_8:
   \   000088   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8882         MOV       DPL,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   7800         MOV       R0,#0x0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine12_0
   \   000004                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7A00         MOV       R2,#0x0
   \   000007   22           RET
    653          
    654          #ifdef ZCL_READ
    655          
    656          /*********************************************************************
    657           * @fn      zclZigIt_ProcessInReadRspCmd
    658           *
    659           * @brief   Process the "Profile" Read Response Command
    660           *
    661           * @param   pInMsg - incoming message to process
    662           *
    663           * @return  none
    664           */
    665          static uint8 zclZigIt_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
    666          {
    667            zclReadRspCmd_t *readRspCmd;
    668            uint8 i;
    669          
    670            readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
    671            for (i = 0; i < readRspCmd->numAttr; i++)
    672            {
    673              // Notify the originator of the results of the original read attributes
    674              // attempt and, for each successfull request, the value of the requested
    675              // attribute
    676            }
    677          
    678            return TRUE;
    679          }
    680          #endif // ZCL_READ
    681          
    682          #ifdef ZCL_WRITE
    683          /*********************************************************************
    684           * @fn      zclZigIt_ProcessInWriteRspCmd
    685           *
    686           * @brief   Process the "Profile" Write Response Command
    687           *
    688           * @param   pInMsg - incoming message to process
    689           *
    690           * @return  none
    691           */
    692          static uint8 zclZigIt_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    693          {
    694            zclWriteRspCmd_t *writeRspCmd;
    695            uint8 i;
    696          
    697            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    698            for (i = 0; i < writeRspCmd->numAttr; i++)
    699            {
    700              // Notify the device of the results of the its original write attributes
    701              // command.
    702            }
    703          
    704            return TRUE;
    705          }
    706          #endif // ZCL_WRITE
    707          
    708          /*********************************************************************
    709           * @fn      zclZigIt_ProcessInDefaultRspCmd
    710           *
    711           * @brief   Process the "Profile" Default Response Command
    712           *
    713           * @param   pInMsg - incoming message to process
    714           *
    715           * @return  none
    716           */
    717          static uint8 zclZigIt_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    718          {
    719            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    720            // Device is notified of the Default Response command.
    721            (void)pInMsg;
    722            return TRUE;
    723          }
    724          
    725          #ifdef ZCL_DISCOVER
    726          /*********************************************************************
    727           * @fn      zclZigIt_ProcessInDiscCmdsRspCmd
    728           *
    729           * @brief   Process the Discover Commands Response Command
    730           *
    731           * @param   pInMsg - incoming message to process
    732           *
    733           * @return  none
    734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          static uint8 zclZigIt_ProcessInDiscCmdsRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zclZigIt_ProcessInDiscCmdsRspCmd:
    736          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    737            zclDiscoverCmdsCmdRsp_t *discoverRspCmd;
    738            uint8 i;
    739          
    740            discoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)pInMsg->attrCmd;
   \   000004   EA           MOV       A,R2
   \   000005   2417         ADD       A,#0x17
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   12....       LCALL     ??Subroutine12_0 & 0xFFFF
    741            for ( i = 0; i < discoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_16:
   \   000010   8001         SJMP      ??zclZigIt_ProcessInDiscCmdsRspCmd_0
   \                     ??zclZigIt_ProcessInDiscCmdsRspCmd_1:
   \   000012   0A           INC       R2
   \                     ??zclZigIt_ProcessInDiscCmdsRspCmd_0:
   \   000013   8882         MOV       DPL,R0
   \   000015   8983         MOV       DPH,R1
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FB           MOV       R3,A
   \   00001B   EA           MOV       A,R2
   \   00001C   C3           CLR       C
   \   00001D   9B           SUBB      A,R3
   \   00001E   40F2         JC        ??zclZigIt_ProcessInDiscCmdsRspCmd_1
    742            {
    743              // Device is notified of the result of its attribute discovery command.
    744            }
    745          
    746            return TRUE;
   \   000020   7901         MOV       R1,#0x1
   \   000022                REQUIRE ?Subroutine2
   \   000022                ; // Fall through to label ?Subroutine2
    747          }
    748          
    749          /*********************************************************************
    750           * @fn      zclZigIt_ProcessInDiscAttrsRspCmd
    751           *
    752           * @brief   Process the "Profile" Discover Attributes Response Command
    753           *
    754           * @param   pInMsg - incoming message to process
    755           *
    756           * @return  none
    757           */
    758          static uint8 zclZigIt_ProcessInDiscAttrsRspCmd( zclIncomingMsg_t *pInMsg )
    759          {
    760            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    761            uint8 i;
    762          
    763            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    764            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    765            {
    766              // Device is notified of the result of its attribute discovery command.
    767            }
    768          
    769            return TRUE;
    770          }
    771          
    772          /*********************************************************************
    773           * @fn      zclZigIt_ProcessInDiscAttrsExtRspCmd
    774           *
    775           * @brief   Process the "Profile" Discover Attributes Extended Response Command
    776           *
    777           * @param   pInMsg - incoming message to process
    778           *
    779           * @return  none
    780           */
    781          static uint8 zclZigIt_ProcessInDiscAttrsExtRspCmd( zclIncomingMsg_t *pInMsg )
    782          {
    783            zclDiscoverAttrsExtRsp_t *discoverRspCmd;
    784            uint8 i;
    785          
    786            discoverRspCmd = (zclDiscoverAttrsExtRsp_t *)pInMsg->attrCmd;
    787            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    788            {
    789              // Device is notified of the result of its attribute discovery command.
    790            }
    791          
    792            return TRUE;
    793          }
    794          #endif // ZCL_DISCOVER
    795          
    796          #if defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    797          /*********************************************************************
    798           * @fn      zclZigIt_ProcessOTAMsgs
    799           *
    800           * @brief   Called to process callbacks from the ZCL OTA.
    801           *
    802           * @param   none
    803           *
    804           * @return  none
    805           */
    806          static void zclZigIt_ProcessOTAMsgs( zclOTA_CallbackMsg_t* pMsg )
    807          {
    808            uint8 RxOnIdle;
    809          
    810            switch(pMsg->ota_event)
    811            {
    812            case ZCL_OTA_START_CALLBACK:
    813              if (pMsg->hdr.status == ZSuccess)
    814              {
    815                // Speed up the poll rate
    816                RxOnIdle = TRUE;
    817                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    818                NLME_SetPollRate( 2000 );
    819              }
    820              break;
    821          
    822            case ZCL_OTA_DL_COMPLETE_CALLBACK:
    823              if (pMsg->hdr.status == ZSuccess)
    824              {
    825                // Reset the CRC Shadow and reboot.  The bootloader will see the
    826                // CRC shadow has been cleared and switch to the new image
    827                HalOTAInvRC();
    828                SystemReset();
    829              }
    830              else
    831              {
    832                // slow the poll rate back down.
    833                RxOnIdle = FALSE;
    834                ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    835                NLME_SetPollRate(DEVICE_POLL_RATE);
    836              }
    837              break;
    838          
    839            default:
    840              break;
    841            }
    842          }
    843          #endif // defined (OTA_CLIENT) && (OTA_CLIENT == TRUE)
    844          
    845          /****************************************************************************
    846          ****************************************************************************/
    847          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    848          void zclZigIt_UiActionToggleLight(uint16 keys)
   \                     zclZigIt_UiActionToggleLight:
    849          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    850            if (zclZigIt_OnOffSwitchActions == ON_OFF_SWITCH_ACTIONS_TOGGLE)
   \   000005   EA           MOV       A,R2
   \   000006   5404         ANL       A,#0x4
   \   000008   F8           MOV       R0,A
   \   000009   90....       MOV       DPTR,#zclZigIt_OnOffSwitchActions
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6402         XRL       A,#0x2
   \   00000F   7038         JNZ       ??zclZigIt_UiActionToggleLight_0
    851            {
    852              if (keys & UI_KEY_SW_5_PRESSED)
   \   000011   E8           MOV       A,R0
   \   000012   7003         JNZ       $+5
   \   000014   02....       LJMP      ??zclZigIt_UiActionToggleLight_1 & 0xFFFF
    853              {
    854                zclGeneral_SendOnOff_CmdToggle( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, FALSE, bdb_getZCLFrameCounter() );
   \   000017                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000017   12....       LCALL     ?Subroutine8 & 0xFFFF
    855              }
    856            }
   \                     ??CrossCallReturnLabel_6:
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   E9           MOV       A,R1
   \   000023   F5..         MOV       ?V0,A
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002A   E4           CLR       A
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003C   75..01       MOV       ?V0,#0x1
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   75..02       MOV       ?V0,#0x2
   \   000047   806F         SJMP      ??zclZigIt_UiActionToggleLight_2
    857            else if (((keys & UI_KEY_SW_5_PRESSED) && (zclZigIt_OnOffSwitchActions == ON_OFF_SWITCH_ACTIONS_ON))
    858              || ((keys & UI_KEY_SW_5_RELEASED) && (zclZigIt_OnOffSwitchActions == ON_OFF_SWITCH_ACTIONS_OFF)))
   \                     ??zclZigIt_UiActionToggleLight_0:
   \   000049   E8           MOV       A,R0
   \   00004A   6003         JZ        ??zclZigIt_UiActionToggleLight_3
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   600A         JZ        ??zclZigIt_UiActionToggleLight_4
   \                     ??zclZigIt_UiActionToggleLight_3:
   \   00004F   EB           MOV       A,R3
   \   000050   5404         ANL       A,#0x4
   \   000052   6034         JZ        ??zclZigIt_UiActionToggleLight_5
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6401         XRL       A,#0x1
   \   000057   702F         JNZ       ??zclZigIt_UiActionToggleLight_5
    859            {
    860              zclGeneral_SendOnOff_CmdOn( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, FALSE, bdb_getZCLFrameCounter() );
   \                     ??zclZigIt_UiActionToggleLight_4:
   \   000059                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000059   12....       LCALL     ?Subroutine8 & 0xFFFF
    861            }
   \                     ??CrossCallReturnLabel_7:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   E9           MOV       A,R1
   \   000065   F5..         MOV       ?V0,A
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006C   E4           CLR       A
   \   00006D   F5..         MOV       ?V0,A
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   78..         MOV       R0,#?V0
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   75..01       MOV       ?V0,#0x1
   \   000081   78..         MOV       R0,#?V0
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   8030         SJMP      ??zclZigIt_UiActionToggleLight_2
    862            else
    863            {
    864              zclGeneral_SendOnOff_CmdOff( SAMPLESW_ENDPOINT, &zclZigIt_DstAddr, FALSE, bdb_getZCLFrameCounter() );
   \                     ??zclZigIt_UiActionToggleLight_5:
   \   000088                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000088   12....       LCALL     ?Subroutine8 & 0xFFFF
    865            }
   \                     ??CrossCallReturnLabel_8:
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   E9           MOV       A,R1
   \   000094   F5..         MOV       ?V0,A
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009B   E4           CLR       A
   \   00009C   F5..         MOV       ?V0,A
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AD   75..01       MOV       ?V0,#0x1
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   75..00       MOV       ?V0,#0x0
   \                     ??zclZigIt_UiActionToggleLight_2:
   \   0000B8   78..         MOV       R0,#?V0
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BD   7C06         MOV       R4,#0x6
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   7A..         MOV       R2,#zclZigIt_DstAddr & 0xff
   \   0000C3   7B..         MOV       R3,#(zclZigIt_DstAddr >> 8) & 0xff
   \   0000C5   7908         MOV       R1,#0x8
   \   0000C7   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000CA   740B         MOV       A,#0xb
   \   0000CC   12....       LCALL     ?DEALLOC_XSTACK8
    866          }
   \                     ??zclZigIt_UiActionToggleLight_1:
   \   0000CF   7F02         MOV       R7,#0x2
   \   0000D1   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   000003   E9           MOV       A,R1
   \   000004   F9           MOV       R1,A
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005                ; Setup parameters for call to function zcl_SendCommand
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   F5..         MOV       ?V1,A
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   22           RET
    867          
    868          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    869          void zclZigIt_UiUpdateLcd(uint8 gui_state, char * line[3])
   \                     zclZigIt_UiUpdateLcd:
    870          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    871            line[2] = "< TOGGLE LIGHT >";
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   74..         MOV       A,#`?<Constant "< TOGGLE LIGHT >">` & 0xff
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   74..         MOV       A,#(`?<Constant "< TOGGLE LIGHT >">` >> 8) & 0xff
   \   000012   F0           MOVX      @DPTR,A
    872          }
   \   000013   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigIt_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_TestEp>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclZigIt_TaskID
   \   000004   0000         DW 0H
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigIt_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclZigIt_CmdCallbacks>`:
   \   000000   ....         DW `??zclZigIt_BasicResetCB::?relay`
   \   000002   0000         DW 0H
   \   000004   0000         DW 0H
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "< TOGGLE LIGHT >">`:
   \   000000   3C20544F     DB "< TOGGLE LIGHT >"
   \            47474C45
   \            204C4947
   \            4854203E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      5   zclZigIt_BasicResetCB
        2      5   -> NLME_LeaveReq
        2      5   -> ZDApp_LeaveReset
        2      5   -> osal_memset
        2      5   -> zclZigIt_ResetAttributesToDefaultValues
        2      5   -> zgWriteStartupOptions
      0     13   zclZigIt_Init
        0      9   -> RegisterForKeys
        0      9   -> afRegister
        0      9   -> bdb_RegisterCommissioningStatusCB
        0      9   -> bdb_RegisterSimpleDescriptor
        0      9   -> bdb_StartCommissioning
        0     13   -> osal_start_timerEx
        0      9   -> zclDiagnostic_InitStats
        0      9   -> zclGeneral_RegisterCmdCallbacks
        0      9   -> zclZigIt_ResetAttributesToDefaultValues
        0      9   -> zcl_registerAttrList
        0      9   -> zcl_registerForMsg
        0      9   -> zcl_registerReadWriteCB
      2      4   zclZigIt_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
        2      4   -> osal_start_timerEx
      2      9   zclZigIt_ProcessInDiscCmdsRspCmd
      0     21   zclZigIt_ProcessIncomingMsg
        0      9   -> osal_mem_free
        0      9   -> zclZigIt_ProcessInDiscCmdsRspCmd
      1     30   zclZigIt_Reporting
        0     13   -> osal_mem_alloc
        0     13   -> osal_mem_free
        0     18   -> zcl_SendReportCmd
      0     21   zclZigIt_UiActionToggleLight
        0     10   -> bdb_getZCLFrameCounter
        0     21   -> zcl_SendCommand
      2      0   zclZigIt_UiUpdateLcd
      0     16   zclZigIt_event_loop
        0     12   -> bdb_ZedAttemptRecoverNwk
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> zclZigIt_ProcessIncomingMsg
        0     12   -> zclZigIt_Reporting


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "< TOGGLE LIGHT >">
       7  ?<Initializer for sampleSw_TestEp>
      18  ?<Initializer for zclZigIt_CmdCallbacks>
       1  ?<Initializer for zclZigIt_NwkState>
       1  ?<Initializer for zclZigIt_OnOffSwitchType>
      11  ??Subroutine11_0
       8  ??Subroutine12_0
       5  ?Subroutine0
       5  ?Subroutine1
       9  ?Subroutine10
       7  ?Subroutine2
       8  ?Subroutine3
       4  ?Subroutine4
       4  ?Subroutine5
      15  ?Subroutine6
       4  ?Subroutine7
      13  ?Subroutine8
       5  ?Subroutine9
       1  STATE_LIGHT
       4  __Constant_1388
       4  __Constant_2710
       7  sampleSw_TestEp
       1  zclZigItSeqNum
      63  zclZigIt_BasicResetCB
      18  zclZigIt_CmdCallbacks
      12  zclZigIt_DstAddr
     133  zclZigIt_Init
       1  zclZigIt_NwkState
       1  zclZigIt_OnOffSwitchActions
       1  zclZigIt_OnOffSwitchType
      66  zclZigIt_ProcessCommissioningStatus
      34  zclZigIt_ProcessInDiscCmdsRspCmd
     139  zclZigIt_ProcessIncomingMsg
     194  zclZigIt_Reporting
       1  zclZigIt_TaskID
     212  zclZigIt_UiActionToggleLight
      22  zclZigIt_UiUpdateLcd
     116  zclZigIt_event_loop
       2  zclZigUPSeqNum
      54  -- Other

 
 1 077 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
    27 bytes in segment XDATA_I
    27 bytes in segment XDATA_ID
    25 bytes in segment XDATA_ROM_C
    18 bytes in segment XDATA_Z
 
    81 bytes of CODE     memory
    17 bytes of CONST    memory (+ 8 bytes shared)
 1 077 bytes of HUGECODE memory
    45 bytes of XDATA    memory

Errors: none
Warnings: 1
